{"version":3,"file":".rspeedy/main/main-thread.js","sources":["file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@hongzhiyuan+preact@10.24.0-00213bad/node_modules/@hongzhiyuan/preact/compat/dist/compat.mjs","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@hongzhiyuan+preact@10.24.0-00213bad/node_modules/@hongzhiyuan/preact/debug/dist/debug.mjs","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@hongzhiyuan+preact@10.24.0-00213bad/node_modules/@hongzhiyuan/preact/devtools/dist/devtools.mjs","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@hongzhiyuan+preact@10.24.0-00213bad/node_modules/@hongzhiyuan/preact/dist/preact.mjs","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@hongzhiyuan+preact@10.24.0-00213bad/node_modules/@hongzhiyuan/preact/hooks/dist/hooks.mjs","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+css-extract-webpack-plugin@0.6.2_@lynx-js+template-webpack-plugin@0.8.5_webpack@5.101.3/node_modules/@lynx-js/css-extract-webpack-plugin/runtime/hotModuleReplacement.lepus.cjs","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+preact-devtools@5.0.1-6664329/node_modules/@lynx-js/preact-devtools/lib/react-lynx/index.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+preact-devtools@5.0.1-6664329/node_modules/@lynx-js/preact-devtools/lib/react-lynx/setup.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/debug/index.cjs","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/debug/index.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lepus/index.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lepus/jsx-runtime/index.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/alog/index.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/alog/render.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/compat/componentIs.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/compat/initData.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/compat/lynxComponent.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/debug/component-stack.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/debug/profile.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/gesture/processGesture.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/gesture/types.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/hooks/react.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/hooks/useLynxGlobalEventListener.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/hydrate.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/index.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/internal.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/lifecycle/destroy.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/lifecycle/event/delayEvents.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/lifecycle/event/delayLifecycleEvents.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/lifecycle/event/jsReady.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/lifecycle/pass.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/lifecycle/patch/commit.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/lifecycle/patch/error.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/lifecycle/patch/isMainThreadHydrating.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/lifecycle/patch/snapshotPatch.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/lifecycle/patch/snapshotPatchApply.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/lifecycle/patch/updateMainThread.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/lifecycle/ref/delay.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/lifecycle/reload.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/lifecycle/render.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/lifecycleConstant.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/list.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/listUpdateInfo.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/lynx-api.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/lynx.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/lynx/calledByNative.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/lynx/component.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/lynx/dynamic-js.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/lynx/env.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/lynx/injectLepusMethods.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/lynx/lazy-bundle.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/lynx/performance.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/lynx/runWithForce.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/lynx/suspense.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/opcodes.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/pendingListUpdates.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/renderToOpcodes/constants.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/renderToOpcodes/index.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/root.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/snapshot.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/snapshot/dynamicPartType.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/snapshot/event.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/snapshot/gesture.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/snapshot/list.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/snapshot/platformInfo.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/snapshot/ref.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/snapshot/spread.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/snapshot/workletEvent.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/snapshot/workletRef.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/snapshotInstanceHydrationMap.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/utils.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/worklet/destroy.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/worklet/functionCall.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/worklet/functionality.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/worklet/hmr.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/worklet/indexMap.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/worklet/runOnBackground.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/worklet/runOnMainThread.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/worklet/transformToWorklet.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/worklet/workletRef.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/runtime/lib/worklet/workletRefPool.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/worklet-runtime/lib/bindings/bindings.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/worklet-runtime/lib/bindings/events.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/worklet-runtime/lib/bindings/index.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/worklet-runtime/lib/bindings/loadRuntime.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/worklet-runtime/lib/bindings/observers.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@lynx-js+react@0.112.4_@lynx-js+types@3.3.0_@types+react@18.3.24/node_modules/@lynx-js/react/worklet-runtime/lib/global.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/@remix-run+router@1.9.0/node_modules/@remix-run/router/dist/router.js","file:///Users/adzfar/Repos/prism/src/frontend/node_modules/.pnpm/react-router@6.16.0_react@19.1.1/node_modules/react-router/dist/index.js","file:///Users/adzfar/Repos/prism/src/frontend/src/App.tsx","file:///Users/adzfar/Repos/prism/src/frontend/src/components/FraudChart.tsx","file:///Users/adzfar/Repos/prism/src/frontend/src/index.tsx","file:///Users/adzfar/Repos/prism/src/frontend/src/pages/Home.tsx","file:///Users/adzfar/Repos/prism/src/frontend/src/pages/LiveSessionDashboard.tsx","file:///Users/adzfar/Repos/prism/src/frontend/src/pages/ProjectedPayment.tsx","file:///Users/adzfar/Repos/prism/src/frontend/src/pages/TransparencyExplorer.tsx","file:///Users/adzfar/Repos/prism/src/frontend/src/utils/capitalise.tsx","file:///Users/adzfar/Repos/prism/src/frontend/src/utils/format-date-time.tsx","file:///Users/adzfar/Repos/prism/src/frontend/src/App.css?1201","file:///Users/adzfar/Repos/prism/src/frontend/src/styles/Home.css?4f17","file:///Users/adzfar/Repos/prism/src/frontend/src/styles/LiveSessionDashboard.css?36b2","file:///Users/adzfar/Repos/prism/src/frontend/src/styles/ProjectedPayment.css?1fe0","file:///Users/adzfar/Repos/prism/src/frontend/src/styles/TransparencyExplorer.css?579b","file://webpack/runtime/compat_get_default_export","file://webpack/runtime/define_property_getters","file://webpack/runtime/get_chunk_update_filename","file://webpack/runtime/get_full_hash","file://webpack/runtime/get_main_filename/update manifest","file://webpack/runtime/has_own_property","file://webpack/runtime/hot_module_replacement","file://webpack/runtime/lynx css hot update","file://webpack/runtime/make_namespace_object","file://webpack/runtime/public_path","file://webpack/runtime/Lynx async chunks","file://webpack/runtime/Lynx chunk loading"],"sourcesContent":["import { Component, createElement, options, toChildArray, Fragment, render as render$1, hydrate as hydrate$1, createContext, createRef, cloneElement as cloneElement$1 } from 'preact';\nexport { Component, Fragment, createContext, createElement, createRef } from 'preact';\nimport { useCallback, useContext, useDebugValue, useEffect, useId, useImperativeHandle, useLayoutEffect, useMemo, useReducer, useRef, useState } from 'preact/hooks';\nexport * from 'preact/hooks';\n\n/**\n * Assign properties from `props` to `obj`\n * @template O, P The obj and props types\n * @param {O} obj The object to copy properties to\n * @param {P} props The object to copy properties from\n * @returns {O & P}\n */\nfunction assign(obj, props) {\n  for (var i in props) obj[i] = props[i];\n  return /** @type {O & P} */obj;\n}\n\n/**\n * Check if two objects have a different shape\n * @param {object} a\n * @param {object} b\n * @returns {boolean}\n */\nfunction shallowDiffers(a, b) {\n  for (var i in a) if (i !== '__source' && !(i in b)) return true;\n  for (var _i in b) if (_i !== '__source' && a[_i] !== b[_i]) return true;\n  return false;\n}\n\n/**\n * Check if two values are the same value\n * @param {*} x\n * @param {*} y\n * @returns {boolean}\n */\nfunction is(x, y) {\n  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;\n}\n\n/**\n * Component class with a predefined `shouldComponentUpdate` implementation\n */\nfunction PureComponent(p, c) {\n  this.props = p;\n  this.context = c;\n}\nPureComponent.prototype = new Component();\n// Some third-party libraries check if this property is present\nPureComponent.prototype.isPureReactComponent = true;\nPureComponent.prototype.shouldComponentUpdate = function (props, state) {\n  return shallowDiffers(this.props, props) || shallowDiffers(this.state, state);\n};\n\n/**\n * Memoize a component, so that it only updates when the props actually have\n * changed. This was previously known as `React.pure`.\n * @param {import('./internal').FunctionComponent} c functional component\n * @param {(prev: object, next: object) => boolean} [comparer] Custom equality function\n * @returns {import('./internal').FunctionComponent}\n */\nfunction memo(c, comparer) {\n  function shouldUpdate(nextProps) {\n    var ref = this.props.ref;\n    var updateRef = ref == nextProps.ref;\n    if (!updateRef && ref) {\n      ref.call ? ref(null) : ref.current = null;\n    }\n    if (!comparer) {\n      return shallowDiffers(this.props, nextProps);\n    }\n    return !comparer(this.props, nextProps) || !updateRef;\n  }\n  function Memoed(props) {\n    this.shouldComponentUpdate = shouldUpdate;\n    return createElement(c, props);\n  }\n  Memoed.displayName = 'Memo(' + (c.displayName || c.name) + ')';\n  Memoed.prototype.isReactComponent = true;\n  Memoed.__f = true;\n  Memoed.type = c;\n  return Memoed;\n}\n\nvar oldDiffHook = options.__b;\noptions.__b = function (vnode) {\n  if (vnode.type && vnode.type.__f && vnode.ref) {\n    vnode.props.ref = vnode.ref;\n    vnode.ref = null;\n  }\n  if (oldDiffHook) oldDiffHook(vnode);\n};\nvar REACT_FORWARD_SYMBOL = typeof Symbol != 'undefined' && Symbol.for && Symbol.for('react.forward_ref') || 0xf47;\n\n/**\n * Pass ref down to a child. This is mainly used in libraries with HOCs that\n * wrap components. Using `forwardRef` there is an easy way to get a reference\n * of the wrapped component instead of one of the wrapper itself.\n * @param {import('./index').ForwardFn} fn\n * @returns {import('./internal').FunctionComponent}\n */\nfunction forwardRef(fn) {\n  function Forwarded(props) {\n    var clone = assign({}, props);\n    delete clone.ref;\n    return fn(clone, props.ref || null);\n  }\n\n  // mobx-react checks for this being present\n  Forwarded.$$typeof = REACT_FORWARD_SYMBOL;\n  // mobx-react heavily relies on implementation details.\n  // It expects an object here with a `render` property,\n  // and prototype.render will fail. Without this\n  // mobx-react throws.\n  Forwarded.render = Forwarded;\n  Forwarded.prototype.isReactComponent = Forwarded.__f = true;\n  Forwarded.displayName = 'ForwardRef(' + (fn.displayName || fn.name) + ')';\n  return Forwarded;\n}\n\nvar mapFn = function mapFn(children, fn) {\n  if (children == null) return null;\n  return toChildArray(toChildArray(children).map(fn));\n};\n\n// This API is completely unnecessary for Preact, so it's basically passthrough.\nvar Children = {\n  map: mapFn,\n  forEach: mapFn,\n  count: function count(children) {\n    return children ? toChildArray(children).length : 0;\n  },\n  only: function only(children) {\n    var normalized = toChildArray(children);\n    if (normalized.length !== 1) throw 'Children.only';\n    return normalized[0];\n  },\n  toArray: toChildArray\n};\n\n/** Normal hydration that attaches to a DOM tree but does not diff it. */\nvar MODE_HYDRATE = 1 << 5;\n\nvar oldCatchError = options.__e;\noptions.__e = function (error, newVNode, oldVNode, errorInfo) {\n  if (error.then) {\n    /** @type {import('./internal').Component} */\n    var component;\n    var vnode = newVNode;\n    for (; vnode = vnode.__;) {\n      if ((component = vnode.__c) && component.__c) {\n        if (newVNode.__e == null) {\n          newVNode.__e = oldVNode.__e;\n          newVNode.__k = oldVNode.__k;\n        }\n        // Don't call oldCatchError if we found a Suspense\n        return component.__c(error, newVNode);\n      }\n    }\n  }\n  oldCatchError(error, newVNode, oldVNode, errorInfo);\n};\nvar oldUnmount = options.unmount;\noptions.unmount = function (vnode) {\n  /** @type {import('./internal').Component} */\n  var component = vnode.__c;\n  if (component && component.__R) {\n    component.__R();\n  }\n\n  // if the component is still hydrating\n  // most likely it is because the component is suspended\n  // we set the vnode.type as `null` so that it is not a typeof function\n  // so the unmount will remove the vnode._dom\n  if (component && vnode.__u & MODE_HYDRATE) {\n    vnode.type = null;\n  }\n  if (oldUnmount) oldUnmount(vnode);\n};\nfunction detachedClone(vnode, detachedParent, parentDom) {\n  if (vnode) {\n    if (vnode.__c && vnode.__c.__H) {\n      vnode.__c.__H.__.forEach(function (effect) {\n        if (typeof effect.__c == 'function') effect.__c();\n      });\n      vnode.__c.__H = null;\n    }\n    vnode = assign({}, vnode);\n    if (vnode.__c != null) {\n      if (vnode.__c.__P === parentDom) {\n        vnode.__c.__P = detachedParent;\n      }\n      vnode.__c = null;\n    }\n    vnode.__k = vnode.__k && vnode.__k.map(function (child) {\n      return detachedClone(child, detachedParent, parentDom);\n    });\n  }\n  return vnode;\n}\nfunction removeOriginal(vnode, detachedParent, originalParent) {\n  if (vnode && originalParent) {\n    vnode.__v = null;\n    vnode.__k = vnode.__k && vnode.__k.map(function (child) {\n      return removeOriginal(child, detachedParent, originalParent);\n    });\n    if (vnode.__c) {\n      if (vnode.__c.__P === detachedParent) {\n        if (vnode.__e) {\n          originalParent.appendChild(vnode.__e);\n        }\n        vnode.__c.__e = true;\n        vnode.__c.__P = originalParent;\n      }\n    }\n  }\n  return vnode;\n}\n\n// having custom inheritance instead of a class here saves a lot of bytes\nfunction Suspense() {\n  // we do not call super here to golf some bytes...\n  this.__u = 0;\n  this._suspenders = null;\n  this.__b = null;\n}\n\n// Things we do here to save some bytes but are not proper JS inheritance:\n// - call `new Component()` as the prototype\n// - do not set `Suspense.prototype.constructor` to `Suspense`\nSuspense.prototype = new Component();\n\n/**\n * @this {import('./internal').SuspenseComponent}\n * @param {Promise} promise The thrown promise\n * @param {import('./internal').VNode<any, any>} suspendingVNode The suspending component\n */\nSuspense.prototype.__c = function (promise, suspendingVNode) {\n  var suspendingComponent = suspendingVNode.__c;\n\n  /** @type {import('./internal').SuspenseComponent} */\n  var c = this;\n  if (c._suspenders == null) {\n    c._suspenders = [];\n  }\n  c._suspenders.push(suspendingComponent);\n  var resolve = suspended(c.__v);\n  var resolved = false;\n  var onResolved = function onResolved() {\n    if (resolved) return;\n    resolved = true;\n    suspendingComponent.__R = null;\n    if (resolve) {\n      resolve(onSuspensionComplete);\n    } else {\n      onSuspensionComplete();\n    }\n  };\n  suspendingComponent.__R = onResolved;\n  var onSuspensionComplete = function onSuspensionComplete() {\n    if (! --c.__u) {\n      // If the suspension was during hydration we don't need to restore the\n      // suspended children into the _children array\n      if (c.state.__a) {\n        var suspendedVNode = c.state.__a;\n        c.__v.__k[0] = removeOriginal(suspendedVNode, suspendedVNode.__c.__P, suspendedVNode.__c.__O);\n      }\n      c.setState({\n        __a: c.__b = null\n      });\n      var _suspended;\n      while (_suspended = c._suspenders.pop()) {\n        _suspended.forceUpdate();\n      }\n    }\n  };\n\n  /**\n   * We do not set `suspended: true` during hydration because we want the actual markup\n   * to remain on screen and hydrate it when the suspense actually gets resolved.\n   * While in non-hydration cases the usual fallback -> component flow would occour.\n   */\n  if (!c.__u++ && !(suspendingVNode.__u & MODE_HYDRATE)) {\n    c.setState({\n      __a: c.__b = c.__v.__k[0]\n    });\n  }\n  promise.then(onResolved, onResolved);\n};\nSuspense.prototype.componentWillUnmount = function () {\n  this._suspenders = [];\n};\n\n/**\n * @this {import('./internal').SuspenseComponent}\n * @param {import('./internal').SuspenseComponent[\"props\"]} props\n * @param {import('./internal').SuspenseState} state\n */\nSuspense.prototype.render = function (props, state) {\n  if (this.__b) {\n    // When the Suspense's _vnode was created by a call to createVNode\n    // (i.e. due to a setState further up in the tree)\n    // it's _children prop is null, in this case we \"forget\" about the parked vnodes to detach\n    if (this.__v.__k) {\n      var detachedParent = options.document.createElement('div');\n      var detachedComponent = this.__v.__k[0].__c;\n      this.__v.__k[0] = detachedClone(this.__b, detachedParent, detachedComponent.__O = detachedComponent.__P);\n    }\n    this.__b = null;\n  }\n\n  // Wrap fallback tree in a VNode that prevents itself from being marked as aborting mid-hydration:\n  /** @type {import('./internal').VNode} */\n  var fallback = state.__a && createElement(Fragment, null, props.fallback);\n  if (fallback) fallback.__u &= ~MODE_HYDRATE;\n  return [createElement(Fragment, null, state.__a ? null : props.children), fallback];\n};\n\n/**\n * Checks and calls the parent component's _suspended method, passing in the\n * suspended vnode. This is a way for a parent (e.g. SuspenseList) to get notified\n * that one of its children/descendants suspended.\n *\n * The parent MAY return a callback. The callback will get called when the\n * suspension resolves, notifying the parent of the fact.\n * Moreover, the callback gets function `unsuspend` as a parameter. The resolved\n * child descendant will not actually get unsuspended until `unsuspend` gets called.\n * This is a way for the parent to delay unsuspending.\n *\n * If the parent does not return a callback then the resolved vnode\n * gets unsuspended immediately when it resolves.\n *\n * @param {import('./internal').VNode} vnode\n * @returns {((unsuspend: () => void) => void)?}\n */\nfunction suspended(vnode) {\n  /** @type {import('./internal').Component} */\n  var component = vnode.__.__c;\n  return component && component.__a && component.__a(vnode);\n}\nfunction lazy(loader) {\n  var prom;\n  var component;\n  var error;\n  function Lazy(props) {\n    if (!prom) {\n      prom = loader();\n      prom.then(function (exports) {\n        component = exports.default || exports;\n      }, function (e) {\n        error = e;\n      });\n    }\n    if (error) {\n      throw error;\n    }\n    if (!component) {\n      throw prom;\n    }\n    return createElement(component, props);\n  }\n  Lazy.displayName = 'Lazy';\n  Lazy.__f = true;\n  return Lazy;\n}\n\n// Indexes to linked list nodes (nodes are stored as arrays to save bytes).\nvar SUSPENDED_COUNT = 0;\nvar RESOLVED_COUNT = 1;\nvar NEXT_NODE = 2;\n\n// Having custom inheritance instead of a class here saves a lot of bytes.\nfunction SuspenseList() {\n  this._next = null;\n  this._map = null;\n}\n\n// Mark one of child's earlier suspensions as resolved.\n// Some pending callbacks may become callable due to this\n// (e.g. the last suspended descendant gets resolved when\n// revealOrder === 'together'). Process those callbacks as well.\nvar resolve = function resolve(list, child, node) {\n  if (++node[RESOLVED_COUNT] === node[SUSPENDED_COUNT]) {\n    // The number a child (or any of its descendants) has been suspended\n    // matches the number of times it's been resolved. Therefore we\n    // mark the child as completely resolved by deleting it from ._map.\n    // This is used to figure out when *all* children have been completely\n    // resolved when revealOrder is 'together'.\n    list._map.delete(child);\n  }\n\n  // If revealOrder is falsy then we can do an early exit, as the\n  // callbacks won't get queued in the node anyway.\n  // If revealOrder is 'together' then also do an early exit\n  // if all suspended descendants have not yet been resolved.\n  if (!list.props.revealOrder || list.props.revealOrder[0] === 't' && list._map.size) {\n    return;\n  }\n\n  // Walk the currently suspended children in order, calling their\n  // stored callbacks on the way. Stop if we encounter a child that\n  // has not been completely resolved yet.\n  node = list._next;\n  while (node) {\n    while (node.length > 3) {\n      node.pop()();\n    }\n    if (node[RESOLVED_COUNT] < node[SUSPENDED_COUNT]) {\n      break;\n    }\n    list._next = node = node[NEXT_NODE];\n  }\n};\n\n// Things we do here to save some bytes but are not proper JS inheritance:\n// - call `new Component()` as the prototype\n// - do not set `Suspense.prototype.constructor` to `Suspense`\nSuspenseList.prototype = new Component();\nSuspenseList.prototype.__a = function (child) {\n  var list = this;\n  var delegated = suspended(list.__v);\n  var node = list._map.get(child);\n  node[SUSPENDED_COUNT]++;\n  return function (unsuspend) {\n    var wrappedUnsuspend = function wrappedUnsuspend() {\n      if (!list.props.revealOrder) {\n        // Special case the undefined (falsy) revealOrder, as there\n        // is no need to coordinate a specific order or unsuspends.\n        unsuspend();\n      } else {\n        node.push(unsuspend);\n        resolve(list, child, node);\n      }\n    };\n    if (delegated) {\n      delegated(wrappedUnsuspend);\n    } else {\n      wrappedUnsuspend();\n    }\n  };\n};\nSuspenseList.prototype.render = function (props) {\n  this._next = null;\n  this._map = new Map();\n  var children = toChildArray(props.children);\n  if (props.revealOrder && props.revealOrder[0] === 'b') {\n    // If order === 'backwards' (or, well, anything starting with a 'b')\n    // then flip the child list around so that the last child will be\n    // the first in the linked list.\n    children.reverse();\n  }\n  // Build the linked list. Iterate through the children in reverse order\n  // so that `_next` points to the first linked list node to be resolved.\n  for (var i = children.length; i--;) {\n    // Create a new linked list node as an array of form:\n    // \t[suspended_count, resolved_count, next_node]\n    // where suspended_count and resolved_count are numeric counters for\n    // keeping track how many times a node has been suspended and resolved.\n    //\n    // Note that suspended_count starts from 1 instead of 0, so we can block\n    // processing callbacks until componentDidMount has been called. In a sense\n    // node is suspended at least until componentDidMount gets called!\n    //\n    // Pending callbacks are added to the end of the node:\n    // \t[suspended_count, resolved_count, next_node, callback_0, callback_1, ...]\n    this._map.set(children[i], this._next = [1, 0, this._next]);\n  }\n  return props.children;\n};\nSuspenseList.prototype.componentDidUpdate = SuspenseList.prototype.componentDidMount = function () {\n  var _this = this;\n  // Iterate through all children after mounting for two reasons:\n  // 1. As each node[SUSPENDED_COUNT] starts from 1, this iteration increases\n  //    each node[RELEASED_COUNT] by 1, therefore balancing the counters.\n  //    The nodes can now be completely consumed from the linked list.\n  // 2. Handle nodes that might have gotten resolved between render and\n  //    componentDidMount.\n  this._map.forEach(function (node, child) {\n    resolve(_this, child, node);\n  });\n};\n\n/**\n * @param {import('../../src/index').RenderableProps<{ context: any }>} props\n */\nfunction ContextProvider(props) {\n  this.getChildContext = function () {\n    return props.context;\n  };\n  return props.children;\n}\n\n/**\n * Portal component\n * @this {import('./internal').Component}\n * @param {object | null | undefined} props\n *\n * TODO: use createRoot() instead of fake root\n */\nfunction Portal(props) {\n  var _this = this;\n  var container = props._container;\n  _this.componentWillUnmount = function () {\n    render$1(null, _this._temp);\n    _this._temp = null;\n    _this._container = null;\n  };\n\n  // When we change container we should clear our old container and\n  // indicate a new mount.\n  if (_this._container && _this._container !== container) {\n    _this.componentWillUnmount();\n  }\n  if (!_this._temp) {\n    _this._container = container;\n\n    // Create a fake DOM parent node that manages a subset of `container`'s children:\n    _this._temp = {\n      nodeType: 1,\n      parentNode: container,\n      childNodes: [],\n      contains: function contains() {\n        return true;\n      },\n      appendChild: function appendChild(child) {\n        this.childNodes.push(child);\n        _this._container.appendChild(child);\n      },\n      insertBefore: function insertBefore(child, before) {\n        this.childNodes.push(child);\n        _this._container.appendChild(child);\n      },\n      removeChild: function removeChild(child) {\n        this.childNodes.splice(this.childNodes.indexOf(child) >>> 1, 1);\n        _this._container.removeChild(child);\n      }\n    };\n  }\n\n  // Render our wrapping element into temp.\n  render$1(createElement(ContextProvider, {\n    context: _this.context\n  }, props.__v), _this._temp);\n}\n\n/**\n * Create a `Portal` to continue rendering the vnode tree at a different DOM node\n * @param {import('./internal').VNode} vnode The vnode to render\n * @param {import('./internal').PreactElement} container The DOM node to continue rendering in to.\n */\nfunction createPortal(vnode, container) {\n  var el = createElement(Portal, {\n    __v: vnode,\n    _container: container\n  });\n  el.containerInfo = container;\n  return el;\n}\n\nvar REACT_ELEMENT_TYPE = typeof Symbol != 'undefined' && Symbol.for && Symbol.for('react.element') || 0xeac7;\n\n// Some libraries like `react-virtualized` explicitly check for this.\nComponent.prototype.isReactComponent = {};\n\n// `UNSAFE_*` lifecycle hooks\n// Preact only ever invokes the unprefixed methods.\n// Here we provide a base \"fallback\" implementation that calls any defined UNSAFE_ prefixed method.\n// - If a component defines its own `componentDidMount()` (including via defineProperty), use that.\n// - If a component defines `UNSAFE_componentDidMount()`, `componentDidMount` is the alias getter/setter.\n// - If anything assigns to an `UNSAFE_*` property, the assignment is forwarded to the unprefixed property.\n// See https://github.com/preactjs/preact/issues/1941\n['componentWillMount', 'componentWillReceiveProps', 'componentWillUpdate'].forEach(function (key) {\n  Object.defineProperty(Component.prototype, key, {\n    configurable: true,\n    get: function get() {\n      return this['UNSAFE_' + key];\n    },\n    set: function set(v) {\n      Object.defineProperty(this, key, {\n        configurable: true,\n        writable: true,\n        value: v\n      });\n    }\n  });\n});\n\n/**\n * Proxy render() since React returns a Component reference.\n * @param {import('./internal').VNode} vnode VNode tree to render\n * @param {import('./internal').PreactElement} parent DOM node to render vnode tree into\n * @param {() => void} [callback] Optional callback that will be called after rendering\n * @returns {import('./internal').Component | null} The root component reference or null\n */\nfunction render(vnode, parent, callback) {\n  // React destroys any existing DOM nodes, see #1727\n  // ...but only on the first render, see #1828\n  if (parent.__k == null) {\n    parent.textContent = '';\n  }\n  render$1(vnode, parent);\n  if (typeof callback == 'function') callback();\n  return vnode ? vnode.__c : null;\n}\nfunction hydrate(vnode, parent, callback) {\n  hydrate$1(vnode, parent);\n  if (typeof callback == 'function') callback();\n  return vnode ? vnode.__c : null;\n}\nvar oldEventHook = options.event;\noptions.event = function (e) {\n  if (oldEventHook) e = oldEventHook(e);\n  e.persist = empty;\n  e.isPropagationStopped = isPropagationStopped;\n  e.isDefaultPrevented = isDefaultPrevented;\n  return e.nativeEvent = e;\n};\nfunction empty() {}\nfunction isPropagationStopped() {\n  return this.cancelBubble;\n}\nfunction isDefaultPrevented() {\n  return this.defaultPrevented;\n}\nvar oldVNodeHook = options.vnode;\noptions.vnode = function (vnode) {\n  vnode.$$typeof = REACT_ELEMENT_TYPE;\n  if (oldVNodeHook) oldVNodeHook(vnode);\n};\n\n// This is a very very private internal function for React it\n// is used to sort-of do runtime dependency injection.\nvar __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = {\n  ReactCurrentDispatcher: {\n    current: {\n      useCallback: useCallback,\n      useContext: useContext,\n      useDebugValue: useDebugValue,\n      useDeferredValue: useDeferredValue,\n      useEffect: useEffect,\n      useId: useId,\n      useImperativeHandle: useImperativeHandle,\n      useInsertionEffect: useInsertionEffect,\n      useLayoutEffect: useLayoutEffect,\n      useMemo: useMemo,\n      // useMutableSource, // experimental-only and replaced by uSES, likely not worth supporting\n      useReducer: useReducer,\n      useRef: useRef,\n      useState: useState,\n      useSyncExternalStore: useSyncExternalStore,\n      useTransition: useTransition\n    }\n  }\n};\n\nvar version = '18.3.1'; // trick libraries to think we are react\n\n/**\n * Legacy version of createElement.\n * @param {import('./internal').VNode[\"type\"]} type The node name or Component constructor\n */\nfunction createFactory(type) {\n  return createElement.bind(null, type);\n}\n\n/**\n * Check if the passed element is a valid (p)react node.\n * @param {*} element The element to check\n * @returns {boolean}\n */\nfunction isValidElement(element) {\n  return !!element && element.$$typeof === REACT_ELEMENT_TYPE;\n}\n\n/**\n * Check if the passed element is a Fragment node.\n * @param {*} element The element to check\n * @returns {boolean}\n */\nfunction isFragment(element) {\n  return isValidElement(element) && element.type === Fragment;\n}\n\n/**\n * Check if the passed element is a Memo node.\n * @param {*} element The element to check\n * @returns {boolean}\n */\nfunction isMemo(element) {\n  return !!element && !!element.displayName && (typeof element.displayName === 'string' || element.displayName instanceof String) && element.displayName.startsWith('Memo(');\n}\n\n/**\n * Wrap `cloneElement` to abort if the passed element is not a valid element and apply\n * all vnode normalizations.\n * @param {import('./internal').VNode} element The vnode to clone\n * @param {object} props Props to add when cloning\n * @param {Array<import('./internal').ComponentChildren>} rest Optional component children\n */\nfunction cloneElement(element) {\n  if (!isValidElement(element)) return element;\n  return cloneElement$1.apply(null, arguments);\n}\n\n/**\n * Remove a component tree from the DOM, including state and event handlers.\n * @param {import('./internal').PreactElement} container\n * @returns {boolean}\n */\nfunction unmountComponentAtNode(container) {\n  if (container.__k) {\n    render$1(null, container);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Get the matching DOM node for a component\n * @param {import('./internal').Component} component\n * @returns {import('./internal').PreactElement | null}\n */\nfunction findDOMNode(component) {\n  return component && (component.base || component.nodeType === 1 && component) || null;\n}\n\n/**\n * Deprecated way to control batched rendering inside the reconciler, but we\n * already schedule in batches inside our rendering code\n * @template Arg\n * @param {(arg: Arg) => void} callback function that triggers the updated\n * @param {Arg} [arg] Optional argument that can be passed to the callback\n */\n// eslint-disable-next-line camelcase\nvar unstable_batchedUpdates = function unstable_batchedUpdates(callback, arg) {\n  return callback(arg);\n};\n\n/**\n * In React, `flushSync` flushes the entire tree and forces a rerender. It's\n * implmented here as a no-op.\n * @template Arg\n * @template Result\n * @param {(arg: Arg) => Result} callback function that runs before the flush\n * @param {Arg} [arg] Optional argument that can be passed to the callback\n * @returns\n */\nvar flushSync = function flushSync(callback, arg) {\n  return callback(arg);\n};\n\n/**\n * Strict Mode is not implemented in Preact, so we provide a stand-in for it\n * that just renders its children without imposing any restrictions.\n */\nvar StrictMode = Fragment;\nfunction startTransition(cb) {\n  cb();\n}\nfunction useDeferredValue(val) {\n  return val;\n}\nfunction useTransition() {\n  return [false, startTransition];\n}\n\n// TODO: in theory this should be done after a VNode is diffed as we want to insert\n// styles/... before it attaches\nvar useInsertionEffect = useLayoutEffect;\n\n// compat to react-is\nvar isElement = isValidElement;\n\n/**\n * This is taken from https://github.com/facebook/react/blob/main/packages/use-sync-external-store/src/useSyncExternalStoreShimClient.js#L84\n * on a high level this cuts out the warnings, ... and attempts a smaller implementation\n * @typedef {{ _value: any; _getSnapshot: () => any }} Store\n */\nfunction useSyncExternalStore(subscribe, getSnapshot) {\n  var value = getSnapshot();\n\n  /**\n   * @typedef {{ _instance: Store }} StoreRef\n   * @type {[StoreRef, (store: StoreRef) => void]}\n   */\n  var _useState = useState({\n      _instance: {\n        __: value,\n        _getSnapshot: getSnapshot\n      }\n    }),\n    _instance = _useState[0]._instance,\n    forceUpdate = _useState[1];\n  useLayoutEffect(function () {\n    _instance.__ = value;\n    _instance._getSnapshot = getSnapshot;\n    if (didSnapshotChange(_instance)) {\n      forceUpdate({\n        _instance: _instance\n      });\n    }\n  }, [subscribe, value, getSnapshot]);\n  useEffect(function () {\n    if (didSnapshotChange(_instance)) {\n      forceUpdate({\n        _instance: _instance\n      });\n    }\n    return subscribe(function () {\n      if (didSnapshotChange(_instance)) {\n        forceUpdate({\n          _instance: _instance\n        });\n      }\n    });\n  }, [subscribe]);\n  return value;\n}\n\n/** @type {(inst: Store) => boolean} */\nfunction didSnapshotChange(inst) {\n  var latestGetSnapshot = inst._getSnapshot;\n  var prevValue = inst.__;\n  try {\n    var nextValue = latestGetSnapshot();\n    return !is(prevValue, nextValue);\n  } catch (error) {\n    return true;\n  }\n}\n\n// React copies the named exports to the default one.\nvar index = {\n  useState: useState,\n  useId: useId,\n  useReducer: useReducer,\n  useEffect: useEffect,\n  useLayoutEffect: useLayoutEffect,\n  useInsertionEffect: useInsertionEffect,\n  useTransition: useTransition,\n  useDeferredValue: useDeferredValue,\n  useSyncExternalStore: useSyncExternalStore,\n  startTransition: startTransition,\n  useRef: useRef,\n  useImperativeHandle: useImperativeHandle,\n  useMemo: useMemo,\n  useCallback: useCallback,\n  useContext: useContext,\n  useDebugValue: useDebugValue,\n  version: version,\n  Children: Children,\n  render: render,\n  hydrate: hydrate,\n  unmountComponentAtNode: unmountComponentAtNode,\n  createPortal: createPortal,\n  createElement: createElement,\n  createContext: createContext,\n  createFactory: createFactory,\n  cloneElement: cloneElement,\n  createRef: createRef,\n  Fragment: Fragment,\n  isValidElement: isValidElement,\n  isElement: isElement,\n  isFragment: isFragment,\n  isMemo: isMemo,\n  findDOMNode: findDOMNode,\n  Component: Component,\n  PureComponent: PureComponent,\n  memo: memo,\n  forwardRef: forwardRef,\n  flushSync: flushSync,\n  unstable_batchedUpdates: unstable_batchedUpdates,\n  StrictMode: StrictMode,\n  Suspense: Suspense,\n  SuspenseList: SuspenseList,\n  lazy: lazy,\n  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED\n};\n\nexport { Children, PureComponent, StrictMode, Suspense, SuspenseList, __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, cloneElement, createFactory, createPortal, index as default, findDOMNode, flushSync, forwardRef, hydrate, isElement, isFragment, isMemo, isValidElement, lazy, memo, render, startTransition, unmountComponentAtNode, unstable_batchedUpdates, useDeferredValue, useInsertionEffect, useSyncExternalStore, useTransition, version };\n//# sourceMappingURL=compat.module.js.map\n","import { Fragment, options, Component } from 'preact';\nimport 'preact/devtools';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\nvar loggedTypeFailures = {};\n\n/**\n * Reset the history of which prop type warnings have been logged.\n */\nfunction resetPropWarnings() {\n  loggedTypeFailures = {};\n}\n\n/**\n * Assert that the values match with the type specs.\n * Error messages are memorized and will only be shown once.\n *\n * Adapted from https://github.com/facebook/prop-types/blob/master/checkPropTypes.js\n *\n * @param {object} typeSpecs Map of name to a ReactPropType\n * @param {object} values Runtime values that need to be type-checked\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @param {string} componentName Name of the component for error messages.\n * @param {?Function} getStack Returns the component stack.\n */\nfunction checkPropTypes(typeSpecs, values, location, componentName, getStack) {\n  Object.keys(typeSpecs).forEach(function (typeSpecName) {\n    var error;\n    try {\n      error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\n    } catch (e) {\n      error = e;\n    }\n    if (error && !(error.message in loggedTypeFailures)) {\n      loggedTypeFailures[error.message] = true;\n      console.error(\"Failed \" + location + \" type: \" + error.message + (getStack && \"\\n\" + getStack() || ''));\n    }\n  });\n}\n\nvar ELEMENT_NODE = 1;\nvar DOCUMENT_NODE = 9;\nvar DOCUMENT_FRAGMENT_NODE = 11;\n\n/**\n * Get human readable name of the component/dom node\n * @param {import('./internal').VNode} vnode\n * @param {import('./internal').VNode} vnode\n * @returns {string}\n */\nfunction getDisplayName(vnode) {\n  if (vnode.type === Fragment) {\n    return 'Fragment';\n  } else if (typeof vnode.type == 'function') {\n    return vnode.type.displayName || vnode.type.name;\n  } else if (typeof vnode.type == 'string') {\n    return vnode.type;\n  }\n  return '#text';\n}\n\n/**\n * Used to keep track of the currently rendered `vnode` and print it\n * in debug messages.\n */\nvar renderStack = [];\n\n/**\n * Keep track of the current owners. An owner describes a component\n * which was responsible to render a specific `vnode`. This exclude\n * children that are passed via `props.children`, because they belong\n * to the parent owner.\n *\n * ```jsx\n * const Foo = props => <div>{props.children}</div> // div's owner is Foo\n * const Bar = props => {\n *   return (\n *     <Foo><span /></Foo> // Foo's owner is Bar, span's owner is Bar\n *   )\n * }\n * ```\n *\n * Note: A `vnode` may be hoisted to the root scope due to compiler\n * optimiztions. In these cases the `_owner` will be different.\n */\nvar ownerStack = [];\n\n/**\n * Get the currently rendered `vnode`\n * @returns {import('./internal').VNode | null}\n */\nfunction getCurrentVNode() {\n  return renderStack.length > 0 ? renderStack[renderStack.length - 1] : null;\n}\n\n/**\n * If the user doesn't have `@babel/plugin-transform-react-jsx-source`\n * somewhere in his tool chain we can't print the filename and source\n * location of a component. In that case we just omit that, but we'll\n * print a helpful message to the console, notifying the user of it.\n */\nvar showJsxSourcePluginWarning = true;\n\n/**\n * Check if a `vnode` is a possible owner.\n * @param {import('./internal').VNode} vnode\n */\nfunction isPossibleOwner(vnode) {\n  return typeof vnode.type == 'function' && vnode.type != Fragment;\n}\n\n/**\n * Return the component stack that was captured up to this point.\n * @param {import('./internal').VNode} vnode\n * @returns {string}\n */\nfunction getOwnerStack(vnode) {\n  var stack = [vnode];\n  var next = vnode;\n  while (next.__o != null) {\n    stack.push(next.__o);\n    next = next.__o;\n  }\n  return stack.reduce(function (acc, owner) {\n    acc += \"  in \" + getDisplayName(owner);\n    var source = owner.__source;\n    if (source) {\n      acc += \" (at \" + source.fileName + \":\" + source.lineNumber + \")\";\n    } else if (showJsxSourcePluginWarning) {\n      console.warn('Add @babel/plugin-transform-react-jsx-source to get a more detailed component stack. Note that you should not add it to production builds of your App for bundle size reasons.');\n    }\n    showJsxSourcePluginWarning = false;\n    return acc += '\\n';\n  }, '');\n}\n\n/**\n * Setup code to capture the component trace while rendering. Note that\n * we cannot simply traverse `vnode._parent` upwards, because we have some\n * debug messages for `this.setState` where the `vnode` is `undefined`.\n */\nfunction setupComponentStack() {\n  var oldDiff = options.__b;\n  var oldDiffed = options.diffed;\n  var oldRoot = options.__;\n  var oldVNode = options.vnode;\n  var oldRender = options.__r;\n  options.diffed = function (vnode) {\n    if (isPossibleOwner(vnode)) {\n      ownerStack.pop();\n    }\n    renderStack.pop();\n    if (oldDiffed) oldDiffed(vnode);\n  };\n  options.__b = function (vnode) {\n    if (isPossibleOwner(vnode)) {\n      renderStack.push(vnode);\n    }\n    if (oldDiff) oldDiff(vnode);\n  };\n  options.__ = function (vnode, parent) {\n    ownerStack = [];\n    if (oldRoot) oldRoot(vnode, parent);\n  };\n  options.vnode = function (vnode) {\n    vnode.__o = ownerStack.length > 0 ? ownerStack[ownerStack.length - 1] : null;\n    if (oldVNode) oldVNode(vnode);\n  };\n  options.__r = function (vnode) {\n    if (isPossibleOwner(vnode)) {\n      ownerStack.push(vnode);\n    }\n    if (oldRender) oldRender(vnode);\n  };\n}\n\n/**\n * Assign properties from `props` to `obj`\n * @template O, P The obj and props types\n * @param {O} obj The object to copy properties to\n * @param {P} props The object to copy properties from\n * @returns {O & P}\n */\nfunction assign(obj, props) {\n  for (var i in props) obj[i] = props[i];\n  return /** @type {O & P} */obj;\n}\nfunction isNaN(value) {\n  return value !== value;\n}\n\nvar isWeakMapSupported = typeof WeakMap == 'function';\n\n/**\n * @param {import('./internal').VNode} vnode\n * @returns {Array<string>}\n */\nfunction getDomChildren(vnode) {\n  var domChildren = [];\n  if (!vnode.__k) return domChildren;\n  vnode.__k.forEach(function (child) {\n    if (child && typeof child.type === 'function') {\n      domChildren.push.apply(domChildren, getDomChildren(child));\n    } else if (child && typeof child.type === 'string') {\n      domChildren.push(child.type);\n    }\n  });\n  return domChildren;\n}\n\n/**\n * @param {import('./internal').VNode} parent\n * @returns {string}\n */\nfunction getClosestDomNodeParentName(parent) {\n  if (!parent) return '';\n  if (typeof parent.type == 'function') {\n    if (parent.__ == null) {\n      if (parent.__e != null && parent.__e.parentNode != null) {\n        return parent.__e.parentNode.localName;\n      }\n      return '';\n    }\n    return getClosestDomNodeParentName(parent.__);\n  }\n  return /** @type {string} */parent.type;\n}\nfunction initDebug() {\n  setupComponentStack();\n  var hooksAllowed = false;\n\n  /* eslint-disable no-console */\n  var oldBeforeDiff = options.__b;\n  var oldDiffed = options.diffed;\n  var oldVnode = options.vnode;\n  var oldRender = options.__r;\n  var oldCatchError = options.__e;\n  var oldRoot = options.__;\n  var oldHook = options.__h;\n  var warnedComponents = !isWeakMapSupported ? null : {\n    useEffect: new WeakMap(),\n    useLayoutEffect: new WeakMap(),\n    lazyPropTypes: new WeakMap()\n  };\n  var deprecations = [];\n  options.__e = function (error, vnode, oldVNode, errorInfo) {\n    var component = vnode && vnode.__c;\n    if (component && typeof error.then == 'function') {\n      var promise = error;\n      error = new Error(\"Missing Suspense. The throwing component was: \" + getDisplayName(vnode));\n      var parent = vnode;\n      for (; parent; parent = parent.__) {\n        if (parent.__c && parent.__c.__c) {\n          error = promise;\n          break;\n        }\n      }\n\n      // We haven't recovered and we know at this point that there is no\n      // Suspense component higher up in the tree\n      if (error instanceof Error) {\n        throw error;\n      }\n    }\n    try {\n      errorInfo = errorInfo || {};\n      errorInfo.componentStack = getOwnerStack(vnode);\n      oldCatchError(error, vnode, oldVNode, errorInfo);\n\n      // when an error was handled by an ErrorBoundary we will nonetheless emit an error\n      // event on the window object. This is to make up for react compatibility in dev mode\n      // and thus make the Next.js dev overlay work.\n      if (typeof error.then != 'function') {\n        setTimeout(function () {\n          throw error;\n        });\n      }\n    } catch (e) {\n      throw e;\n    }\n  };\n  options.__ = function (vnode, parentNode) {\n    if (!parentNode) {\n      throw new Error('Undefined parent passed to render(), this is the second argument.\\n' + 'Check if the element is available in the DOM/has the correct id.');\n    }\n    var isValid;\n    switch (parentNode.nodeType) {\n      case ELEMENT_NODE:\n      case DOCUMENT_FRAGMENT_NODE:\n      case DOCUMENT_NODE:\n        isValid = true;\n        break;\n      default:\n        isValid = false;\n    }\n    if (!isValid) {\n      var componentName = getDisplayName(vnode);\n      throw new Error(\"Expected a valid HTML node as a second argument to render.\\tReceived \" + parentNode + \" instead: render(<\" + componentName + \" />, \" + parentNode + \");\");\n    }\n    if (oldRoot) oldRoot(vnode, parentNode);\n  };\n  options.__b = function (vnode) {\n    var type = vnode.type;\n    hooksAllowed = true;\n    if (type === undefined) {\n      throw new Error('Undefined component passed to createElement()\\n\\n' + 'You likely forgot to export your component or might have mixed up default and named imports' + serializeVNode(vnode) + (\"\\n\\n\" + getOwnerStack(vnode)));\n    } else if (type != null && typeof type == 'object') {\n      if (type.__k !== undefined && type.__e !== undefined) {\n        throw new Error(\"Invalid type passed to createElement(): \" + type + \"\\n\\n\" + 'Did you accidentally pass a JSX literal as JSX twice?\\n\\n' + (\"  let My\" + getDisplayName(vnode) + \" = \" + serializeVNode(type) + \";\\n\") + (\"  let vnode = <My\" + getDisplayName(vnode) + \" />;\\n\\n\") + 'This usually happens when you export a JSX literal and not the component.' + (\"\\n\\n\" + getOwnerStack(vnode)));\n      }\n      throw new Error('Invalid type passed to createElement(): ' + (Array.isArray(type) ? 'array' : type));\n    }\n    if (vnode.ref !== undefined && typeof vnode.ref != 'function' && typeof vnode.ref != 'object' && !('$$typeof' in vnode) // allow string refs when preact-compat is installed\n    ) {\n      throw new Error(\"Component's \\\"ref\\\" property should be a function, or an object created \" + (\"by createRef(), but got [\" + typeof vnode.ref + \"] instead\\n\") + serializeVNode(vnode) + (\"\\n\\n\" + getOwnerStack(vnode)));\n    }\n    if (typeof vnode.type == 'string') {\n      for (var key in vnode.props) {\n        if (key[0] === 'o' && key[1] === 'n' && typeof vnode.props[key] != 'function' && vnode.props[key] != null) {\n          throw new Error(\"Component's \\\"\" + key + \"\\\" property should be a function, \" + (\"but got [\" + typeof vnode.props[key] + \"] instead\\n\") + serializeVNode(vnode) + (\"\\n\\n\" + getOwnerStack(vnode)));\n        }\n      }\n    }\n\n    // Check prop-types if available\n    if (typeof vnode.type == 'function' && vnode.type.propTypes) {\n      if (vnode.type.displayName === 'Lazy' && warnedComponents && !warnedComponents.lazyPropTypes.has(vnode.type)) {\n        var m = 'PropTypes are not supported on lazy(). Use propTypes on the wrapped component itself. ';\n        try {\n          var lazyVNode = vnode.type();\n          warnedComponents.lazyPropTypes.set(vnode.type, true);\n          console.warn(m + (\"Component wrapped in lazy() is \" + getDisplayName(lazyVNode)));\n        } catch (promise) {\n          console.warn(m + \"We will log the wrapped component's name once it is loaded.\");\n        }\n      }\n      var values = vnode.props;\n      if (vnode.type.__f) {\n        values = assign({}, values);\n        delete values.ref;\n      }\n      checkPropTypes(vnode.type.propTypes, values, 'prop', getDisplayName(vnode), function () {\n        return getOwnerStack(vnode);\n      });\n    }\n    if (oldBeforeDiff) oldBeforeDiff(vnode);\n  };\n  var renderCount = 0;\n  var currentComponent;\n  options.__r = function (vnode) {\n    if (oldRender) {\n      oldRender(vnode);\n    }\n    hooksAllowed = true;\n    var nextComponent = vnode.__c;\n    if (nextComponent === currentComponent) {\n      renderCount++;\n    } else {\n      renderCount = 1;\n    }\n    if (renderCount >= 25) {\n      throw new Error(\"Too many re-renders. This is limited to prevent an infinite loop \" + (\"which may lock up your browser. The component causing this is: \" + getDisplayName(vnode)));\n    }\n    currentComponent = nextComponent;\n  };\n  options.__h = function (comp, index, type) {\n    if (!comp || !hooksAllowed) {\n      throw new Error('Hook can only be invoked from render methods.');\n    }\n    if (oldHook) oldHook(comp, index, type);\n  };\n\n  // Ideally we'd want to print a warning once per component, but we\n  // don't have access to the vnode that triggered it here. As a\n  // compromise and to avoid flooding the console with warnings we\n  // print each deprecation warning only once.\n  var warn = function warn(property, message) {\n    return {\n      get: function get() {\n        var key = 'get' + property + message;\n        if (deprecations && deprecations.indexOf(key) < 0) {\n          deprecations.push(key);\n          console.warn(\"getting vnode.\" + property + \" is deprecated, \" + message);\n        }\n      },\n      set: function set() {\n        var key = 'set' + property + message;\n        if (deprecations && deprecations.indexOf(key) < 0) {\n          deprecations.push(key);\n          console.warn(\"setting vnode.\" + property + \" is not allowed, \" + message);\n        }\n      }\n    };\n  };\n  var deprecatedAttributes = {\n    nodeName: warn('nodeName', 'use vnode.type'),\n    attributes: warn('attributes', 'use vnode.props'),\n    children: warn('children', 'use vnode.props.children')\n  };\n  var deprecatedProto = Object.create({}, deprecatedAttributes);\n  options.vnode = function (vnode) {\n    var props = vnode.props;\n    if (vnode.type !== null && props != null && ('__source' in props || '__self' in props)) {\n      var newProps = vnode.props = {};\n      for (var i in props) {\n        var v = props[i];\n        if (i === '__source') vnode.__source = v;else if (i === '__self') vnode.__self = v;else newProps[i] = v;\n      }\n    }\n\n    // eslint-disable-next-line\n    vnode.__proto__ = deprecatedProto;\n    if (oldVnode) oldVnode(vnode);\n  };\n  options.diffed = function (vnode) {\n    var type = vnode.type,\n      parent = vnode.__;\n    // Check if the user passed plain objects as children. Note that we cannot\n    // move this check into `options.vnode` because components can receive\n    // children in any shape they want (e.g.\n    // `<MyJSONFormatter>{{ foo: 123, bar: \"abc\" }}</MyJSONFormatter>`).\n    // Putting this check in `options.diffed` ensures that\n    // `vnode._children` is set and that we only validate the children\n    // that were actually rendered.\n    if (vnode.__k) {\n      vnode.__k.forEach(function (child) {\n        if (typeof child === 'object' && child && child.type === undefined) {\n          var keys = Object.keys(child).join(',');\n          throw new Error(\"Objects are not valid as a child. Encountered an object with the keys {\" + keys + \"}.\" + (\"\\n\\n\" + getOwnerStack(vnode)));\n        }\n      });\n    }\n    if (vnode.__c === currentComponent) {\n      renderCount = 0;\n    }\n    if (typeof type === 'string' && (isTableElement(type) || type === 'p' || type === 'a' || type === 'button')) {\n      // Avoid false positives when Preact only partially rendered the\n      // HTML tree. Whilst we attempt to include the outer DOM in our\n      // validation, this wouldn't work on the server for\n      // `preact-render-to-string`. There we'd otherwise flood the terminal\n      // with false positives, which we'd like to avoid.\n      var domParentName = getClosestDomNodeParentName(parent);\n      if (domParentName !== '' && isTableElement(type)) {\n        if (type === 'table' &&\n        // Tables can be nested inside each other if it's inside a cell.\n        // See https://developer.mozilla.org/en-US/docs/Learn/HTML/Tables/Advanced#nesting_tables\n        domParentName !== 'td' && isTableElement(domParentName)) {\n          console.log(domParentName, parent.__e);\n          console.error('Improper nesting of table. Your <table> should not have a table-node parent.' + serializeVNode(vnode) + (\"\\n\\n\" + getOwnerStack(vnode)));\n        } else if ((type === 'thead' || type === 'tfoot' || type === 'tbody') && domParentName !== 'table') {\n          console.error('Improper nesting of table. Your <thead/tbody/tfoot> should have a <table> parent.' + serializeVNode(vnode) + (\"\\n\\n\" + getOwnerStack(vnode)));\n        } else if (type === 'tr' && domParentName !== 'thead' && domParentName !== 'tfoot' && domParentName !== 'tbody') {\n          console.error('Improper nesting of table. Your <tr> should have a <thead/tbody/tfoot> parent.' + serializeVNode(vnode) + (\"\\n\\n\" + getOwnerStack(vnode)));\n        } else if (type === 'td' && domParentName !== 'tr') {\n          console.error('Improper nesting of table. Your <td> should have a <tr> parent.' + serializeVNode(vnode) + (\"\\n\\n\" + getOwnerStack(vnode)));\n        } else if (type === 'th' && domParentName !== 'tr') {\n          console.error('Improper nesting of table. Your <th> should have a <tr>.' + serializeVNode(vnode) + (\"\\n\\n\" + getOwnerStack(vnode)));\n        }\n      } else if (type === 'p') {\n        var illegalDomChildrenTypes = getDomChildren(vnode).filter(function (childType) {\n          return ILLEGAL_PARAGRAPH_CHILD_ELEMENTS.test(childType);\n        });\n        if (illegalDomChildrenTypes.length) {\n          console.error('Improper nesting of paragraph. Your <p> should not have ' + illegalDomChildrenTypes.join(', ') + 'as child-elements.' + serializeVNode(vnode) + (\"\\n\\n\" + getOwnerStack(vnode)));\n        }\n      } else if (type === 'a' || type === 'button') {\n        if (getDomChildren(vnode).indexOf(type) !== -1) {\n          console.error(\"Improper nesting of interactive content. Your <\" + type + \">\" + (\" should not have other \" + (type === 'a' ? 'anchor' : 'button')) + ' tags as child-elements.' + serializeVNode(vnode) + (\"\\n\\n\" + getOwnerStack(vnode)));\n        }\n      }\n    }\n    hooksAllowed = false;\n    if (oldDiffed) oldDiffed(vnode);\n    if (vnode.__k != null) {\n      var keys = [];\n      for (var i = 0; i < vnode.__k.length; i++) {\n        var child = vnode.__k[i];\n        if (!child || child.key == null) continue;\n        var key = child.key;\n        if (keys.indexOf(key) !== -1) {\n          console.error('Following component has two or more children with the ' + (\"same key attribute: \\\"\" + key + \"\\\". This may cause glitches and misbehavior \") + 'in rendering process. Component: \\n\\n' + serializeVNode(vnode) + (\"\\n\\n\" + getOwnerStack(vnode)));\n\n          // Break early to not spam the console\n          break;\n        }\n        keys.push(key);\n      }\n    }\n    if (vnode.__c != null && vnode.__c.__H != null) {\n      // Validate that none of the hooks in this component contain arguments that are NaN.\n      // This is a common mistake that can be hard to debug, so we want to catch it early.\n      var hooks = vnode.__c.__H.__;\n      if (hooks) {\n        for (var _i = 0; _i < hooks.length; _i += 1) {\n          var hook = hooks[_i];\n          if (hook.__H) {\n            for (var j = 0; j < hook.__H.length; j++) {\n              var arg = hook.__H[j];\n              if (isNaN(arg)) {\n                var componentName = getDisplayName(vnode);\n                throw new Error(\"Invalid argument passed to hook. Hooks should not be called with NaN in the dependency array. Hook index \" + _i + \" in component \" + componentName + \" was called with NaN.\");\n              }\n            }\n          }\n        }\n      }\n    }\n  };\n}\nvar setState = Component.prototype.setState;\nComponent.prototype.setState = function (update, callback) {\n  if (this.__v == null) {\n    // `this._vnode` will be `null` during componentWillMount. But it\n    // is perfectly valid to call `setState` during cWM. So we\n    // need an additional check to verify that we are dealing with a\n    // call inside constructor.\n    if (this.state == null) {\n      console.warn(\"Calling \\\"this.setState\\\" inside the constructor of a component is a \" + \"no-op and might be a bug in your application. Instead, set \" + (\"\\\"this.state = {}\\\" directly.\\n\\n\" + getOwnerStack(getCurrentVNode())));\n    }\n  }\n  return setState.call(this, update, callback);\n};\nfunction isTableElement(type) {\n  return type === 'table' || type === 'tfoot' || type === 'tbody' || type === 'thead' || type === 'td' || type === 'tr' || type === 'th';\n}\nvar ILLEGAL_PARAGRAPH_CHILD_ELEMENTS = /^(address|article|aside|blockquote|details|div|dl|fieldset|figcaption|figure|footer|form|h1|h2|h3|h4|h5|h6|header|hgroup|hr|main|menu|nav|ol|p|pre|search|section|table|ul)$/;\nvar forceUpdate = Component.prototype.forceUpdate;\nComponent.prototype.forceUpdate = function (callback) {\n  if (this.__v == null) {\n    console.warn(\"Calling \\\"this.forceUpdate\\\" inside the constructor of a component is a \" + (\"no-op and might be a bug in your application.\\n\\n\" + getOwnerStack(getCurrentVNode())));\n  } else if (this.__P == null) {\n    console.warn(\"Can't call \\\"this.forceUpdate\\\" on an unmounted component. This is a no-op, \" + \"but it indicates a memory leak in your application. To fix, cancel all \" + \"subscriptions and asynchronous tasks in the componentWillUnmount method.\" + (\"\\n\\n\" + getOwnerStack(this.__v)));\n  }\n  return forceUpdate.call(this, callback);\n};\n\n/**\n * Serialize a vnode tree to a string\n * @param {import('./internal').VNode} vnode\n * @returns {string}\n */\nfunction serializeVNode(vnode) {\n  var props = vnode.props;\n  var name = getDisplayName(vnode);\n  var attrs = '';\n  for (var prop in props) {\n    if (props.hasOwnProperty(prop) && prop !== 'children') {\n      var value = props[prop];\n\n      // If it is an object but doesn't have toString(), use Object.toString\n      if (typeof value == 'function') {\n        value = \"function \" + (value.displayName || value.name) + \"() {}\";\n      }\n      value = Object(value) === value && !value.toString ? Object.prototype.toString.call(value) : value + '';\n      attrs += \" \" + prop + \"=\" + JSON.stringify(value);\n    }\n  }\n  var children = props.children;\n  return \"<\" + name + attrs + (children && children.length ? '>..</' + name + '>' : ' />');\n}\noptions.__m = function (newVNode, excessDomChildren) {\n  var type = newVNode.type;\n  var availableTypes = excessDomChildren.map(function (child) {\n    return child.localName;\n  });\n  console.error(\"Expected a DOM node of type \" + type + \" but found \" + availableTypes.join(', ') + \"as available DOM-node(s), this is caused by the SSR'd HTML containing different DOM-nodes compared to the hydrated one.\\n\\n\" + getOwnerStack(newVNode));\n};\n\ninitDebug();\n\nexport { resetPropWarnings };\n//# sourceMappingURL=debug.module.js.map\n","import { options, Fragment, Component } from 'preact';\n\nfunction initDevTools() {\n  var globalVar = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : undefined;\n  if (globalVar !== null && globalVar !== undefined && globalVar.__PREACT_DEVTOOLS__) {\n    globalVar.__PREACT_DEVTOOLS__.attachPreact('10.24.0', options, {\n      Fragment: Fragment,\n      Component: Component\n    });\n  }\n}\n\ninitDevTools();\n\n/**\n * Display a custom label for a custom hook for the devtools panel\n * @type {<T>(value: T, name: string) => T}\n */\nfunction addHookName(value, name) {\n  if (options.__a) {\n    options.__a(name);\n  }\n  return value;\n}\n\nexport { addHookName };\n//# sourceMappingURL=devtools.module.js.map\n","/** Normal hydration that attaches to a DOM tree but does not diff it. */\nvar MODE_HYDRATE = 1 << 5;\n/** Signifies this VNode suspended on the previous render */\nvar MODE_SUSPENDED = 1 << 7;\n/** Indicates that this node needs to be inserted while patching children */\nvar INSERT_VNODE = 1 << 16;\n/** Indicates a VNode has been matched with another VNode in the diff */\nvar MATCHED = 1 << 17;\n\n/** Reset all mode flags */\nvar RESET_MODE = ~(MODE_HYDRATE | MODE_SUSPENDED);\nvar EMPTY_OBJ = /** @type {any} */{};\nvar EMPTY_ARR = [];\nvar IS_NON_DIMENSIONAL = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;\n\nvar isArray = Array.isArray;\n\n/**\n * Assign properties from `props` to `obj`\n * @template O, P The obj and props types\n * @param {O} obj The object to copy properties to\n * @param {P} props The object to copy properties from\n * @returns {O & P}\n */\nfunction assign(obj, props) {\n  // @ts-expect-error We change the type of `obj` to be `O & P`\n  for (var i in props) obj[i] = props[i];\n  return /** @type {O & P} */obj;\n}\n\n/**\n * Remove a child node from its parent if attached. This is a workaround for\n * IE11 which doesn't support `Element.prototype.remove()`. Using this function\n * is smaller than including a dedicated polyfill.\n * @param {preact.ContainerNode} node The node to remove\n */\nfunction removeNode(node) {\n  if (node && node.parentNode) node.parentNode.removeChild(node);\n}\nvar slice = EMPTY_ARR.slice;\n\n/**\n * Find the closest error boundary to a thrown error and call it\n * @param {object} error The thrown value\n * @param {VNode} vnode The vnode that threw the error that was caught (except\n * for unmounting when this parameter is the highest parent that was being\n * unmounted)\n * @param {VNode} [oldVNode]\n * @param {ErrorInfo} [errorInfo]\n */\nfunction _catchError(error, vnode, oldVNode, errorInfo) {\n  /** @type {Component} */\n  var component, /** @type {ComponentType} */\n    ctor, /** @type {boolean} */\n    handled;\n  for (; vnode = vnode.__;) {\n    if ((component = vnode.__c) && !component.__) {\n      try {\n        ctor = component.constructor;\n        if (ctor && ctor.getDerivedStateFromError != null) {\n          component.setState(ctor.getDerivedStateFromError(error));\n          handled = component.__d;\n        }\n        if (component.componentDidCatch != null) {\n          component.componentDidCatch(error, errorInfo || {});\n          handled = component.__d;\n        }\n\n        // This is an error boundary. Mark it as having bailed out, and whether it was mid-hydration.\n        if (handled) {\n          return component.__E = component;\n        }\n      } catch (e) {\n        error = e;\n      }\n    }\n  }\n  throw error;\n}\n\n/**\n * The `option` object can potentially contain callback functions\n * that are called during various stages of our renderer. This is the\n * foundation on which all our addons like `preact/debug`, `preact/compat`,\n * and `preact/hooks` are based on. See the `Options` type in `internal.d.ts`\n * for a full list of available option hooks (most editors/IDEs allow you to\n * ctrl+click or cmd+click on mac the type definition below).\n * @type {Options}\n */\nvar options = {\n  __e: _catchError\n};\n\nvar vnodeId = 0;\n\n/**\n * Create an virtual node (used for JSX)\n * @param {VNode[\"type\"]} type The node name or Component constructor for this\n * virtual node\n * @param {object | null | undefined} [props] The properties of the virtual node\n * @param {Array<import('.').ComponentChildren>} [children] The children of the\n * virtual node\n * @returns {VNode}\n */\nfunction createElement(type, props, children) {\n  var normalizedProps = {},\n    key,\n    ref,\n    i;\n  for (i in props) {\n    if (i == 'key') key = props[i];else if (i == 'ref') ref = props[i];else normalizedProps[i] = props[i];\n  }\n  if (arguments.length > 2) {\n    normalizedProps.children = arguments.length > 3 ? slice.call(arguments, 2) : children;\n  }\n\n  // If a Component VNode, check for and apply defaultProps\n  // Note: type may be undefined in development, must never error here.\n  if (typeof type == 'function' && type.defaultProps != null) {\n    for (i in type.defaultProps) {\n      if (normalizedProps[i] === undefined) {\n        normalizedProps[i] = type.defaultProps[i];\n      }\n    }\n  }\n  return createVNode(type, normalizedProps, key, ref, null);\n}\n\n/**\n * Create a VNode (used internally by Preact)\n * @param {VNode[\"type\"]} type The node name or Component\n * Constructor for this virtual node\n * @param {object | string | number | null} props The properties of this virtual node.\n * If this virtual node represents a text node, this is the text of the node (string or number).\n * @param {string | number | null} key The key for this virtual node, used when\n * diffing it against its children\n * @param {VNode[\"ref\"]} ref The ref property that will\n * receive a reference to its created child\n * @returns {VNode}\n */\nfunction createVNode(type, props, key, ref, original) {\n  // V8 seems to be better at detecting type shapes if the object is allocated from the same call site\n  // Do not inline into createElement and coerceToVNode!\n  /** @type {VNode} */\n  var vnode = {\n    type: type,\n    props: props,\n    key: key,\n    ref: ref,\n    __k: null,\n    __: null,\n    __b: 0,\n    __e: null,\n    // _nextDom must be initialized to undefined b/c it will eventually\n    // be set to dom.nextSibling which can return `null` and it is important\n    // to be able to distinguish between an uninitialized _nextDom and\n    // a _nextDom that has been set to `null`\n    __d: undefined,\n    __c: null,\n    constructor: undefined,\n    __v: original == null ? ++vnodeId : original,\n    __i: -1,\n    __u: 0\n  };\n\n  // Only invoke the vnode hook if this was *not* a direct copy:\n  if (original == null && options.vnode != null) options.vnode(vnode);\n  return vnode;\n}\nfunction createRef() {\n  return {\n    current: null\n  };\n}\nfunction Fragment(props) {\n  return props.children;\n}\n\n/**\n * Check if a the argument is a valid Preact VNode.\n * @param {*} vnode\n * @returns {vnode is VNode}\n */\nvar isValidElement = function isValidElement(vnode) {\n  return vnode != null && vnode.constructor == undefined;\n};\n\n/**\n * Base Component class. Provides `setState()` and `forceUpdate()`, which\n * trigger rendering\n * @param {object} props The initial component props\n * @param {object} context The initial context from parent components'\n * getChildContext\n */\nfunction BaseComponent(props, context) {\n  this.props = props;\n  this.context = context;\n}\n\n/**\n * Update component state and schedule a re-render.\n * @this {Component}\n * @param {object | ((s: object, p: object) => object)} update A hash of state\n * properties to update with new values or a function that given the current\n * state and props returns a new partial state\n * @param {() => void} [callback] A function to be called once component state is\n * updated\n */\nBaseComponent.prototype.setState = function (update, callback) {\n  // only clone state when copying to nextState the first time.\n  var s;\n  if (this.__s != null && this.__s !== this.state) {\n    s = this.__s;\n  } else {\n    s = this.__s = assign({}, this.state);\n  }\n  if (typeof update == 'function') {\n    // Some libraries like `immer` mark the current state as readonly,\n    // preventing us from mutating it, so we need to clone it. See #2716\n    update = update(assign({}, s), this.props);\n  }\n  if (update) {\n    assign(s, update);\n  }\n\n  // Skip update if updater function returned null\n  if (update == null) return;\n  if (this.__v) {\n    if (callback) {\n      this._sb.push(callback);\n    }\n    enqueueRender(this);\n  }\n};\n\n/**\n * Immediately perform a synchronous re-render of the component\n * @this {Component}\n * @param {() => void} [callback] A function to be called after component is\n * re-rendered\n */\nBaseComponent.prototype.forceUpdate = function (callback) {\n  if (this.__v) {\n    // Set render mode so that we can differentiate where the render request\n    // is coming from. We need this because forceUpdate should never call\n    // shouldComponentUpdate\n    this.__e = true;\n    if (callback) this.__h.push(callback);\n    enqueueRender(this);\n  }\n};\n\n/**\n * Accepts `props` and `state`, and returns a new Virtual DOM tree to build.\n * Virtual DOM is generally constructed via [JSX](http://jasonformat.com/wtf-is-jsx).\n * @param {object} props Props (eg: JSX attributes) received from parent\n * element/component\n * @param {object} state The component's current state\n * @param {object} context Context object, as returned by the nearest\n * ancestor's `getChildContext()`\n * @returns {ComponentChildren | void}\n */\nBaseComponent.prototype.render = Fragment;\n\n/**\n * @param {VNode} vnode\n * @param {number | null} [childIndex]\n */\nfunction getDomSibling(vnode, childIndex) {\n  if (childIndex == null) {\n    // Use childIndex==null as a signal to resume the search from the vnode's sibling\n    return vnode.__ ? getDomSibling(vnode.__, vnode.__i + 1) : null;\n  }\n  var sibling;\n  for (; childIndex < vnode.__k.length; childIndex++) {\n    sibling = vnode.__k[childIndex];\n    if (sibling != null && sibling.__e != null) {\n      // Since updateParentDomPointers keeps _dom pointer correct,\n      // we can rely on _dom to tell us if this subtree contains a\n      // rendered DOM node, and what the first rendered DOM node is\n      return sibling.__e;\n    }\n  }\n\n  // If we get here, we have not found a DOM node in this vnode's children.\n  // We must resume from this vnode's sibling (in it's parent _children array)\n  // Only climb up and search the parent if we aren't searching through a DOM\n  // VNode (meaning we reached the DOM parent of the original vnode that began\n  // the search)\n  return typeof vnode.type == 'function' ? getDomSibling(vnode) : null;\n}\n\n/**\n * Trigger in-place re-rendering of a component.\n * @param {Component} component The component to rerender\n */\nfunction renderComponent(component) {\n  var oldVNode = component.__v,\n    oldDom = oldVNode.__e,\n    commitQueue = [],\n    refQueue = [];\n  if (component.__P) {\n    var newVNode = assign({}, oldVNode);\n    newVNode.__v = oldVNode.__v + 1;\n    if (options.vnode) options.vnode(newVNode);\n    if (options.renderComponent) options.renderComponent(newVNode, component);\n    diff(component.__P, newVNode, oldVNode, component.__n, component.__P.namespaceURI, oldVNode.__u & MODE_HYDRATE ? [oldDom] : null, commitQueue, oldDom == null ? getDomSibling(oldVNode) : oldDom, !!(oldVNode.__u & MODE_HYDRATE), refQueue);\n    newVNode.__v = oldVNode.__v;\n    newVNode.__.__k[newVNode.__i] = newVNode;\n    commitRoot(commitQueue, newVNode, refQueue);\n    if (newVNode.__e != oldDom) {\n      updateParentDomPointers(newVNode);\n    }\n  }\n}\n\n/**\n * @param {VNode} vnode\n */\nfunction updateParentDomPointers(vnode) {\n  if ((vnode = vnode.__) != null && vnode.__c != null) {\n    vnode.__e = vnode.__c.base = null;\n    for (var i = 0; i < vnode.__k.length; i++) {\n      var child = vnode.__k[i];\n      if (child != null && child.__e != null) {\n        vnode.__e = vnode.__c.base = child.__e;\n        break;\n      }\n    }\n    return updateParentDomPointers(vnode);\n  }\n}\n\n/**\n * The render queue\n * @type {Array<Component>}\n */\nvar rerenderQueue = [];\n\n/*\n * The value of `Component.debounce` must asynchronously invoke the passed in callback. It is\n * important that contributors to Preact can consistently reason about what calls to `setState`, etc.\n * do, and when their effects will be applied. See the links below for some further reading on designing\n * asynchronous APIs.\n * * [Designing APIs for Asynchrony](https://blog.izs.me/2013/08/designing-apis-for-asynchrony)\n * * [Callbacks synchronous and asynchronous](https://blog.ometer.com/2011/07/24/callbacks-synchronous-and-asynchronous/)\n */\n\nvar prevDebounce;\nvar defer = typeof Promise == 'function' ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout;\n\n/**\n * Enqueue a rerender of a component\n * @param {Component} c The component to rerender\n */\nfunction enqueueRender(c) {\n  if (!c.__d && (c.__d = true) && rerenderQueue.push(c) && !process.__r++ || prevDebounce !== options.debounceRendering) {\n    prevDebounce = options.debounceRendering;\n    (prevDebounce || defer)(process);\n  }\n}\n\n/**\n * @param {Component} a\n * @param {Component} b\n */\nvar depthSort = function depthSort(a, b) {\n  return a.__v.__b - b.__v.__b;\n};\n\n/** Flush the render queue by rerendering all queued components */\nfunction process() {\n  var c;\n  rerenderQueue.sort(depthSort);\n  // Don't update `renderCount` yet. Keep its value non-zero to prevent unnecessary\n  // process() calls from getting scheduled while `queue` is still being consumed.\n  while (c = rerenderQueue.shift()) {\n    if (c.__d) {\n      var renderQueueLength = rerenderQueue.length;\n      renderComponent(c);\n      if (rerenderQueue.length > renderQueueLength) {\n        // When i.e. rerendering a provider additional new items can be injected, we want to\n        // keep the order from top to bottom with those new items so we can handle them in a\n        // single pass\n        rerenderQueue.sort(depthSort);\n      }\n    }\n  }\n  process.__r = 0;\n}\nprocess.__r = 0;\n\n/**\n * Diff the children of a virtual node\n * @param {PreactElement} parentDom The DOM element whose children are being\n * diffed\n * @param {ComponentChildren[]} renderResult\n * @param {VNode} newParentVNode The new virtual node whose children should be\n * diff'ed against oldParentVNode\n * @param {VNode} oldParentVNode The old virtual node whose children should be\n * diff'ed against newParentVNode\n * @param {object} globalContext The current context object - modified by\n * getChildContext\n * @param {string} namespace Current namespace of the DOM node (HTML, SVG, or MathML)\n * @param {Array<PreactElement>} excessDomChildren\n * @param {Array<Component>} commitQueue List of components which have callbacks\n * to invoke in commitRoot\n * @param {PreactElement} oldDom The current attached DOM element any new dom\n * elements should be placed around. Likely `null` on first render (except when\n * hydrating). Can be a sibling DOM element when diffing Fragments that have\n * siblings. In most cases, it starts out as `oldChildren[0]._dom`.\n * @param {boolean} isHydrating Whether or not we are in hydration\n * @param {any[]} refQueue an array of elements needed to invoke refs\n */\nfunction diffChildren(parentDom, renderResult, newParentVNode, oldParentVNode, globalContext, namespace, excessDomChildren, commitQueue, oldDom, isHydrating, refQueue) {\n  var i, /** @type {VNode} */\n    oldVNode, /** @type {VNode} */\n    childVNode, /** @type {PreactElement} */\n    newDom, /** @type {PreactElement} */\n    firstChildDom;\n\n  // This is a compression of oldParentVNode!=null && oldParentVNode != EMPTY_OBJ && oldParentVNode._children || EMPTY_ARR\n  // as EMPTY_OBJ._children should be `undefined`.\n  /** @type {VNode[]} */\n  var oldChildren = oldParentVNode && oldParentVNode.__k || EMPTY_ARR;\n  var newChildrenLength = renderResult.length;\n  newParentVNode.__d = oldDom;\n  constructNewChildrenArray(newParentVNode, renderResult, oldChildren);\n  oldDom = newParentVNode.__d;\n  for (i = 0; i < newChildrenLength; i++) {\n    childVNode = newParentVNode.__k[i];\n    if (childVNode == null) continue;\n\n    // At this point, constructNewChildrenArray has assigned _index to be the\n    // matchingIndex for this VNode's oldVNode (or -1 if there is no oldVNode).\n    if (childVNode.__i === -1) {\n      oldVNode = EMPTY_OBJ;\n    } else {\n      oldVNode = oldChildren[childVNode.__i] || EMPTY_OBJ;\n    }\n\n    // Update childVNode._index to its final index\n    childVNode.__i = i;\n\n    // Morph the old element into the new one, but don't append it to the dom yet\n    diff(parentDom, childVNode, oldVNode, globalContext, namespace, excessDomChildren, commitQueue, oldDom, isHydrating, refQueue);\n\n    // Adjust DOM nodes\n    newDom = childVNode.__e;\n    if (childVNode.ref && oldVNode.ref != childVNode.ref) {\n      if (oldVNode.ref) {\n        applyRef(oldVNode.ref, null, childVNode);\n      }\n      refQueue.push(childVNode.ref, childVNode.__c || newDom, childVNode);\n    }\n    if (firstChildDom == null && newDom != null) {\n      firstChildDom = newDom;\n    }\n    if (childVNode.__u & INSERT_VNODE || oldVNode.__k === childVNode.__k) {\n      oldDom = insert(childVNode, oldDom, parentDom);\n    } else if (typeof childVNode.type == 'function' && childVNode.__d !== undefined) {\n      // Since Fragments or components that return Fragment like VNodes can\n      // contain multiple DOM nodes as the same level, continue the diff from\n      // the sibling of last DOM child of this child VNode\n      oldDom = childVNode.__d;\n    } else if (newDom) {\n      oldDom = newDom.nextSibling;\n    }\n\n    // Eagerly cleanup _nextDom. We don't need to persist the value because it\n    // is only used by `diffChildren` to determine where to resume the diff\n    // after diffing Components and Fragments. Once we store it the nextDOM\n    // local var, we can clean up the property. Also prevents us hanging on to\n    // DOM nodes that may have been unmounted.\n    childVNode.__d = undefined;\n\n    // Unset diffing flags\n    childVNode.__u &= ~(INSERT_VNODE | MATCHED);\n  }\n\n  // TODO: With new child diffing algo, consider alt ways to diff Fragments.\n  // Such as dropping oldDom and moving fragments in place\n  //\n  // Because the newParentVNode is Fragment-like, we need to set it's\n  // _nextDom property to the nextSibling of its last child DOM node.\n  //\n  // `oldDom` contains the correct value here because if the last child\n  // is a Fragment-like, then oldDom has already been set to that child's _nextDom.\n  // If the last child is a DOM VNode, then oldDom will be set to that DOM\n  // node's nextSibling.\n  newParentVNode.__d = oldDom;\n  newParentVNode.__e = firstChildDom;\n}\n\n/**\n * @param {VNode} newParentVNode\n * @param {ComponentChildren[]} renderResult\n * @param {VNode[]} oldChildren\n */\nfunction constructNewChildrenArray(newParentVNode, renderResult, oldChildren) {\n  /** @type {number} */\n  var i;\n  /** @type {VNode} */\n  var childVNode;\n  /** @type {VNode} */\n  var oldVNode;\n  var newChildrenLength = renderResult.length;\n  var oldChildrenLength = oldChildren.length,\n    remainingOldChildren = oldChildrenLength;\n  var skew = 0;\n  newParentVNode.__k = [];\n  for (i = 0; i < newChildrenLength; i++) {\n    // @ts-expect-error We are reusing the childVNode variable to hold both the\n    // pre and post normalized childVNode\n    childVNode = renderResult[i];\n    if (childVNode == null || typeof childVNode == 'boolean' || typeof childVNode == 'function') {\n      childVNode = newParentVNode.__k[i] = null;\n      continue;\n    }\n    // If this newVNode is being reused (e.g. <div>{reuse}{reuse}</div>) in the same diff,\n    // or we are rendering a component (e.g. setState) copy the oldVNodes so it can have\n    // it's own DOM & etc. pointers\n    else if (typeof childVNode == 'string' || typeof childVNode == 'number' ||\n    // eslint-disable-next-line valid-typeof\n    typeof childVNode == 'bigint' || childVNode.constructor == String) {\n      childVNode = newParentVNode.__k[i] = createVNode(null, childVNode, null, null, null);\n    } else if (isArray(childVNode)) {\n      childVNode = newParentVNode.__k[i] = createVNode(Fragment, {\n        children: childVNode\n      }, null, null, null);\n    } else if (childVNode.constructor === undefined && childVNode.__b > 0) {\n      // VNode is already in use, clone it. This can happen in the following\n      // scenario:\n      //   const reuse = <div />\n      //   <div>{reuse}<span />{reuse}</div>\n      childVNode = newParentVNode.__k[i] = createVNode(childVNode.type, childVNode.props, childVNode.key, childVNode.ref ? childVNode.ref : null, childVNode.__v);\n    } else {\n      childVNode = newParentVNode.__k[i] = childVNode;\n    }\n    var skewedIndex = i + skew;\n    childVNode.__ = newParentVNode;\n    childVNode.__b = newParentVNode.__b + 1;\n\n    // Temporarily store the matchingIndex on the _index property so we can pull\n    // out the oldVNode in diffChildren. We'll override this to the VNode's\n    // final index after using this property to get the oldVNode\n    var matchingIndex = childVNode.__i = findMatchingIndex(childVNode, oldChildren, skewedIndex, remainingOldChildren);\n    oldVNode = null;\n    if (matchingIndex !== -1) {\n      oldVNode = oldChildren[matchingIndex];\n      remainingOldChildren--;\n      if (oldVNode) {\n        oldVNode.__u |= MATCHED;\n      }\n    }\n\n    // Here, we define isMounting for the purposes of the skew diffing\n    // algorithm. Nodes that are unsuspending are considered mounting and we detect\n    // this by checking if oldVNode._original === null\n    var isMounting = oldVNode == null || oldVNode.__v === null;\n    if (isMounting) {\n      if (matchingIndex == -1) {\n        skew--;\n      }\n\n      // If we are mounting a DOM VNode, mark it for insertion\n      if (typeof childVNode.type != 'function') {\n        childVNode.__u |= INSERT_VNODE;\n      }\n    } else if (matchingIndex !== skewedIndex) {\n      // When we move elements around i.e. [0, 1, 2] --> [1, 0, 2]\n      // --> we diff 1, we find it at position 1 while our skewed index is 0 and our skew is 0\n      //     we set the skew to 1 as we found an offset.\n      // --> we diff 0, we find it at position 0 while our skewed index is at 2 and our skew is 1\n      //     this makes us increase the skew again.\n      // --> we diff 2, we find it at position 2 while our skewed index is at 4 and our skew is 2\n      //\n      // this becomes an optimization question where currently we see a 1 element offset as an insertion\n      // or deletion i.e. we optimize for [0, 1, 2] --> [9, 0, 1, 2]\n      // while a more than 1 offset we see as a swap.\n      // We could probably build heuristics for having an optimized course of action here as well, but\n      // might go at the cost of some bytes.\n      //\n      // If we wanted to optimize for i.e. only swaps we'd just do the last two code-branches and have\n      // only the first item be a re-scouting and all the others fall in their skewed counter-part.\n      // We could also further optimize for swaps\n      if (matchingIndex == skewedIndex - 1) {\n        skew--;\n      } else if (matchingIndex == skewedIndex + 1) {\n        skew++;\n      } else {\n        if (matchingIndex > skewedIndex) {\n          skew--;\n        } else {\n          skew++;\n        }\n\n        // Move this VNode's DOM if the original index (matchingIndex) doesn't\n        // match the new skew index (i + new skew)\n        // In the former two branches we know that it matches after skewing\n        childVNode.__u |= INSERT_VNODE;\n      }\n    }\n  }\n\n  // Remove remaining oldChildren if there are any. Loop forwards so that as we\n  // unmount DOM from the beginning of the oldChildren, we can adjust oldDom to\n  // point to the next child, which needs to be the first DOM node that won't be\n  // unmounted.\n  if (remainingOldChildren) {\n    for (i = 0; i < oldChildrenLength; i++) {\n      oldVNode = oldChildren[i];\n      if (oldVNode != null && (oldVNode.__u & MATCHED) === 0) {\n        if (oldVNode.__e == newParentVNode.__d) {\n          newParentVNode.__d = getDomSibling(oldVNode);\n        }\n        unmount(oldVNode, oldVNode);\n      }\n    }\n  }\n}\n\n/**\n * @param {VNode} parentVNode\n * @param {PreactElement} oldDom\n * @param {PreactElement} parentDom\n * @returns {PreactElement}\n */\nfunction insert(parentVNode, oldDom, parentDom) {\n  // Note: VNodes in nested suspended trees may be missing _children.\n\n  if (typeof parentVNode.type == 'function') {\n    var children = parentVNode.__k;\n    for (var i = 0; children && i < children.length; i++) {\n      if (children[i]) {\n        // If we enter this code path on sCU bailout, where we copy\n        // oldVNode._children to newVNode._children, we need to update the old\n        // children's _parent pointer to point to the newVNode (parentVNode\n        // here).\n        children[i].__ = parentVNode;\n        oldDom = insert(children[i], oldDom, parentDom);\n      }\n    }\n    return oldDom;\n  } else if (parentVNode.__e != oldDom) {\n    if (oldDom && parentVNode.type && !parentDom.contains(oldDom)) {\n      oldDom = getDomSibling(parentVNode);\n    }\n    parentDom.insertBefore(parentVNode.__e, oldDom || null);\n    oldDom = parentVNode.__e;\n  }\n  do {\n    oldDom = oldDom && oldDom.nextSibling;\n  } while (oldDom != null && oldDom.nodeType === 8);\n  return oldDom;\n}\n\n/**\n * Flatten and loop through the children of a virtual node\n * @param {ComponentChildren} children The unflattened children of a virtual\n * node\n * @returns {VNode[]}\n */\nfunction toChildArray(children, out) {\n  out = out || [];\n  if (children == null || typeof children == 'boolean') ; else if (isArray(children)) {\n    children.some(function (child) {\n      toChildArray(child, out);\n    });\n  } else {\n    out.push(children);\n  }\n  return out;\n}\n\n/**\n * @param {VNode} childVNode\n * @param {VNode[]} oldChildren\n * @param {number} skewedIndex\n * @param {number} remainingOldChildren\n * @returns {number}\n */\nfunction findMatchingIndex(childVNode, oldChildren, skewedIndex, remainingOldChildren) {\n  var key = childVNode.key;\n  var type = childVNode.type;\n  var x = skewedIndex - 1;\n  var y = skewedIndex + 1;\n  var oldVNode = oldChildren[skewedIndex];\n\n  // We only need to perform a search if there are more children\n  // (remainingOldChildren) to search. However, if the oldVNode we just looked\n  // at skewedIndex was not already used in this diff, then there must be at\n  // least 1 other (so greater than 1) remainingOldChildren to attempt to match\n  // against. So the following condition checks that ensuring\n  // remainingOldChildren > 1 if the oldVNode is not already used/matched. Else\n  // if the oldVNode was null or matched, then there could needs to be at least\n  // 1 (aka `remainingOldChildren > 0`) children to find and compare against.\n  var shouldSearch = remainingOldChildren > (oldVNode != null && (oldVNode.__u & MATCHED) === 0 ? 1 : 0);\n  if (oldVNode === null || oldVNode && key == oldVNode.key && type === oldVNode.type && (oldVNode.__u & MATCHED) === 0) {\n    return skewedIndex;\n  } else if (shouldSearch) {\n    while (x >= 0 || y < oldChildren.length) {\n      if (x >= 0) {\n        oldVNode = oldChildren[x];\n        if (oldVNode && (oldVNode.__u & MATCHED) === 0 && key == oldVNode.key && type === oldVNode.type) {\n          return x;\n        }\n        x--;\n      }\n      if (y < oldChildren.length) {\n        oldVNode = oldChildren[y];\n        if (oldVNode && (oldVNode.__u & MATCHED) === 0 && key == oldVNode.key && type === oldVNode.type) {\n          return y;\n        }\n        y++;\n      }\n    }\n  }\n  return -1;\n}\n\nfunction setStyle(style, key, value) {\n  if (key[0] === '-') {\n    style.setProperty(key, value == null ? '' : value);\n  } else if (value == null) {\n    style[key] = '';\n  } else if (typeof value != 'number' || IS_NON_DIMENSIONAL.test(key)) {\n    style[key] = value;\n  } else {\n    style[key] = value + 'px';\n  }\n}\n\n// A logical clock to solve issues like https://github.com/preactjs/preact/issues/3927.\n// When the DOM performs an event it leaves micro-ticks in between bubbling up which means that\n// an event can trigger on a newly reated DOM-node while the event bubbles up.\n//\n// Originally inspired by Vue\n// (https://github.com/vuejs/core/blob/caeb8a68811a1b0f79/packages/runtime-dom/src/modules/events.ts#L90-L101),\n// but modified to use a logical clock instead of Date.now() in case event handlers get attached\n// and events get dispatched during the same millisecond.\n//\n// The clock is incremented after each new event dispatch. This allows 1 000 000 new events\n// per second for over 280 years before the value reaches Number.MAX_SAFE_INTEGER (2**53 - 1).\nvar eventClock = 0;\n\n/**\n * Set a property value on a DOM node\n * @param {PreactElement} dom The DOM node to modify\n * @param {string} name The name of the property to set\n * @param {*} value The value to set the property to\n * @param {*} oldValue The old value the property had\n * @param {string} namespace Whether or not this DOM node is an SVG node or not\n */\nfunction setProperty(dom, name, value, oldValue, namespace) {\n  var useCapture;\n  o: if (name === 'style') {\n    if (typeof value == 'string') {\n      dom.style.cssText = value;\n    } else {\n      if (typeof oldValue == 'string') {\n        dom.style.cssText = oldValue = '';\n      }\n      if (oldValue) {\n        for (name in oldValue) {\n          if (!(value && name in value)) {\n            setStyle(dom.style, name, '');\n          }\n        }\n      }\n      if (value) {\n        for (name in value) {\n          if (!oldValue || value[name] !== oldValue[name]) {\n            setStyle(dom.style, name, value[name]);\n          }\n        }\n      }\n    }\n  }\n  // Benchmark for comparison: https://esbench.com/bench/574c954bdb965b9a00965ac6\n  else if (name[0] === 'o' && name[1] === 'n') {\n    useCapture = name !== (name = name.replace(/(PointerCapture)$|Capture$/i, '$1'));\n\n    // Infer correct casing for DOM built-in events:\n    if (name.toLowerCase() in dom || name === 'onFocusOut' || name === 'onFocusIn') name = name.toLowerCase().slice(2);else name = name.slice(2);\n    if (!dom.l) dom.l = {};\n    dom.l[name + useCapture] = value;\n    if (value) {\n      if (!oldValue) {\n        value._attached = eventClock;\n        dom.addEventListener(name, useCapture ? eventProxyCapture : eventProxy, useCapture);\n      } else {\n        value._attached = oldValue._attached;\n      }\n    } else {\n      dom.removeEventListener(name, useCapture ? eventProxyCapture : eventProxy, useCapture);\n    }\n  } else {\n    if (namespace == 'http://www.w3.org/2000/svg') {\n      // Normalize incorrect prop usage for SVG:\n      // - xlink:href / xlinkHref --> href (xlink:href was removed from SVG and isn't needed)\n      // - className --> class\n      name = name.replace(/xlink(H|:h)/, 'h').replace(/sName$/, 's');\n    } else if (name != 'width' && name != 'height' && name != 'href' && name != 'list' && name != 'form' &&\n    // Default value in browsers is `-1` and an empty string is\n    // cast to `0` instead\n    name != 'tabIndex' && name != 'download' && name != 'rowSpan' && name != 'colSpan' && name != 'role' && name != 'popover' && name in dom) {\n      try {\n        dom[name] = value == null ? '' : value;\n        // labelled break is 1b smaller here than a return statement (sorry)\n        break o;\n      } catch (e) {}\n    }\n\n    // aria- and data- attributes have no boolean representation.\n    // A `false` value is different from the attribute not being\n    // present, so we can't remove it. For non-boolean aria\n    // attributes we could treat false as a removal, but the\n    // amount of exceptions would cost too many bytes. On top of\n    // that other frameworks generally stringify `false`.\n\n    if (typeof value == 'function') ; else if (value != null && (value !== false || name[4] === '-')) {\n      dom.setAttribute(name, name == 'popover' && value == true ? '' : value);\n    } else {\n      dom.removeAttribute(name);\n    }\n  }\n}\n\n/**\n * Create an event proxy function.\n * @param {boolean} useCapture Is the event handler for the capture phase.\n * @private\n */\nfunction createEventProxy(useCapture) {\n  /**\n   * Proxy an event to hooked event handlers\n   * @param {PreactEvent} e The event object from the browser\n   * @private\n   */\n  return function (e) {\n    if (this.l) {\n      var eventHandler = this.l[e.type + useCapture];\n      if (e._dispatched == null) {\n        e._dispatched = eventClock++;\n\n        // When `e._dispatched` is smaller than the time when the targeted event\n        // handler was attached we know we have bubbled up to an element that was added\n        // during patching the DOM.\n      } else if (e._dispatched < eventHandler._attached) {\n        return;\n      }\n      return eventHandler(options.event ? options.event(e) : e);\n    }\n  };\n}\nvar eventProxy = createEventProxy(false);\nvar eventProxyCapture = createEventProxy(true);\n\n/**\n * Diff two virtual nodes and apply proper changes to the DOM\n * @param {PreactElement} parentDom The parent of the DOM element\n * @param {VNode} newVNode The new virtual node\n * @param {VNode} oldVNode The old virtual node\n * @param {object} globalContext The current context object. Modified by\n * getChildContext\n * @param {string} namespace Current namespace of the DOM node (HTML, SVG, or MathML)\n * @param {Array<PreactElement>} excessDomChildren\n * @param {Array<Component>} commitQueue List of components which have callbacks\n * to invoke in commitRoot\n * @param {PreactElement} oldDom The current attached DOM element any new dom\n * elements should be placed around. Likely `null` on first render (except when\n * hydrating). Can be a sibling DOM element when diffing Fragments that have\n * siblings. In most cases, it starts out as `oldChildren[0]._dom`.\n * @param {boolean} isHydrating Whether or not we are in hydration\n * @param {any[]} refQueue an array of elements needed to invoke refs\n */\nfunction diff(parentDom, newVNode, oldVNode, globalContext, namespace, excessDomChildren, commitQueue, oldDom, isHydrating, refQueue) {\n  /** @type {any} */\n  var tmp,\n    newType = newVNode.type;\n\n  // When passing through createElement it assigns the object\n  // constructor as undefined. This to prevent JSON-injection.\n  if (newVNode.constructor !== undefined) return null;\n\n  // If the previous diff bailed out, resume creating/hydrating.\n  if (oldVNode.__u & MODE_SUSPENDED) {\n    isHydrating = !!(oldVNode.__u & MODE_HYDRATE);\n    oldDom = newVNode.__e = oldVNode.__e;\n    excessDomChildren = [oldDom];\n  }\n  if (tmp = options.__b) tmp(newVNode);\n  if (tmp = options._diff2) tmp(newVNode, oldVNode);\n  outer: if (typeof newType == 'function') {\n    try {\n      var c, isNew, oldProps, oldState, snapshot, clearProcessingException;\n      var newProps = newVNode.props;\n      var isClassComponent = 'prototype' in newType && newType.prototype.render;\n\n      // Necessary for createContext api. Setting this property will pass\n      // the context value as `this.context` just for this component.\n      tmp = newType.contextType;\n      var provider = tmp && globalContext[tmp.__c];\n      var componentContext = tmp ? provider ? provider.props.value : tmp.__ : globalContext;\n\n      // Get component and set it to `c`\n      if (oldVNode.__c) {\n        c = newVNode.__c = oldVNode.__c;\n        clearProcessingException = c.__ = c.__E;\n      } else {\n        // Instantiate the new component\n        if (isClassComponent) {\n          // @ts-expect-error The check above verifies that newType is suppose to be constructed\n          newVNode.__c = c = new newType(newProps, componentContext); // eslint-disable-line new-cap\n        } else {\n          // @ts-expect-error Trust me, Component implements the interface we want\n          newVNode.__c = c = new BaseComponent(newProps, componentContext);\n          c.constructor = newType;\n          c.render = doRender;\n        }\n        if (provider) provider.sub(c);\n        c.props = newProps;\n        if (!c.state) c.state = {};\n        c.context = componentContext;\n        c.__n = globalContext;\n        isNew = c.__d = true;\n        c.__h = [];\n        c._sb = [];\n      }\n\n      // Invoke getDerivedStateFromProps\n      if (isClassComponent && c.__s == null) {\n        c.__s = c.state;\n      }\n      if (isClassComponent && newType.getDerivedStateFromProps != null) {\n        if (c.__s == c.state) {\n          c.__s = assign({}, c.__s);\n        }\n        assign(c.__s, newType.getDerivedStateFromProps(newProps, c.__s));\n      }\n      oldProps = c.props;\n      oldState = c.state;\n      c.__v = newVNode;\n\n      // Invoke pre-render lifecycle methods\n      if (isNew) {\n        if (isClassComponent && newType.getDerivedStateFromProps == null && c.componentWillMount != null) {\n          c.componentWillMount();\n        }\n        if (isClassComponent && c.componentDidMount != null) {\n          c.__h.push(c.componentDidMount);\n        }\n      } else {\n        if (isClassComponent && newType.getDerivedStateFromProps == null && newProps !== oldProps && c.componentWillReceiveProps != null) {\n          c.componentWillReceiveProps(newProps, componentContext);\n        }\n        if (!c.__e && (c.shouldComponentUpdate != null && c.shouldComponentUpdate(newProps, c.__s, componentContext) === false || newVNode.__v === oldVNode.__v)) {\n          // More info about this here: https://gist.github.com/JoviDeCroock/bec5f2ce93544d2e6070ef8e0036e4e8\n          if (newVNode.__v !== oldVNode.__v) {\n            // When we are dealing with a bail because of sCU we have to update\n            // the props, state and dirty-state.\n            // when we are dealing with strict-equality we don't as the child could still\n            // be dirtied see #3883\n            c.props = newProps;\n            c.state = c.__s;\n            c.__d = false;\n          }\n          newVNode.__e = oldVNode.__e;\n          newVNode.__k = oldVNode.__k;\n          newVNode.__k.some(function (vnode) {\n            if (vnode) vnode.__ = newVNode;\n          });\n          for (var i = 0; i < c._sb.length; i++) {\n            c.__h.push(c._sb[i]);\n          }\n          c._sb = [];\n          if (c.__h.length) {\n            commitQueue.push(c);\n          }\n          break outer;\n        }\n        if (c.componentWillUpdate != null) {\n          c.componentWillUpdate(newProps, c.__s, componentContext);\n        }\n        if (isClassComponent && c.componentDidUpdate != null) {\n          c.__h.push(function () {\n            c.componentDidUpdate(oldProps, oldState, snapshot);\n          });\n        }\n      }\n      c.context = componentContext;\n      c.props = newProps;\n      c.__P = parentDom;\n      c.__e = false;\n      var renderHook = options.__r,\n        count = 0;\n      if (isClassComponent) {\n        c.state = c.__s;\n        c.__d = false;\n        if (renderHook) renderHook(newVNode);\n        tmp = c.render(c.props, c.state, c.context);\n        for (var _i = 0; _i < c._sb.length; _i++) {\n          c.__h.push(c._sb[_i]);\n        }\n        c._sb = [];\n      } else {\n        do {\n          c.__d = false;\n          if (renderHook) renderHook(newVNode);\n          tmp = c.render(c.props, c.state, c.context);\n\n          // Handle setState called in render, see #2553\n          c.state = c.__s;\n        } while (c.__d && ++count < 25);\n      }\n\n      // Handle setState called in render, see #2553\n      c.state = c.__s;\n      if (c.getChildContext != null) {\n        globalContext = assign(assign({}, globalContext), c.getChildContext());\n      }\n      if (isClassComponent && !isNew && c.getSnapshotBeforeUpdate != null) {\n        snapshot = c.getSnapshotBeforeUpdate(oldProps, oldState);\n      }\n      var isTopLevelFragment = tmp != null && tmp.type === Fragment && tmp.key == null;\n      var renderResult = isTopLevelFragment ? tmp.props.children : tmp;\n      diffChildren(parentDom, isArray(renderResult) ? renderResult : [renderResult], newVNode, oldVNode, globalContext, namespace, excessDomChildren, commitQueue, oldDom, isHydrating, refQueue);\n      c.base = newVNode.__e;\n\n      // We successfully rendered this VNode, unset any stored hydration/bailout state:\n      newVNode.__u &= RESET_MODE;\n      if (c.__h.length) {\n        commitQueue.push(c);\n      }\n      if (clearProcessingException) {\n        c.__E = c.__ = null;\n      }\n    } catch (e) {\n      newVNode.__v = null;\n      // if hydrating or creating initial tree, bailout preserves DOM:\n      if (isHydrating || excessDomChildren != null) {\n        newVNode.__u |= isHydrating ? MODE_HYDRATE | MODE_SUSPENDED : MODE_HYDRATE;\n        while (oldDom && oldDom.nodeType === 8 && oldDom.nextSibling) {\n          oldDom = oldDom.nextSibling;\n        }\n        excessDomChildren[excessDomChildren.indexOf(oldDom)] = null;\n        newVNode.__e = oldDom;\n      } else {\n        newVNode.__e = oldVNode.__e;\n        newVNode.__k = oldVNode.__k;\n      }\n      options.__e(e, newVNode, oldVNode);\n    }\n  } else if (excessDomChildren == null && newVNode.__v === oldVNode.__v) {\n    newVNode.__k = oldVNode.__k;\n    newVNode.__e = oldVNode.__e;\n  } else {\n    newVNode.__e = diffElementNodes(oldVNode.__e, newVNode, oldVNode, globalContext, namespace, excessDomChildren, commitQueue, isHydrating, refQueue);\n  }\n  if (tmp = options.diffed) tmp(newVNode);\n}\n\n/**\n * @param {Array<Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {VNode} root\n */\nfunction commitRoot(commitQueue, root, refQueue) {\n  root.__d = undefined;\n  for (var i = 0; i < refQueue.length; i++) {\n    applyRef(refQueue[i], refQueue[++i], refQueue[++i]);\n  }\n  if (options.__c) options.__c(root, commitQueue);\n  commitQueue.some(function (c) {\n    try {\n      // @ts-expect-error Reuse the commitQueue variable here so the type changes\n      commitQueue = c.__h;\n      c.__h = [];\n      commitQueue.some(function (cb) {\n        // @ts-expect-error See above comment on commitQueue\n        cb.call(c);\n      });\n    } catch (e) {\n      options.__e(e, c.__v);\n    }\n  });\n}\n\n/**\n * Diff two virtual nodes representing DOM element\n * @param {PreactElement} dom The DOM element representing the virtual nodes\n * being diffed\n * @param {VNode} newVNode The new virtual node\n * @param {VNode} oldVNode The old virtual node\n * @param {object} globalContext The current context object\n * @param {string} namespace Current namespace of the DOM node (HTML, SVG, or MathML)\n * @param {Array<PreactElement>} excessDomChildren\n * @param {Array<Component>} commitQueue List of components which have callbacks\n * to invoke in commitRoot\n * @param {boolean} isHydrating Whether or not we are in hydration\n * @param {any[]} refQueue an array of elements needed to invoke refs\n * @returns {PreactElement}\n */\nfunction diffElementNodes(dom, newVNode, oldVNode, globalContext, namespace, excessDomChildren, commitQueue, isHydrating, refQueue) {\n  var oldProps = oldVNode.props;\n  var newProps = newVNode.props;\n  var nodeType = /** @type {string} */newVNode.type;\n  /** @type {any} */\n  var i;\n  /** @type {{ __html?: string }} */\n  var newHtml;\n  /** @type {{ __html?: string }} */\n  var oldHtml;\n  /** @type {ComponentChildren} */\n  var newChildren;\n  var value;\n  var inputValue;\n  var checked;\n\n  // Tracks entering and exiting namespaces when descending through the tree.\n  if (nodeType === 'svg') namespace = 'http://www.w3.org/2000/svg';else if (nodeType === 'math') namespace = 'http://www.w3.org/1998/Math/MathML';else if (!namespace) namespace = 'http://www.w3.org/1999/xhtml';\n  if (excessDomChildren != null) {\n    for (i = 0; i < excessDomChildren.length; i++) {\n      value = excessDomChildren[i];\n\n      // if newVNode matches an element in excessDomChildren or the `dom`\n      // argument matches an element in excessDomChildren, remove it from\n      // excessDomChildren so it isn't later removed in diffChildren\n      if (value && 'setAttribute' in value === !!nodeType && (nodeType ? value.localName === nodeType : value.nodeType === 3)) {\n        dom = value;\n        excessDomChildren[i] = null;\n        break;\n      }\n    }\n  }\n  if (dom == null) {\n    if (nodeType === null) {\n      return options.document.createTextNode(newProps);\n    }\n    dom = options.document.createElementNS(namespace, nodeType, newProps.is && newProps);\n\n    // we are creating a new node, so we can assume this is a new subtree (in\n    // case we are hydrating), this deopts the hydrate\n    if (isHydrating) {\n      if (options.__m) options.__m(newVNode, excessDomChildren);\n      isHydrating = false;\n    }\n    // we created a new parent, so none of the previously attached children can be reused:\n    excessDomChildren = null;\n  }\n  if (nodeType === null) {\n    // During hydration, we still have to split merged text from SSR'd HTML.\n    if (oldProps !== newProps && (!isHydrating || dom.data !== newProps)) {\n      dom.data = newProps;\n    }\n  } else {\n    // If excessDomChildren was not null, repopulate it with the current element's children:\n    excessDomChildren = excessDomChildren && slice.call(dom.childNodes);\n    oldProps = oldVNode.props || EMPTY_OBJ;\n\n    // If we are in a situation where we are not hydrating but are using\n    // existing DOM (e.g. replaceNode) we should read the existing DOM\n    // attributes to diff them\n    if (!isHydrating && excessDomChildren != null) {\n      oldProps = {};\n      for (i = 0; i < dom.attributes.length; i++) {\n        value = dom.attributes[i];\n        oldProps[value.name] = value.value;\n      }\n    }\n    for (i in oldProps) {\n      value = oldProps[i];\n      if (i == 'children') ; else if (i == 'dangerouslySetInnerHTML') {\n        oldHtml = value;\n      } else if (!(i in newProps)) {\n        if (i == 'value' && 'defaultValue' in newProps || i == 'checked' && 'defaultChecked' in newProps) {\n          continue;\n        }\n        setProperty(dom, i, null, value, namespace);\n      }\n    }\n\n    // During hydration, props are not diffed at all (including dangerouslySetInnerHTML)\n    // @TODO we should warn in debug mode when props don't match here.\n    for (i in newProps) {\n      value = newProps[i];\n      if (i == 'children') {\n        newChildren = value;\n      } else if (i == 'dangerouslySetInnerHTML') {\n        newHtml = value;\n      } else if (i == 'value') {\n        inputValue = value;\n      } else if (i == 'checked') {\n        checked = value;\n      } else if ((!isHydrating || typeof value == 'function') && oldProps[i] !== value) {\n        setProperty(dom, i, value, oldProps[i], namespace);\n      }\n    }\n\n    // If the new vnode didn't have dangerouslySetInnerHTML, diff its children\n    if (newHtml) {\n      // Avoid re-applying the same '__html' if it did not changed between re-render\n      if (!isHydrating && (!oldHtml || newHtml.__html !== oldHtml.__html && newHtml.__html !== dom.innerHTML)) {\n        dom.innerHTML = newHtml.__html;\n      }\n      newVNode.__k = [];\n    } else {\n      if (oldHtml) dom.innerHTML = '';\n      diffChildren(dom, isArray(newChildren) ? newChildren : [newChildren], newVNode, oldVNode, globalContext, nodeType === 'foreignObject' ? 'http://www.w3.org/1999/xhtml' : namespace, excessDomChildren, commitQueue, excessDomChildren ? excessDomChildren[0] : oldVNode.__k && getDomSibling(oldVNode, 0), isHydrating, refQueue);\n\n      // Remove children that are not part of any vnode.\n      if (excessDomChildren != null) {\n        for (i = excessDomChildren.length; i--;) {\n          removeNode(excessDomChildren[i]);\n        }\n      }\n    }\n\n    // As above, don't diff props during hydration\n    if (!isHydrating) {\n      i = 'value';\n      if (nodeType === 'progress' && inputValue == null) {\n        dom.removeAttribute('value');\n      } else if (inputValue !== undefined && (\n      // #2756 For the <progress>-element the initial value is 0,\n      // despite the attribute not being present. When the attribute\n      // is missing the progress bar is treated as indeterminate.\n      // To fix that we'll always update it when it is 0 for progress elements\n      inputValue !== dom[i] || nodeType === 'progress' && !inputValue ||\n      // This is only for IE 11 to fix <select> value not being updated.\n      // To avoid a stale select value we need to set the option.value\n      // again, which triggers IE11 to re-evaluate the select value\n      nodeType === 'option' && inputValue !== oldProps[i])) {\n        setProperty(dom, i, inputValue, oldProps[i], namespace);\n      }\n      i = 'checked';\n      if (checked !== undefined && checked !== dom[i]) {\n        setProperty(dom, i, checked, oldProps[i], namespace);\n      }\n    }\n  }\n  return dom;\n}\n\n/**\n * Invoke or update a ref, depending on whether it is a function or object ref.\n * @param {Ref<any> & { _unmount?: unknown }} ref\n * @param {any} value\n * @param {VNode} vnode\n */\nfunction applyRef(ref, value, vnode) {\n  try {\n    if (typeof ref == 'function') {\n      var hasRefUnmount = typeof ref.__u == 'function';\n      if (hasRefUnmount) {\n        // @ts-ignore TS doesn't like moving narrowing checks into variables\n        ref.__u();\n      }\n      if (!hasRefUnmount || value != null) {\n        // Store the cleanup function on the function\n        // instance object itself to avoid shape\n        // transitioning vnode\n        ref.__u = ref(value);\n      }\n    } else ref.current = value;\n  } catch (e) {\n    options.__e(e, vnode);\n  }\n}\n\n/**\n * Unmount a virtual node from the tree and apply DOM changes\n * @param {VNode} vnode The virtual node to unmount\n * @param {VNode} parentVNode The parent of the VNode that initiated the unmount\n * @param {boolean} [skipRemove] Flag that indicates that a parent node of the\n * current element is already detached from the DOM.\n */\nfunction unmount(vnode, parentVNode, skipRemove) {\n  var r;\n  if (options.unmount) options.unmount(vnode);\n  if (r = vnode.ref) {\n    if (!r.current || r.current === vnode.__e) {\n      applyRef(r, null, parentVNode);\n    }\n  }\n  if ((r = vnode.__c) != null) {\n    if (r.componentWillUnmount) {\n      try {\n        r.componentWillUnmount();\n      } catch (e) {\n        options.__e(e, parentVNode);\n      }\n    }\n    r.base = r.__P = null;\n  }\n  if (r = vnode.__k) {\n    for (var i = 0; i < r.length; i++) {\n      if (r[i]) {\n        unmount(r[i], parentVNode, skipRemove || typeof vnode.type != 'function');\n      }\n    }\n  }\n  if (!skipRemove) {\n    removeNode(vnode.__e);\n  }\n\n  // Must be set to `undefined` to properly clean up `_nextDom`\n  // for which `null` is a valid value. See comment in `create-element.js`\n  vnode.__c = vnode.__ = vnode.__e = vnode.__d = undefined;\n}\n\n/** The `.render()` method for a PFC backing instance. */\nfunction doRender(props, state, context) {\n  return this.constructor(props, context);\n}\n\n/**\n * Render a Preact virtual node into a DOM element\n * @param {ComponentChild} vnode The virtual node to render\n * @param {PreactElement} parentDom The DOM element to render into\n * @param {PreactElement | object} [replaceNode] Optional: Attempt to re-use an\n * existing DOM tree rooted at `replaceNode`\n */\nfunction render(vnode, parentDom, replaceNode) {\n  if (options.__) options.__(vnode, parentDom);\n\n  // We abuse the `replaceNode` parameter in `hydrate()` to signal if we are in\n  // hydration mode or not by passing the `hydrate` function instead of a DOM\n  // element..\n  var isHydrating = typeof replaceNode == 'function';\n\n  // To be able to support calling `render()` multiple times on the same\n  // DOM node, we need to obtain a reference to the previous tree. We do\n  // this by assigning a new `_children` property to DOM nodes which points\n  // to the last rendered tree. By default this property is not present, which\n  // means that we are mounting a new tree for the first time.\n  var oldVNode = isHydrating ? null : replaceNode && replaceNode.__k || parentDom.__k;\n  vnode = (!isHydrating && replaceNode || parentDom).__k = createElement(Fragment, null, [vnode]);\n\n  // List of effects that need to be called after diffing.\n  var commitQueue = [],\n    refQueue = [];\n  diff(parentDom,\n  // Determine the new vnode tree and store it on the DOM element on\n  // our custom `_children` property.\n  vnode, oldVNode || EMPTY_OBJ, EMPTY_OBJ, parentDom.namespaceURI, !isHydrating && replaceNode ? [replaceNode] : oldVNode ? null : parentDom.firstChild ? slice.call(parentDom.childNodes) : null, commitQueue, !isHydrating && replaceNode ? replaceNode : oldVNode ? oldVNode.__e : parentDom.firstChild, isHydrating, refQueue);\n\n  // Flush all queued effects\n  commitRoot(commitQueue, vnode, refQueue);\n}\n\n/**\n * Update an existing DOM element with data from a Preact virtual node\n * @param {ComponentChild} vnode The virtual node to render\n * @param {PreactElement} parentDom The DOM element to update\n */\nfunction hydrate(vnode, parentDom) {\n  render(vnode, parentDom, hydrate);\n}\n\n/**\n * Clones the given VNode, optionally adding attributes/props and replacing its\n * children.\n * @param {VNode} vnode The virtual DOM element to clone\n * @param {object} props Attributes/props to add when cloning\n * @param {Array<ComponentChildren>} rest Any additional arguments will be used\n * as replacement children.\n * @returns {VNode}\n */\nfunction cloneElement(vnode, props, children) {\n  var normalizedProps = assign({}, vnode.props),\n    key,\n    ref,\n    i;\n  var defaultProps;\n  if (vnode.type && vnode.type.defaultProps) {\n    defaultProps = vnode.type.defaultProps;\n  }\n  for (i in props) {\n    if (i == 'key') key = props[i];else if (i == 'ref') ref = props[i];else if (props[i] === undefined && defaultProps !== undefined) {\n      normalizedProps[i] = defaultProps[i];\n    } else {\n      normalizedProps[i] = props[i];\n    }\n  }\n  if (arguments.length > 2) {\n    normalizedProps.children = arguments.length > 3 ? slice.call(arguments, 2) : children;\n  }\n  return createVNode(vnode.type, normalizedProps, key || vnode.key, ref || vnode.ref, null);\n}\n\nvar i = 0;\nfunction createContext(defaultValue, contextId) {\n  contextId = '__cC' + i++;\n  var context = {\n    __c: contextId,\n    __: defaultValue,\n    /** @type {FunctionComponent} */Consumer: function Consumer(props, contextValue) {\n      // return props.children(\n      // \tcontext[contextId] ? context[contextId].props.value : defaultValue\n      // );\n      return props.children(contextValue);\n    },\n    /** @type {FunctionComponent} */Provider: function Provider(props) {\n      if (!this.getChildContext) {\n        /** @type {Component[] | null} */\n        var subs = [];\n        var ctx = {};\n        ctx[contextId] = this;\n        this.getChildContext = function () {\n          return ctx;\n        };\n        this.componentWillUnmount = function () {\n          subs = null;\n        };\n        this.shouldComponentUpdate = function (_props) {\n          if (this.props.value !== _props.value) {\n            subs.some(function (c) {\n              c.__e = true;\n              enqueueRender(c);\n            });\n          }\n        };\n        this.sub = function (c) {\n          subs.push(c);\n          var old = c.componentWillUnmount;\n          c.componentWillUnmount = function () {\n            if (subs) {\n              subs.splice(subs.indexOf(c), 1);\n            }\n            if (old) old.call(c);\n          };\n        };\n      }\n      return props.children;\n    }\n  };\n\n  // Devtools needs access to the context object when it\n  // encounters a Provider. This is necessary to support\n  // setting `displayName` on the context object instead\n  // of on the component itself. See:\n  // https://reactjs.org/docs/context.html#contextdisplayname\n\n  return context.Provider.__ = context.Consumer.contextType = context;\n}\n\nexport { BaseComponent as Component, Fragment, cloneElement, createContext, createElement, createRef, createElement as h, hydrate, isValidElement, options, process, render, toChildArray };\n//# sourceMappingURL=preact.module.js.map\n","import { options as options$1 } from 'preact';\n\n/** @type {number} */\nvar currentIndex;\n\n/** @type {import('./internal').Component} */\nvar currentComponent;\n\n/** @type {import('./internal').Component} */\nvar previousComponent;\n\n/** @type {number} */\nvar currentHook = 0;\n\n/** @type {Array<import('./internal').Component>} */\nvar afterPaintEffects = [];\n\n// Cast to use internal Options type\nvar options = /** @type {import('./internal').Options} */options$1;\nvar oldBeforeDiff = options.__b;\nvar oldBeforeRender = options.__r;\nvar oldAfterDiff = options.diffed;\nvar oldCommit = options.__c;\nvar oldBeforeUnmount = options.unmount;\nvar oldRoot = options.__;\nvar RAF_TIMEOUT = 100;\nvar prevRaf;\n\n/** @type {(vnode: import('./internal').VNode) => void} */\noptions.__b = function (vnode) {\n  currentComponent = null;\n  if (oldBeforeDiff) oldBeforeDiff(vnode);\n};\noptions.__ = function (vnode, parentDom) {\n  if (vnode && parentDom.__k && parentDom.__k.__m) {\n    vnode.__m = parentDom.__k.__m;\n  }\n  if (oldRoot) oldRoot(vnode, parentDom);\n};\n\n/** @type {(vnode: import('./internal').VNode) => void} */\noptions.__r = function (vnode) {\n  if (oldBeforeRender) oldBeforeRender(vnode);\n  currentComponent = vnode.__c;\n  currentIndex = 0;\n  var hooks = currentComponent.__H;\n  if (hooks) {\n    if (previousComponent === currentComponent) {\n      hooks.__h = [];\n      currentComponent.__h = [];\n      hooks.__.forEach(function (hookItem) {\n        if (hookItem.__N) {\n          hookItem.__ = hookItem.__N;\n        }\n        hookItem._pendingArgs = hookItem.__N = undefined;\n      });\n    } else {\n      hooks.__h.forEach(invokeCleanup);\n      hooks.__h.forEach(invokeEffect);\n      hooks.__h = [];\n      currentIndex = 0;\n    }\n  }\n  previousComponent = currentComponent;\n};\n\n/** @type {(vnode: import('./internal').VNode) => void} */\noptions.diffed = function (vnode) {\n  if (oldAfterDiff) oldAfterDiff(vnode);\n  var c = vnode.__c;\n  if (c && c.__H) {\n    if (c.__H.__h.length) afterPaint(afterPaintEffects.push(c));\n    c.__H.__.forEach(function (hookItem) {\n      if (hookItem._pendingArgs) {\n        hookItem.__H = hookItem._pendingArgs;\n      }\n      hookItem._pendingArgs = undefined;\n    });\n  }\n  previousComponent = currentComponent = null;\n};\n\n// TODO: Improve typing of commitQueue parameter\n/** @type {(vnode: import('./internal').VNode, commitQueue: any) => void} */\noptions.__c = function (vnode, commitQueue) {\n  commitQueue.some(function (component) {\n    try {\n      component.__h.forEach(invokeCleanup);\n      component.__h = component.__h.filter(function (cb) {\n        return cb.__ ? invokeEffect(cb) : true;\n      });\n    } catch (e) {\n      commitQueue.some(function (c) {\n        if (c.__h) c.__h = [];\n      });\n      commitQueue = [];\n      options.__e(e, component.__v);\n    }\n  });\n  if (oldCommit) oldCommit(vnode, commitQueue);\n};\n\n/** @type {(vnode: import('./internal').VNode) => void} */\noptions.unmount = function (vnode) {\n  if (oldBeforeUnmount) oldBeforeUnmount(vnode);\n  var c = vnode.__c;\n  if (c && c.__H) {\n    var hasErrored;\n    c.__H.__.forEach(function (s) {\n      try {\n        invokeCleanup(s);\n      } catch (e) {\n        hasErrored = e;\n      }\n    });\n    c.__H = undefined;\n    if (hasErrored) options.__e(hasErrored, c.__v);\n  }\n};\n\n/**\n * Get a hook's state from the currentComponent\n * @param {number} index The index of the hook to get\n * @param {number} type The index of the hook to get\n * @returns {any}\n */\nfunction getHookState(index, type) {\n  if (options.__h) {\n    options.__h(currentComponent, index, currentHook || type);\n  }\n  currentHook = 0;\n\n  // Largely inspired by:\n  // * https://github.com/michael-klein/funcy.js/blob/f6be73468e6ec46b0ff5aa3cc4c9baf72a29025a/src/hooks/core_hooks.mjs\n  // * https://github.com/michael-klein/funcy.js/blob/650beaa58c43c33a74820a3c98b3c7079cf2e333/src/renderer.mjs\n  // Other implementations to look at:\n  // * https://codesandbox.io/s/mnox05qp8\n  var hooks = currentComponent.__H || (currentComponent.__H = {\n    __: [],\n    __h: []\n  });\n  if (index >= hooks.__.length) {\n    hooks.__.push({});\n  }\n  return hooks.__[index];\n}\n\n/**\n * @template {unknown} S\n * @param {import('./index').Dispatch<import('./index').StateUpdater<S>>} [initialState]\n * @returns {[S, (state: S) => void]}\n */\nfunction useState(initialState) {\n  currentHook = 1;\n  return useReducer(invokeOrReturn, initialState);\n}\n\n/**\n * @template {unknown} S\n * @template {unknown} A\n * @param {import('./index').Reducer<S, A>} reducer\n * @param {import('./index').Dispatch<import('./index').StateUpdater<S>>} initialState\n * @param {(initialState: any) => void} [init]\n * @returns {[ S, (state: S) => void ]}\n */\nfunction useReducer(reducer, initialState, init) {\n  /** @type {import('./internal').ReducerHookState} */\n  var hookState = getHookState(currentIndex++, 2);\n  hookState._reducer = reducer;\n  if (!hookState.__c) {\n    hookState.__ = [!init ? invokeOrReturn(undefined, initialState) : init(initialState), function (action) {\n      var currentValue = hookState.__N ? hookState.__N[0] : hookState.__[0];\n      var nextValue = hookState._reducer(currentValue, action);\n      if (currentValue !== nextValue) {\n        hookState.__N = [nextValue, hookState.__[1]];\n        hookState.__c.setState({});\n      }\n    }];\n    hookState.__c = currentComponent;\n    if (!currentComponent._hasScuFromHooks) {\n      // This SCU has the purpose of bailing out after repeated updates\n      // to stateful hooks.\n      // we store the next value in _nextValue[0] and keep doing that for all\n      // state setters, if we have next states and\n      // all next states within a component end up being equal to their original state\n      // we are safe to bail out for this specific component.\n      /**\n       *\n       * @type {import('./internal').Component[\"shouldComponentUpdate\"]}\n       */\n      // @ts-ignore - We don't use TS to downtranspile\n      // eslint-disable-next-line no-inner-declarations\n      var updateHookState = function updateHookState(p, s, c) {\n        if (!hookState.__c.__H) return true;\n\n        /** @type {(x: import('./internal').HookState) => x is import('./internal').ReducerHookState} */\n        var isStateHook = function isStateHook(x) {\n          return !!x.__c;\n        };\n        var stateHooks = hookState.__c.__H.__.filter(isStateHook);\n        var allHooksEmpty = stateHooks.every(function (x) {\n          return !x.__N;\n        });\n        // When we have no updated hooks in the component we invoke the previous SCU or\n        // traverse the VDOM tree further.\n        if (allHooksEmpty) {\n          return prevScu ? prevScu.call(this, p, s, c) : true;\n        }\n\n        // We check whether we have components with a nextValue set that\n        // have values that aren't equal to one another this pushes\n        // us to update further down the tree\n        var shouldUpdate = false;\n        stateHooks.forEach(function (hookItem) {\n          if (hookItem.__N) {\n            var currentValue = hookItem.__[0];\n            hookItem.__ = hookItem.__N;\n            hookItem.__N = undefined;\n            if (currentValue !== hookItem.__[0]) shouldUpdate = true;\n          }\n        });\n        return shouldUpdate || hookState.__c.props !== p ? prevScu ? prevScu.call(this, p, s, c) : true : false;\n      };\n      currentComponent._hasScuFromHooks = true;\n      var prevScu = currentComponent.shouldComponentUpdate;\n      var prevCWU = currentComponent.componentWillUpdate;\n\n      // If we're dealing with a forced update `shouldComponentUpdate` will\n      // not be called. But we use that to update the hook values, so we\n      // need to call it.\n      currentComponent.componentWillUpdate = function (p, s, c) {\n        if (this.__e) {\n          var tmp = prevScu;\n          // Clear to avoid other sCU hooks from being called\n          prevScu = undefined;\n          updateHookState(p, s, c);\n          prevScu = tmp;\n        }\n        if (prevCWU) prevCWU.call(this, p, s, c);\n      };\n      currentComponent.shouldComponentUpdate = updateHookState;\n    }\n  }\n  return hookState.__N || hookState.__;\n}\n\n/**\n * @param {import('./internal').Effect} callback\n * @param {unknown[]} args\n * @returns {void}\n */\nfunction useEffect(callback, args) {\n  /** @type {import('./internal').EffectHookState} */\n  var state = getHookState(currentIndex++, 3);\n  if (!options.__s && argsChanged(state.__H, args)) {\n    state.__ = callback;\n    state._pendingArgs = args;\n    currentComponent.__H.__h.push(state);\n  }\n}\n\n/**\n * @param {import('./internal').Effect} callback\n * @param {unknown[]} args\n * @returns {void}\n */\nfunction useLayoutEffect(callback, args) {\n  /** @type {import('./internal').EffectHookState} */\n  var state = getHookState(currentIndex++, 4);\n  if (!options.__s && argsChanged(state.__H, args)) {\n    state.__ = callback;\n    state._pendingArgs = args;\n    currentComponent.__h.push(state);\n  }\n}\n\n/** @type {(initialValue: unknown) => unknown} */\nfunction useRef(initialValue) {\n  currentHook = 5;\n  return useMemo(function () {\n    return {\n      current: initialValue\n    };\n  }, []);\n}\n\n/**\n * @param {object} ref\n * @param {() => object} createHandle\n * @param {unknown[]} args\n * @returns {void}\n */\nfunction useImperativeHandle(ref, createHandle, args) {\n  currentHook = 6;\n  useLayoutEffect(function () {\n    if (typeof ref == 'function') {\n      ref(createHandle());\n      return function () {\n        return ref(null);\n      };\n    } else if (ref) {\n      ref.current = createHandle();\n      return function () {\n        return ref.current = null;\n      };\n    }\n  }, args == null ? args : args.concat(ref));\n}\n\n/**\n * @template {unknown} T\n * @param {() => T} factory\n * @param {unknown[]} args\n * @returns {T}\n */\nfunction useMemo(factory, args) {\n  /** @type {import('./internal').MemoHookState<T>} */\n  var state = getHookState(currentIndex++, 7);\n  if (argsChanged(state.__H, args)) {\n    state.__ = factory();\n    state.__H = args;\n    state.__h = factory;\n  }\n  return state.__;\n}\n\n/**\n * @param {() => void} callback\n * @param {unknown[]} args\n * @returns {() => void}\n */\nfunction useCallback(callback, args) {\n  currentHook = 8;\n  return useMemo(function () {\n    return callback;\n  }, args);\n}\n\n/**\n * @param {import('./internal').PreactContext} context\n */\nfunction useContext(context) {\n  var provider = currentComponent.context[context.__c];\n  // We could skip this call here, but than we'd not call\n  // `options._hook`. We need to do that in order to make\n  // the devtools aware of this hook.\n  /** @type {import('./internal').ContextHookState} */\n  var state = getHookState(currentIndex++, 9);\n  // The devtools needs access to the context object to\n  // be able to pull of the default value when no provider\n  // is present in the tree.\n  state.c = context;\n  if (!provider) return context.__;\n  // This is probably not safe to convert to \"!\"\n  if (state.__ == null) {\n    state.__ = true;\n    provider.sub(currentComponent);\n  }\n  return provider.props.value;\n}\n\n/**\n * Display a custom label for a custom hook for the devtools panel\n * @type {<T>(value: T, cb?: (value: T) => string | number) => void}\n */\nfunction useDebugValue(value, formatter) {\n  if (options.useDebugValue) {\n    options.useDebugValue(formatter ? formatter(value) : ( /** @type {any}*/value));\n  }\n}\n\n/**\n * @param {(error: unknown, errorInfo: import('preact').ErrorInfo) => void} cb\n * @returns {[unknown, () => void]}\n */\nfunction useErrorBoundary(cb) {\n  /** @type {import('./internal').ErrorBoundaryHookState} */\n  var state = getHookState(currentIndex++, 10);\n  var errState = useState();\n  state.__ = cb;\n  if (!currentComponent.componentDidCatch) {\n    currentComponent.componentDidCatch = function (err, errorInfo) {\n      if (state.__) state.__(err, errorInfo);\n      errState[1](err);\n    };\n  }\n  return [errState[0], function () {\n    errState[1](undefined);\n  }];\n}\n\n/** @type {() => string} */\nfunction useId() {\n  /** @type {import('./internal').IdHookState} */\n  var state = getHookState(currentIndex++, 11);\n  if (!state.__) {\n    // Grab either the root node or the nearest async boundary node.\n    /** @type {import('./internal.d').VNode} */\n    var root = currentComponent.__v;\n    while (root !== null && !root.__m && root.__ !== null) {\n      root = root.__;\n    }\n    var mask = root.__m || (root.__m = [0, 0]);\n    state.__ = 'P' + mask[0] + '-' + mask[1]++;\n  }\n  return state.__;\n}\n\n/**\n * After paint effects consumer.\n */\nfunction flushAfterPaintEffects() {\n  var component;\n  while (component = afterPaintEffects.shift()) {\n    if (!component.__P || !component.__H) continue;\n    try {\n      component.__H.__h.forEach(invokeCleanup);\n      component.__H.__h.forEach(invokeEffect);\n      component.__H.__h = [];\n    } catch (e) {\n      component.__H.__h = [];\n      options.__e(e, component.__v);\n    }\n  }\n}\nvar HAS_RAF = typeof requestAnimationFrame == 'function';\n\n/**\n * Schedule a callback to be invoked after the browser has a chance to paint a new frame.\n * Do this by combining requestAnimationFrame (rAF) + setTimeout to invoke a callback after\n * the next browser frame.\n *\n * Also, schedule a timeout in parallel to the the rAF to ensure the callback is invoked\n * even if RAF doesn't fire (for example if the browser tab is not visible)\n *\n * @param {() => void} callback\n */\nfunction afterNextFrame(callback) {\n  var done = function done() {\n    clearTimeout(timeout);\n    if (HAS_RAF) cancelAnimationFrame(raf);\n    setTimeout(callback);\n  };\n  var timeout = setTimeout(done, RAF_TIMEOUT);\n  var raf;\n  if (HAS_RAF) {\n    raf = requestAnimationFrame(done);\n  }\n}\n\n// Note: if someone used options.debounceRendering = requestAnimationFrame,\n// then effects will ALWAYS run on the NEXT frame instead of the current one, incurring a ~16ms delay.\n// Perhaps this is not such a big deal.\n/**\n * Schedule afterPaintEffects flush after the browser paints\n * @param {number} newQueueLength\n * @returns {void}\n */\nfunction afterPaint(newQueueLength) {\n  if (newQueueLength === 1 || prevRaf !== options.requestAnimationFrame) {\n    prevRaf = options.requestAnimationFrame;\n    (prevRaf || afterNextFrame)(flushAfterPaintEffects);\n  }\n}\n\n/**\n * @param {import('./internal').HookState} hook\n * @returns {void}\n */\nfunction invokeCleanup(hook) {\n  // A hook cleanup can introduce a call to render which creates a new root, this will call options.vnode\n  // and move the currentComponent away.\n  var comp = currentComponent;\n  var cleanup = hook.__c;\n  if (typeof cleanup == 'function') {\n    hook.__c = undefined;\n    cleanup();\n  }\n  currentComponent = comp;\n}\n\n/**\n * Invoke a Hook's effect\n * @param {import('./internal').EffectHookState} hook\n * @returns {void}\n */\nfunction invokeEffect(hook) {\n  // A hook call can introduce a call to render which creates a new root, this will call options.vnode\n  // and move the currentComponent away.\n  var comp = currentComponent;\n  hook.__c = hook.__();\n  currentComponent = comp;\n}\n\n/**\n * @param {unknown[]} oldArgs\n * @param {unknown[]} newArgs\n * @returns {boolean}\n */\nfunction argsChanged(oldArgs, newArgs) {\n  return !oldArgs || oldArgs.length !== newArgs.length || newArgs.some(function (arg, index) {\n    return arg !== oldArgs[index];\n  });\n}\n\n/**\n * @template Arg\n * @param {Arg} arg\n * @param {(arg: Arg) => any} f\n * @returns {any}\n */\nfunction invokeOrReturn(arg, f) {\n  return typeof f == 'function' ? f(arg) : f;\n}\n\nexport { useCallback, useContext, useDebugValue, useEffect, useErrorBoundary, useId, useImperativeHandle, useLayoutEffect, useMemo, useReducer, useRef, useState };\n//# sourceMappingURL=hooks.module.js.map\n","function main() {\n  try {\n    lynx.getJSContext().addEventListener('lynx.hmr.css', (event) => {\n      try {\n        const { data: { cssId, content, deps, entry } } = event;\n        // Update the css deps first because the css deps are updated actually.\n        if (Array.isArray(deps[cssId])) {\n          deps[cssId].forEach(depCSSId => {\n            lynx.getDevtool().replaceStyleSheetByIdWithBase64(\n              Number(depCSSId),\n              content,\n              entry,\n            );\n          });\n        }\n\n        lynx.getDevtool().replaceStyleSheetByIdWithBase64(\n          Number(cssId),\n          content,\n          entry,\n        );\n\n        __FlushElementTree();\n      } catch (error) {\n        // TODO: use webpack-dev-server logger\n        console.error(error);\n      }\n    });\n  } catch (error) {\n    // TODO: use webpack-dev-server logger\n    console.warn(`[HMR] no lynx.getJSContext() found, will not HMR CSS`);\n    console.warn(error);\n  }\n}\n\nmain();\n","\"use strict\";\n// Skip setup in test environment because `require` does not work\n// in vitest esm env, and `lynx.getDevtool` is not mocked yet\nif (__DEV__ && process.env.NODE_ENV !== \"test\") {\n    // We cannot use dynamic import here because\n    // dynamic import will generate a new lazy bundle\n    // which is not what we needed\n    require(\"./setup\").setupReactLynx();\n}\n","import { __root, __page } from \"@lynx-js/react/internal\";\nexport function setupReactLynx() {\n    if (__BACKGROUND__) {\n        try {\n            // @ts-ignore\n            if (typeof lynx.getDevtool !== \"function\") {\n                throw new Error(\"`lynx.getDevtool` is not a function. Please upgrade your LynxSDK to the latest version.\");\n            }\n            // @ts-ignore\n            globalThis.preactDevtoolsCtx || (globalThis.preactDevtoolsCtx = {});\n            const __DEBUG__ = globalThis.preactDevtoolsCtx.__DEBUG__;\n            if (__DEBUG__) {\n                console.log(\"[PREACT DEVTOOLS] debug mode is enabled\");\n            }\n            if (__DEBUG__) {\n                // For quick debug in HDT console\n                Object.assign(preactDevtoolsCtx, {\n                    lynx,\n                    __page,\n                    __root,\n                    // @ts-ignore\n                    lynxCoreInject,\n                });\n            }\n            const listeners = {};\n            preactDevtoolsCtx.addEventListener = (type, callback) => {\n                if (!listeners[type]) {\n                    listeners[type] = [];\n                }\n                listeners[type].push(callback);\n            };\n            preactDevtoolsCtx.postMessage = ({ source, type, data }, \n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            _targetOrigin) => {\n                for (let i = 0; i < (listeners[\"message\"]?.length ?? 0); i++) {\n                    listeners[\"message\"]?.[i]?.({\n                        // in-App to-self message\n                        source: preactDevtoolsCtx,\n                        data: {\n                            source,\n                            type,\n                            data,\n                        },\n                    });\n                }\n                if (__DEBUG__) {\n                    // App -> Devtools\n                    console.log(\"lynx.getDevtool().dispatchEvent\", {\n                        source,\n                        type,\n                        data,\n                    });\n                }\n                // @ts-ignore\n                lynx.getDevtool().dispatchEvent({\n                    type: \"PreactDevtools\",\n                    data: JSON.stringify({\n                        source,\n                        type,\n                        data,\n                    }),\n                });\n            };\n            // @ts-ignore\n            lynx.getDevtool().addEventListener(\"PreactDevtools\", e => {\n                const dataObj = JSON.parse(e.data);\n                if (__DEBUG__) {\n                    console.log(\"hdt -> frontend message received\", dataObj);\n                }\n                const { source, type, data } = dataObj;\n                for (let i = 0; i < (listeners[\"message\"]?.length ?? 0); i++) {\n                    listeners[\"message\"]?.[i]?.({\n                        source: preactDevtoolsCtx,\n                        data: {\n                            source,\n                            type,\n                            data,\n                        },\n                    });\n                }\n            });\n            if (typeof preactDevtoolsCtx.localStorage === \"undefined\" ||\n                preactDevtoolsCtx.localStorage === null) {\n                const storage = {};\n                preactDevtoolsCtx.localStorage = {\n                    getItem: function (key) {\n                        if (__DEBUG__)\n                            console.log(`getItem called with key: ${key}`);\n                        return Object.prototype.hasOwnProperty.call(storage, key)\n                            ? (storage[key] ?? null)\n                            : null;\n                    },\n                    setItem: function (key, value) {\n                        if (__DEBUG__) {\n                            console.log(`setItem called with key: ${key}, value: ${value}`);\n                        }\n                        storage[key] = value.toString();\n                    },\n                    removeItem: function (key) {\n                        if (__DEBUG__)\n                            console.log(`removeItem called with key: ${key}`);\n                        delete storage[key];\n                    },\n                    clear: function () {\n                        if (__DEBUG__)\n                            console.log(\"clear called\");\n                        for (const key in storage) {\n                            if (Object.prototype.hasOwnProperty.call(storage, key)) {\n                                delete storage[key];\n                            }\n                        }\n                    },\n                    key: function (index) {\n                        if (__DEBUG__)\n                            console.log(`key called with index: ${index}`);\n                        const keys = Object.keys(storage);\n                        return keys[index] || null;\n                    },\n                    get length() {\n                        if (__DEBUG__)\n                            console.log(\"length property accessed\");\n                        return Object.keys(storage).length;\n                    },\n                };\n            }\n            if (typeof preactDevtoolsCtx.performance === \"undefined\" ||\n                preactDevtoolsCtx.performance === null) {\n                if (__DEBUG__)\n                    console.log(\"Mocking performance API...\");\n                const marks = [];\n                const measures = [];\n                const startTime = Date.now();\n                preactDevtoolsCtx.performance = {\n                    now: function () {\n                        // 返回自浏览器上下文被完全加载并设立以来经过的毫秒数\n                        return Date.now() - startTime;\n                    },\n                    // @ts-ignore\n                    mark: function (markName) {\n                        if (__DEBUG__) {\n                            console.log(`performance.mark called with markName: ${markName}`);\n                        }\n                        marks.push({\n                            name: markName,\n                            entryType: \"mark\",\n                            startTime: this.now(),\n                            duration: 0,\n                        });\n                    },\n                    // @ts-ignore\n                    measure: function (measureName, startMark, endMark) {\n                        if (__DEBUG__) {\n                            console.log(`performance.measure called with measureName: ${measureName}, startMark: ${startMark}, endMark: ${endMark}`);\n                        }\n                        const start = marks.find(mark => mark.name === startMark);\n                        const end = marks.find(mark => mark.name === endMark);\n                        if (start && end) {\n                            measures.push({\n                                name: measureName,\n                                entryType: \"measure\",\n                                startTime: start.startTime,\n                                duration: end.startTime - start.startTime,\n                            });\n                        }\n                        else {\n                            if (__DEBUG__) {\n                                console.warn(\"Invalid marks for performance.measure\");\n                            }\n                        }\n                    },\n                    getEntriesByType: function (type) {\n                        if (__DEBUG__) {\n                            console.log(`performance.getEntriesByType called with type: ${type}`);\n                        }\n                        if (type === \"mark\") {\n                            return [...marks];\n                        }\n                        else if (type === \"measure\") {\n                            return [...measures];\n                        }\n                        return [];\n                    },\n                    clearMarks: function (markName) {\n                        if (__DEBUG__) {\n                            console.log(`performance.clearMarks called with markName: ${markName}`);\n                        }\n                        if (markName) {\n                            for (let i = marks.length - 1; i >= 0; i--) {\n                                if (marks[i].name === markName) {\n                                    marks.splice(i, 1);\n                                }\n                            }\n                        }\n                        else {\n                            marks.length = 0; // Clear all marks\n                        }\n                    },\n                    clearMeasures: function (measureName) {\n                        if (__DEBUG__) {\n                            console.log(`performance.clearMeasures called with measureName: ${measureName}`);\n                        }\n                        if (measureName) {\n                            for (let i = measures.length - 1; i >= 0; i--) {\n                                if (measures[i].name === measureName) {\n                                    measures.splice(i, 1);\n                                }\n                            }\n                        }\n                        else {\n                            measures.length = 0; // Clear all measures\n                        }\n                    },\n                };\n            }\n            // Shims for:\n            // const treeParent = ...\n            if (typeof preactDevtoolsCtx.Node === \"undefined\" ||\n                preactDevtoolsCtx.Node === null) {\n                // @ts-ignore\n                preactDevtoolsCtx.Node = __root.__proto__.constructor;\n            }\n            // }\n            // Shims for:\n            // const sorted = sortRoots(document.body, roots);\n            if (typeof preactDevtoolsCtx.document === \"undefined\" ||\n                preactDevtoolsCtx.document === null) {\n                preactDevtoolsCtx.document = {\n                    // @ts-ignore\n                    body: __root,\n                };\n            }\n            // Shims for:\n            // else if (data instanceof window.Blob) {\n            if (typeof preactDevtoolsCtx.Blob === \"undefined\" ||\n                preactDevtoolsCtx.Blob === null) {\n                // @ts-ignore\n                preactDevtoolsCtx.Blob = class Blob {\n                    constructor(parts, options) {\n                        if (__DEBUG__)\n                            console.log(\"Blob constructor\", parts, options);\n                    }\n                };\n            }\n            require(\"../shells/shared/installHook\");\n            require(\"preact/devtools\");\n            console.log(\"[PREACT DEVTOOLS] Devtools initialized successfully\");\n        }\n        catch (e) {\n            console.warn(\"[PREACT DEVTOOLS] Devtools failed to initialize:\");\n            console.warn(e);\n        }\n    }\n}\n","// Copyright 2025 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\n\nif (process.env.NODE_ENV === 'development') {\n  // eslint-disable-next-line n/no-extraneous-require\n  require('preact/debug');\n}\n","// Copyright 2025 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\n\nimport './index.cjs';\n","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { jsx as createVNode } from './jsx-runtime/index.js';\n\nconst slice = /* @__PURE__ */ [].slice;\n\n/**\n * Create an virtual node (used for JSX)\n * @param {VNode[\"type\"]} type The node name or Component constructor for this\n * virtual node\n * @param {object | null | undefined} [props] The properties of the virtual node\n * @param {Array<import('.').ComponentChildren>} [children] The children of the\n * virtual node\n * @returns {VNode}\n */\nexport function createElement(type, props, children) {\n  let normalizedProps = {},\n    key,\n    ref,\n    i;\n  for (i in props) {\n    if (i == 'key') key = props[i];\n    else if (i == 'ref') ref = props[i];\n    else normalizedProps[i] = props[i];\n  }\n\n  if (arguments.length > 2) {\n    normalizedProps.children = arguments.length > 3 ? slice.call(arguments, 2) : children;\n  }\n\n  // If a Component VNode, check for and apply defaultProps\n  // Note: type may be undefined in development, must never error here.\n  if (typeof type == 'function' && type.defaultProps != null) {\n    for (i in type.defaultProps) {\n      if (normalizedProps[i] === undefined) {\n        normalizedProps[i] = type.defaultProps[i];\n      }\n    }\n  }\n\n  return createVNode(type, normalizedProps, key, ref, null);\n}\n\n/**\n * Clones the given VNode, optionally adding attributes/props and replacing its\n * children.\n * @param {VNode} vnode The virtual DOM element to clone\n * @param {object} props Attributes/props to add when cloning\n * @param {Array<ComponentChildren>} rest Any additional arguments will be used\n * as replacement children.\n * @returns {VNode}\n */\nexport function cloneElement(vnode, props, children) {\n  let normalizedProps = Object.assign({}, vnode.props),\n    key,\n    ref,\n    i;\n\n  let defaultProps;\n\n  if (vnode.type && vnode.type.defaultProps) {\n    defaultProps = vnode.type.defaultProps;\n  }\n\n  for (i in props) {\n    if (i == 'key') key = props[i];\n    else if (i == 'ref') ref = props[i];\n    else if (props[i] === undefined && defaultProps !== undefined) {\n      normalizedProps[i] = defaultProps[i];\n    } else {\n      normalizedProps[i] = props[i];\n    }\n  }\n\n  if (arguments.length > 2) {\n    normalizedProps.children = arguments.length > 3 ? slice.call(arguments, 2) : children;\n  }\n\n  return createVNode(\n    vnode.type,\n    normalizedProps,\n    key || vnode.key,\n    ref || vnode.ref,\n    null,\n  );\n}\n","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { SnapshotInstance } from '@lynx-js/react/internal';\n\nfunction createVNode(type, props, _key) {\n  if (typeof type === 'string') {\n    const r = new SnapshotInstance(type);\n\n    r.props = props;\n\n    r.__k = null;\n    r.__ = null;\n    r.__b = 0;\n    r.__e = null;\n    r.__d = undefined;\n    r.__c = null;\n    // r.__v = --vnodeId;\n    r.__i = -1;\n    r.__u = 0;\n\n    return r;\n  } else if (typeof type === 'function') {\n    let normalizedProps = props;\n\n    // let ref;\n    if ('ref' in normalizedProps) {\n      normalizedProps = {};\n      for (let i in props) {\n        if (i == 'ref') {\n          // ref = props[i];\n        } else {\n          normalizedProps[i] = props[i];\n        }\n      }\n    }\n\n    let defaultProps;\n    if ((defaultProps = type.defaultProps)) {\n      for (let i in defaultProps) {\n        if (typeof normalizedProps[i] === 'undefined') {\n          normalizedProps[i] = defaultProps[i];\n        }\n      }\n    }\n\n    return {\n      type,\n      props: normalizedProps,\n\n      __k: null,\n      __: null,\n      __b: 0,\n      __e: null,\n      __d: void 0,\n      __c: null,\n      constructor: void 0,\n      // __v: --vnodeId,\n      __i: -1,\n      __u: 0,\n    };\n  }\n}\n\nexport { createVNode as jsx, createVNode as jsxs, createVNode as jsxDEV };\nexport { Fragment } from 'preact';\n","// Copyright 2025 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { initRenderAlog } from './render.js';\nexport function initAlog() {\n    initRenderAlog();\n}\n//# sourceMappingURL=index.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { options } from 'preact';\nimport { DIFFED, DOM } from '../renderToOpcodes/constants.js';\nimport { getDisplayName } from '../utils.js';\nexport function initRenderAlog() {\n    const oldAfterDiff = options[DIFFED];\n    options[DIFFED] = function (vnode) {\n        // Only log on component vnode\n        if (typeof vnode.type === 'function') {\n            const threadName = __MAIN_THREAD__ ? 'MainThread' : 'BackgroundThread';\n            const displayName = getDisplayName(vnode.type);\n            // log the component render into Alog\n            if (__MAIN_THREAD__) {\n                console.alog?.(`[${threadName} Component Render] name: ${displayName}`);\n            }\n            else if (__BACKGROUND__) {\n                const dom = vnode[DOM];\n                console.alog?.(`[${threadName} Component Render] name: ${displayName}, uniqID: ${dom?.type}, __id: ${dom?.__id}`);\n            }\n        }\n        oldAfterDiff?.(vnode);\n    };\n}\n//# sourceMappingURL=render.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\n// for better reuse if runtime is changed\nexport function factory({ createElement, useMemo, Suspense, lazy }, loadLazyBundle) {\n    /**\n     * @internal a polyfill for <component is=? />\n     */\n    const __ComponentIsPolyfill = ({ is, ...props }) => {\n        if (typeof is !== 'string') {\n            lynx.reportError(new Error('You must provide a string to props `is` when using syntax `<component is=? />`.'));\n            return null;\n        }\n        // @ts-ignore\n        const D = useMemo(() => lazy(() => loadLazyBundle(is)), [is]);\n        return createElement(Suspense, { key: is }, createElement(D, props));\n    };\n    return __ComponentIsPolyfill;\n}\n//# sourceMappingURL=componentIs.js.map","import { useLynxGlobalEventListener } from '../hooks/useLynxGlobalEventListener.js';\nimport { globalFlushOptions } from '../lifecycle/patch/commit.js';\n// for better reuse if runtime is changed\nexport function factory({ createContext, useState, createElement, useLynxGlobalEventListener: useListener }, prop, eventName) {\n    const Context = createContext({});\n    const Provider = ({ children }) => {\n        const [__, set] = useState(lynx[prop]);\n        const handleChange = () => {\n            if (prop === '__initData') {\n                globalFlushOptions.triggerDataUpdated = true;\n            }\n            set(lynx[prop]);\n        };\n        useChanged(handleChange);\n        return createElement(Context.Provider, {\n            value: __,\n        }, children);\n    };\n    const Consumer = Context.Consumer;\n    const use = () => {\n        const [__, set] = useState(lynx[prop]);\n        useChanged(() => {\n            if (prop === '__initData') {\n                globalFlushOptions.triggerDataUpdated = true;\n            }\n            set(lynx[prop]);\n        });\n        return __;\n    };\n    const useChanged = (callback) => {\n        if (!__LEPUS__) {\n            useListener(eventName, callback);\n        }\n    };\n    return {\n        /* v8 ignore next */\n        Context: () => Context,\n        Provider: () => Provider,\n        Consumer: () => Consumer,\n        use: () => use,\n        useChanged: () => useChanged,\n    };\n}\n/**\n * Higher-Order Component (HOC) that injects `initData` into the state of the given class component.\n *\n * This HOC checks if the provided component is a class component. If it is, it wraps the component\n * and injects the `initData` into its state. It also adds a listener\n * to update the state when data changes, and removes the listener when the component unmounts.\n *\n * @typeParam P - The type of the props of the wrapped component.\n * @typeParam S - The type of the state of the wrapped component.\n *\n * @param App - The class component to be wrapped by the HOC.\n *\n * @returns The original component if it is not a class component, otherwise a new class component\n *          with `initData` injection and state update functionality.\n *\n * @example\n * ```typescript\n * class App extends React.Component<MyProps, MyState> {\n *   // component implementation\n * }\n *\n * export default withInitDataInState(App);\n * ```\n * @public\n */\nexport function withInitDataInState(App) {\n    const isClassComponent = 'prototype' in App && 'render' in App.prototype;\n    /* v8 ignore next 4 */\n    if (!isClassComponent) {\n        // return as-is when not class component\n        return App;\n    }\n    class C extends App {\n        h;\n        constructor(props) {\n            super(props);\n            this.state = {\n                ...this.state,\n                ...lynx.__initData,\n            };\n            if (!__LEPUS__) {\n                lynx.getJSModule('GlobalEventEmitter').addListener('onDataChanged', this.h = (...args) => {\n                    const [newData] = args;\n                    globalFlushOptions.triggerDataUpdated = true;\n                    this.setState(newData);\n                });\n            }\n        }\n        componentWillUnmount() {\n            super.componentWillUnmount?.();\n            if (!__LEPUS__) {\n                lynx.getJSModule('GlobalEventEmitter').removeListener('onDataChanged', this.h);\n            }\n        }\n    }\n    return C;\n}\n//# sourceMappingURL=initData.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { Component } from 'preact';\nexport function wrapWithLynxComponent(jsxSnapshot, jsxComponent) {\n    const C = jsxComponent.type;\n    if (typeof C === 'function' && (C === ComponentFromReactRuntime || C.prototype instanceof ComponentFromReactRuntime)) {\n        if (jsxSnapshot.length === 1) {\n            return jsxSnapshot(jsxComponent);\n        }\n        else {\n            // spread\n            if (!jsxComponent.props.removeComponentElement) {\n                return jsxSnapshot(jsxComponent, takeComponentAttributes(jsxComponent));\n            }\n        }\n    }\n    return jsxComponent;\n}\n// @ts-expect-error\nexport class ComponentFromReactRuntime extends Component {\n}\nconst __COMPONENT_ATTRIBUTES__ = /* @__PURE__ */ new Set([\n    'name',\n    'style',\n    'class',\n    'flatten',\n    'clip-radius',\n    'overlap',\n    'user-interaction-enabled',\n    'native-interaction-enabled',\n    'block-native-event',\n    'enableLayoutOnly',\n    'cssAlignWithLegacyW3C',\n    'intersection-observers',\n    'trigger-global-event',\n    'exposure-scene',\n    'exposure-id',\n    'exposure-screen-margin-top',\n    'exposure-screen-margin-bottom',\n    'exposure-screen-margin-left',\n    'exposure-screen-margin-right',\n    'focusable',\n    'focus-index',\n    'accessibility-label',\n    'accessibility-element',\n    'accessibility-traits',\n    'enable-new-animator',\n]);\nfunction takeComponentAttributes(jsxComponent) {\n    const attributes = {};\n    Object.keys(jsxComponent.props).forEach((k) => {\n        // let re1 = Regex::new(r\"^(global-bind|bind|catch|capture-bind|capture-catch)([A-Za-z]+)$\").unwrap();\n        // let re2 = Regex::new(r\"^data-([A-Za-z]+)$\").unwrap();\n        if (__COMPONENT_ATTRIBUTES__.has(k)\n            || k === 'id'\n            || k === 'className'\n            || k === 'dataSet'\n            || k === 'data-set'\n            || k === 'removeComponentElement'\n            || (/^(global-bind|bind|catch|capture-bind|capture-catch)([A-Za-z]+)$/.exec(k))\n            || (/^data-([A-Za-z]+)$/.exec(k))) {\n            attributes[k] = jsxComponent.props[k];\n            delete jsxComponent.props[k];\n        }\n    });\n    return attributes;\n}\n//# sourceMappingURL=lynxComponent.js.map","// Copyright 2025 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\n/**\n * @license\nThe MIT License (MIT)\n\nCopyright (c) 2015-present Jason Miller\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n */\nimport { Fragment, options } from 'preact';\nimport { DIFF, DIFFED, RENDER, ROOT } from '../renderToOpcodes/constants.js';\n/**\n * Get human readable name of the component/dom node\n */\nexport function getDisplayName(vnode) {\n    if (vnode.type === Fragment) {\n        return 'Fragment';\n    }\n    else if (typeof vnode.type == 'function') {\n        return vnode.type.displayName ?? vnode.type.name;\n    }\n    else if (typeof vnode.type == 'string') {\n        return vnode.type;\n    }\n    return '#text';\n}\n/**\n * Used to keep track of the currently rendered `vnode` and print it\n * in debug messages.\n */\nconst renderStack = [];\n/**\n * Keep track of the current owners. An owner describes a component\n * which was responsible to render a specific `vnode`. This exclude\n * children that are passed via `props.children`, because they belong\n * to the parent owner.\n *\n * ```jsx\n * const Foo = props => <div>{props.children}</div> // div's owner is Foo\n * const Bar = props => {\n *   return (\n *     <Foo><span /></Foo> // Foo's owner is Bar, span's owner is Bar\n *   )\n * }\n * ```\n *\n * Note: A `vnode` may be hoisted to the root scope due to compiler\n * optimization. In these cases the `_owner` will be different.\n */\nlet ownerStack = [];\n/**\n * Get the currently rendered `vnode`\n */\nexport function getCurrentVNode() {\n    return renderStack.length > 0 ? renderStack[renderStack.length - 1] : null;\n}\n/**\n * Check if a `vnode` is a possible owner.\n */\nfunction isPossibleOwner(vnode) {\n    return typeof vnode.type == 'function' && vnode.type != Fragment;\n}\n/**\n * Return the component stack that was captured up to this point.\n */\nexport function getOwnerStack(vnode) {\n    const stack = [vnode];\n    let next = vnode;\n    while (next._owner != null) {\n        stack.push(next._owner);\n        next = next._owner;\n    }\n    return stack.reduce((acc, owner) => {\n        acc += `  in ${getDisplayName(owner)}`;\n        const source = owner.__source;\n        if (source) {\n            acc += ` (at ${source.fileName}:${source.lineNumber})`;\n        }\n        return (acc += '\\n');\n    }, '');\n}\n/**\n * Setup code to capture the component trace while rendering. Note that\n * we cannot simply traverse `vnode._parent` upwards, because we have some\n * debug messages for `this.setState` where the `vnode` is `undefined`.\n */\nexport function setupComponentStack() {\n    const oldDiff = options[DIFF];\n    const oldDiffed = options[DIFFED];\n    const oldRoot = options[ROOT];\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const oldVNode = options.vnode;\n    const oldRender = options[RENDER];\n    options[DIFFED] = vnode => {\n        if (isPossibleOwner(vnode)) {\n            ownerStack.pop();\n        }\n        renderStack.pop();\n        if (oldDiffed)\n            oldDiffed(vnode);\n    };\n    options[DIFF] = vnode => {\n        if (isPossibleOwner(vnode)) {\n            renderStack.push(vnode);\n        }\n        if (oldDiff)\n            oldDiff(vnode);\n    };\n    options[ROOT] = (vnode, parent) => {\n        ownerStack = [];\n        if (oldRoot)\n            oldRoot(vnode, parent);\n    };\n    options.vnode = (vnode) => {\n        vnode._owner = ownerStack.length > 0 ? ownerStack[ownerStack.length - 1] : null;\n        if (oldVNode)\n            oldVNode(vnode);\n    };\n    options[RENDER] = vnode => {\n        if (isPossibleOwner(vnode)) {\n            ownerStack.push(vnode);\n        }\n        if (oldRender)\n            oldRender(vnode);\n    };\n}\n//# sourceMappingURL=component-stack.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { Component, options } from 'preact';\nimport { globalPatchOptions } from '../lifecycle/patch/commit.js';\nimport { __globalSnapshotPatch } from '../lifecycle/patch/snapshotPatch.js';\nimport { COMMIT, COMPONENT, DIFF, DIFF2, DIFFED, DIRTY, NEXT_STATE, RENDER } from '../renderToOpcodes/constants.js';\nimport { getDisplayName, hook } from '../utils.js';\nexport function initProfileHook() {\n    // early-exit if required profiling APIs are unavailable\n    let p;\n    /* v8 ignore start */\n    if (!(p = lynx.performance)\n        || typeof p.profileStart !== 'function'\n        || typeof p.profileEnd !== 'function'\n        || typeof p.profileMark !== 'function'\n        || typeof p.profileFlowId !== 'function') {\n        return;\n    }\n    /* v8 ignore stop */\n    const profileStart = p.profileStart.bind(p);\n    const profileEnd = p.profileEnd.bind(p);\n    const profileMark = p.profileMark.bind(p);\n    const profileFlowId = p.profileFlowId.bind(p);\n    // for each setState call, we will add a profiling trace and\n    // attach a flowId to the component instance.\n    // This allows us to trace the flow of its diffing, committing and patching.\n    {\n        const sFlowID = Symbol('FLOW_ID');\n        if (__BACKGROUND__) {\n            function buildSetStateProfileMarkArgs(currentState, nextState) {\n                const EMPTY_OBJ = {};\n                currentState ??= EMPTY_OBJ;\n                nextState ??= EMPTY_OBJ;\n                return {\n                    'current state keys': JSON.stringify(Object.keys(currentState)),\n                    'next state keys': JSON.stringify(Object.keys(nextState)),\n                    'changed (shallow diff) state keys': JSON.stringify(\n                    // the setState is in assign manner, we assume nextState is a superset of currentState\n                    Object.keys(nextState).filter(key => currentState[key] !== nextState[key])),\n                };\n            }\n            hook(Component.prototype, 'setState', function (old, state, callback) {\n                old?.call(this, state, callback);\n                if (this[DIRTY]) {\n                    profileMark('ReactLynx::setState', {\n                        flowId: this[sFlowID] ??= profileFlowId(),\n                        args: buildSetStateProfileMarkArgs(this.state, this[NEXT_STATE]),\n                    });\n                }\n            });\n        }\n        hook(options, DIFF2, (old, vnode, oldVNode) => {\n            // We only add profiling trace for Component\n            if (typeof vnode.type === 'function') {\n                const profileOptions = {};\n                if (__BACKGROUND__) {\n                    const c = oldVNode[COMPONENT];\n                    if (c) {\n                        const flowId = c[sFlowID];\n                        delete c[sFlowID];\n                        if (flowId) {\n                            globalPatchOptions.flowIds ??= [];\n                            globalPatchOptions.flowIds.push(flowId);\n                            profileOptions.flowId = flowId;\n                        }\n                    }\n                }\n                profileStart(`ReactLynx::diff::${ /* #__INLINE__ */getDisplayName(vnode.type)}`, profileOptions);\n            }\n            old?.(vnode, oldVNode);\n        });\n        hook(options, DIFFED, (old, vnode) => {\n            if (typeof vnode.type === 'function') {\n                profileEnd(); // for options[DIFF]\n            }\n            old?.(vnode);\n        });\n        if (__BACKGROUND__) {\n            hook(options, COMMIT, (old, vnode, commitQueue) => {\n                profileStart('ReactLynx::commit', {\n                    ...globalPatchOptions.flowIds\n                        ? {\n                            flowId: globalPatchOptions.flowIds[0],\n                            flowIds: globalPatchOptions.flowIds,\n                        }\n                        : {},\n                });\n                old?.(vnode, commitQueue);\n                profileEnd();\n            });\n        }\n    }\n    // Profile the user-provided `render`.\n    hook(options, RENDER, (old, vnode) => {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        const originalRender = vnode[COMPONENT].render;\n        vnode[COMPONENT].render = function render(props, state, context) {\n            profileStart(`ReactLynx::render::${ /* #__INLINE__ */getDisplayName(vnode.type)}`);\n            try {\n                return originalRender.call(this, props, state, context);\n            }\n            finally {\n                profileEnd();\n                vnode[COMPONENT].render = originalRender;\n            }\n        };\n        old?.(vnode);\n    });\n    if (__BACKGROUND__) {\n        const sPatchLength = Symbol('PATCH_LENGTH');\n        hook(options, DIFF, (old, vnode) => {\n            if (typeof vnode.type === 'function' && __globalSnapshotPatch) {\n                vnode[sPatchLength] = __globalSnapshotPatch.length;\n            }\n            old?.(vnode);\n        });\n        hook(options, DIFFED, (old, vnode) => {\n            if (typeof vnode.type === 'function' && __globalSnapshotPatch) {\n                if (vnode[sPatchLength] === __globalSnapshotPatch.length) {\n                    // \"NoPatch\" is a conventional name in Lynx\n                    profileMark('ReactLynx::diffFinishNoPatch', {\n                        args: {\n                            componentName: /* #__INLINE__ */ getDisplayName(vnode.type),\n                        },\n                    });\n                }\n                delete vnode[sPatchLength];\n            }\n            old?.(vnode);\n        });\n    }\n}\n//# sourceMappingURL=profile.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { onWorkletCtxUpdate } from '@lynx-js/react/worklet-runtime/bindings';\nimport { GestureTypeInner } from './types.js';\nfunction isSerializedGesture(gesture) {\n    return gesture.__isSerialized ?? false;\n}\nfunction getGestureInfo(gesture, oldGesture, isFirstScreen, dom) {\n    const config = {\n        callbacks: [],\n    };\n    const baseGesture = gesture;\n    if (baseGesture.config) {\n        config.config = baseGesture.config;\n    }\n    for (const key of Object.keys(baseGesture.callbacks)) {\n        const callback = baseGesture.callbacks[key];\n        const oldCallback = oldGesture?.callbacks[key];\n        onWorkletCtxUpdate(callback, oldCallback, isFirstScreen, dom);\n        config.callbacks.push({\n            name: key,\n            callback: callback,\n        });\n    }\n    const relationMap = {\n        waitFor: baseGesture?.waitFor?.map(subGesture => subGesture.id) ?? [],\n        simultaneous: baseGesture?.simultaneousWith?.map(subGesture => subGesture.id) ?? [],\n        continueWith: baseGesture?.continueWith?.map(subGesture => subGesture.id) ?? [],\n    };\n    return {\n        config,\n        relationMap,\n    };\n}\nexport function processGesture(dom, gesture, oldGesture, isFirstScreen, gestureOptions) {\n    if (!gesture || !isSerializedGesture(gesture)) {\n        return;\n    }\n    if (!(gestureOptions && gestureOptions.domSet)) {\n        __SetAttribute(dom, 'has-react-gesture', true);\n        __SetAttribute(dom, 'flatten', false);\n    }\n    if (gesture.type === GestureTypeInner.COMPOSED) {\n        for (const [index, subGesture] of gesture.gestures.entries()) {\n            processGesture(dom, subGesture, oldGesture?.gestures[index], isFirstScreen, {\n                domSet: true,\n            });\n        }\n    }\n    else {\n        const baseGesture = gesture;\n        const oldBaseGesture = oldGesture;\n        const { config, relationMap } = getGestureInfo(baseGesture, oldBaseGesture, isFirstScreen, dom);\n        __SetGestureDetector(dom, baseGesture.id, baseGesture.type, config, relationMap);\n    }\n}\n//# sourceMappingURL=processGesture.js.map","export var GestureTypeInner;\n(function (GestureTypeInner) {\n    GestureTypeInner[GestureTypeInner[\"COMPOSED\"] = -1] = \"COMPOSED\";\n    GestureTypeInner[GestureTypeInner[\"PAN\"] = 0] = \"PAN\";\n    GestureTypeInner[GestureTypeInner[\"FLING\"] = 1] = \"FLING\";\n    GestureTypeInner[GestureTypeInner[\"DEFAULT\"] = 2] = \"DEFAULT\";\n    GestureTypeInner[GestureTypeInner[\"TAP\"] = 3] = \"TAP\";\n    GestureTypeInner[GestureTypeInner[\"LONGPRESS\"] = 4] = \"LONGPRESS\";\n    GestureTypeInner[GestureTypeInner[\"ROTATION\"] = 5] = \"ROTATION\";\n    GestureTypeInner[GestureTypeInner[\"PINCH\"] = 6] = \"PINCH\";\n    GestureTypeInner[GestureTypeInner[\"NATIVE\"] = 7] = \"NATIVE\";\n})(GestureTypeInner || (GestureTypeInner = {}));\n//# sourceMappingURL=types.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { useCallback, useContext, useDebugValue, useErrorBoundary, useId, useImperativeHandle, useMemo, useEffect as usePreactEffect, useReducer, useRef, useState, } from 'preact/hooks';\n/**\n * `useLayoutEffect` is now an alias of `useEffect`. Use `useEffect` instead.\n *\n * Accepts a function that contains imperative, possibly effectful code. The effects run after main thread dom update without blocking it.\n *\n * @param effect - Imperative function that can return a cleanup function\n * @param deps - If present, effect will only activate if the values in the list change (using ===).\n *\n * @public\n *\n * @deprecated `useLayoutEffect` in the background thread cannot offer the precise timing for reading layout information and synchronously re-render, which is different from React.\n */\nfunction useLayoutEffect(effect, deps) {\n    return usePreactEffect(effect, deps);\n}\n/**\n * Accepts a function that contains imperative, possibly effectful code.\n * The effects run after main thread dom update without blocking it.\n *\n * @param effect - Imperative function that can return a cleanup function\n * @param deps - If present, effect will only activate if the values in the list change (using ===).\n *\n * @public\n */\nfunction useEffect(effect, deps) {\n    return usePreactEffect(effect, deps);\n}\nexport { \n// preact\nuseState, useReducer, useRef, useImperativeHandle, useLayoutEffect, useEffect, useCallback, useMemo, useContext, useDebugValue, useErrorBoundary, useId, };\n//# sourceMappingURL=react.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { useEffect, useMemo, useRef } from 'preact/hooks';\n/**\n * `useLynxGlobalEventListener` help you `addListener` as early as possible.\n *\n * @example\n *\n * Use this hooks to listen to event 'exposure' and event 'disexposure'\n *\n * ```jsx\n * function App() {\n *   useLynxGlobalEventListener('exposure', (e) => {\n *     console.log(\"exposure\", e)\n *   })\n *   useLynxGlobalEventListener('disexposure', (e) => {\n *     console.log(\"disexposure\", e)\n *   })\n *   return (\n *     <view\n *       style='width: 100px; height: 100px; background-color: red;'\n *       exposure-id='a'\n *     />\n *   )\n * }\n * ```\n *\n * @param eventName - Event name to listen\n * @param listener - Event handler\n * @public\n */\nexport function useLynxGlobalEventListener(eventName, listener) {\n    'background only';\n    const previousArgsRef = useRef();\n    useMemo(() => {\n        if (previousArgsRef.current) {\n            const [eventName, listener] = previousArgsRef.current;\n            lynx.getJSModule('GlobalEventEmitter').removeListener(eventName, listener);\n        }\n        lynx.getJSModule('GlobalEventEmitter').addListener(eventName, listener);\n        previousArgsRef.current = [eventName, listener];\n    }, [eventName, listener]);\n    useEffect(() => {\n        return () => {\n            if (previousArgsRef.current) {\n                const [eventName, listener] = previousArgsRef.current;\n                lynx.getJSModule('GlobalEventEmitter').removeListener(eventName, listener);\n            }\n        };\n    }, []);\n}\n//# sourceMappingURL=useLynxGlobalEventListener.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { componentAtIndexFactory, enqueueComponentFactory, gRecycleMap, gSignMap } from './list.js';\nimport { __pendingListUpdates } from './pendingListUpdates.js';\nimport { DynamicPartType } from './snapshot/dynamicPartType.js';\nimport { unref } from './snapshot/ref.js';\nimport { isEmptyObject } from './utils.js';\nexport function isEmptyDiffResult(diffResult) {\n    const hasChanged = !isEmptyObject(diffResult.i)\n        || !isEmptyObject(diffResult.m) || diffResult.r.length > 0;\n    return !hasChanged;\n}\nexport function diffArrayLepus(before, after, isSameType, onDiffChildren) {\n    let lastPlacedIndex = 0;\n    const result = {\n        $$diff: true,\n        i: {},\n        r: [],\n        m: {},\n    };\n    const beforeMap = {};\n    for (let i = 0; i < before.length; i++) {\n        const node = before[i];\n        (beforeMap[node.type] ??= new Set()).add([node, i]);\n    }\n    for (let i = 0; i < after.length; i++) {\n        const afterNode = after[i];\n        const beforeNodes = beforeMap[afterNode.type];\n        let beforeNode;\n        if (beforeNodes\n            && beforeNodes.size > 0\n            // @ts-expect-error TS does not know about iterator :)\n            && (([beforeNode] = beforeNodes), beforeNode)\n            && isSameType(beforeNode[0], afterNode)) {\n            // Reuse old node\n            beforeNodes.delete(beforeNode);\n            const oldIndex = beforeNode[1];\n            onDiffChildren(beforeNode[0], afterNode, oldIndex, i);\n            if (oldIndex < lastPlacedIndex) {\n                result.m[oldIndex] = i;\n                continue;\n            }\n            else {\n                lastPlacedIndex = oldIndex;\n            }\n        }\n        else {\n            // Create new node\n            result.i[i] = afterNode;\n        }\n    }\n    // Delete\n    for (const k in beforeMap) {\n        for (const [, i] of beforeMap[k]) {\n            result.r.push(i);\n        }\n    }\n    return result;\n}\n// export function diffIterableLepus<A extends Typed, B extends Typed>(\n//   before: A[],\n//   after: Iterable<B>,\n//   isSameType: (a: A, b: B) => boolean,\n//   onDiffChildren: (a: A, b: B) => void\n// ): DiffResult<B> {\n//   let returnResult = EMPTY_DIFF_RESULT as DiffResult<B>;\n//   let lastPlacedIndex = 0;\n//   const result: DiffResult<B> = {\n//     $$diff: true,\n//     i: {},\n//     r: [],\n//     m: {},\n//   };\n//   const beforeMap: Record<string, Set<[A, number]>> = {};\n//   for (let i = 0; i < before.length; i++) {\n//     let node = before[i];\n//     (beforeMap[node.type] ??= new Set()).add([node, i]);\n//   }\n//   let i = 0;\n//   for (const afterNode of after) {\n//     const beforeNodes = beforeMap[afterNode.type];\n//     let beforeNode: [A, number];\n//     if (beforeNodes && (([beforeNode] = beforeNodes), beforeNode) && isSameType(beforeNode[0], afterNode)) {\n//       // Reuse old node\n//       beforeNodes.delete(beforeNode);\n//       const oldIndex = beforeNode[1];\n//       onDiffChildren(beforeNode[0], afterNode);\n//       if (oldIndex < lastPlacedIndex) {\n//         result.m[oldIndex] = i;\n//         returnResult = result;\n//         i++;\n//         continue;\n//       } else {\n//         lastPlacedIndex = oldIndex;\n//       }\n//     } else {\n//       // Create new node\n//       result.i[i] = afterNode;\n//       returnResult = result;\n//     }\n//     i++;\n//   }\n//   // delete\n//   for (const k in beforeMap) {\n//     for (const [, i] of beforeMap[k]) {\n//       result.r.push(i);\n//       returnResult = result;\n//     }\n//   }\n//   return result;\n// }\nexport function diffArrayAction(before, diffResult, onInsert, onRemove, onMove) {\n    if (isEmptyDiffResult(diffResult)) {\n        return before;\n    }\n    const deleteSet = new Set(diffResult.r);\n    const { i: insertMap, m: placementMap } = diffResult;\n    const moveTempMap = new Map();\n    let old;\n    let k = 0;\n    old = before[k];\n    // let current: T | null | undefined = null;\n    const result = [];\n    let i = 0; // index of the old list\n    let j = 0; // index of the new list\n    let remain = Object.keys(insertMap).length;\n    while (old || remain > 0) {\n        let keep = false;\n        if (old && deleteSet.has(j)) {\n            // delete\n            onRemove(old);\n        }\n        else if (old && placementMap[j] !== undefined) {\n            // save node to re-use\n            moveTempMap.set(placementMap[j], old);\n            remain++;\n        }\n        else {\n            // insert node\n            let newNode = old;\n            if (moveTempMap.has(i)) {\n                // insert re-used node\n                newNode = moveTempMap.get(i);\n                keep = true;\n                onMove(newNode, old);\n                remain--;\n            }\n            else if (insertMap[i] !== undefined) {\n                // insert new node\n                newNode = onInsert(insertMap[i], old);\n                keep = true;\n                remain--;\n            }\n            result.push(newNode);\n            i++;\n        }\n        if (old && !keep) {\n            old = before[++k];\n            j++;\n        }\n    }\n    return result;\n}\nexport function hydrate(before, after, options) {\n    after.__elements = before.__elements;\n    after.__element_root = before.__element_root;\n    if (!(options?.skipUnRef)) {\n        unref(before, false);\n    }\n    let swap;\n    if ((swap = options?.swap)) {\n        swap[before.__id] = after.__id;\n    }\n    __pendingListUpdates.runWithoutUpdates(() => {\n        after.__values?.forEach((value, index) => {\n            const old = before.__values[index];\n            if (value !== old) {\n                after.__values[index] = old;\n                after.setAttribute(index, value);\n            }\n        });\n    });\n    const { slot } = after.__snapshot_def;\n    if (!slot) {\n        return;\n    }\n    const beforeChildNodes = before.childNodes;\n    const afterChildNodes = after.childNodes;\n    slot.forEach(([type, elementIndex], index) => {\n        switch (type) {\n            case DynamicPartType.Slot:\n            case DynamicPartType.MultiChildren: {\n                // TODO: the following null assertions are not 100% safe\n                const v1 = beforeChildNodes[index];\n                const v2 = afterChildNodes[index];\n                hydrate(v1, v2, options);\n                break;\n            }\n            case DynamicPartType.Children: {\n                const diffResult = diffArrayLepus(beforeChildNodes, afterChildNodes, (a, b) => a.type === b.type, (a, b) => {\n                    hydrate(a, b, options);\n                });\n                diffArrayAction(beforeChildNodes, diffResult, (node, target) => {\n                    node.ensureElements();\n                    __InsertElementBefore(before.__elements[elementIndex], node.__element_root, target?.__element_root);\n                    return node;\n                }, node => {\n                    __RemoveElement(before.__elements[elementIndex], node.__element_root);\n                }, (node, target) => {\n                    __RemoveElement(before.__elements[elementIndex], node.__element_root);\n                    __InsertElementBefore(before.__elements[elementIndex], node.__element_root, target?.__element_root);\n                });\n                break;\n            }\n            case DynamicPartType.ListChildren: {\n                const removals = [];\n                const insertions = [];\n                const updateAction = [];\n                const listID = __GetElementUniqueID(before.__elements[elementIndex]);\n                const signMap = gSignMap[listID];\n                const recycleMap = gRecycleMap[listID];\n                const diffResult = diffArrayLepus(beforeChildNodes, afterChildNodes, (a, b) => a.type === b.type, (a, b, _oldIndex, newIndex) => {\n                    if (JSON.stringify(a.__listItemPlatformInfo)\n                        !== JSON.stringify(b.__listItemPlatformInfo)) {\n                        updateAction.push({\n                            ...b.__listItemPlatformInfo,\n                            from: newIndex,\n                            to: newIndex,\n                            // no flush\n                            flush: false,\n                            type: b.type,\n                        });\n                    }\n                    if (a.__elements) {\n                        // transfer a's elements to b\n                        hydrate(a, b, options);\n                        // if a list-item has `elements`, it may be:\n                        //   - `enqueueComponent` already called on it: so we need to update the `signMap` and the `recycleMap`\n                        //   - `enqueueComponent` not called on it: update the `signMap`\n                        const listItemID = __GetElementUniqueID(a.__element_root);\n                        if (signMap.has(listItemID)) {\n                            signMap.set(listItemID, b);\n                        }\n                        if (recycleMap.has(a.type)) {\n                            const recycleSignMap = recycleMap.get(a.type);\n                            recycleSignMap.set(listItemID, b);\n                        }\n                    }\n                });\n                for (const i of diffResult.r) {\n                    removals.push(i);\n                }\n                for (const i in diffResult.i) {\n                    insertions.push(Number(i));\n                }\n                for (const i in diffResult.m) {\n                    removals.push(Number(i));\n                    insertions.push(diffResult.m[i]);\n                }\n                insertions.sort((a, b) => a - b);\n                removals.sort((a, b) => a - b);\n                const info = {\n                    insertAction: insertions.map((it) => ({\n                        position: it,\n                        type: afterChildNodes[it].type,\n                        ...afterChildNodes[it].__listItemPlatformInfo,\n                    })),\n                    removeAction: removals,\n                    updateAction,\n                };\n                const listElement = before.__elements[elementIndex];\n                __SetAttribute(listElement, 'update-list-info', info);\n                const [componentAtIndex, componentAtIndexes] = componentAtIndexFactory(afterChildNodes, hydrate);\n                __UpdateListCallbacks(listElement, componentAtIndex, enqueueComponentFactory(), componentAtIndexes);\n                // The `before` & `after` target to the same list element, so we need to\n                // avoid the newly created list's (behind snapshot instance `after`) \"update-list-info\" being recorded.\n                if (__pendingListUpdates.values) {\n                    delete __pendingListUpdates.values[after.__id];\n                }\n            }\n        }\n    });\n}\n//# sourceMappingURL=hydrate.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport './lynx.js';\nimport './lynx/component.js';\nimport { Children, Component, Fragment, PureComponent, cloneElement, createContext, createElement, createRef, forwardRef, isValidElement, memo, lazy as preactLazy, useSyncExternalStore, } from 'preact/compat';\nimport { useCallback, useContext, useDebugValue, useEffect, useImperativeHandle, useLayoutEffect, useMemo, useReducer, useRef, useState, } from './hooks/react.js';\nimport { loadLazyBundle } from './lynx/lazy-bundle.js';\nimport { Suspense } from './lynx/suspense.js';\nexport { Component, createContext } from 'preact';\nexport { PureComponent } from 'preact/compat';\nexport * from './hooks/react.js';\nconst lazy = /*#__PURE__*/ (() => {\n    lynx.loadLazyBundle = loadLazyBundle;\n    return preactLazy;\n})();\n/**\n * @internal\n */\nexport default {\n    // hooks\n    useState,\n    useReducer,\n    useEffect,\n    useLayoutEffect,\n    useRef,\n    useImperativeHandle,\n    useMemo,\n    useCallback,\n    useContext,\n    useDebugValue,\n    useSyncExternalStore,\n    createContext,\n    createRef,\n    Fragment,\n    isValidElement,\n    Children,\n    Component,\n    PureComponent,\n    memo,\n    forwardRef,\n    Suspense,\n    lazy,\n    createElement,\n};\nexport { Children, createRef, Fragment, isValidElement, memo, forwardRef, Suspense, lazy, createElement, cloneElement, useSyncExternalStore, };\nexport * from './lynx-api.js';\n//# sourceMappingURL=index.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { Suspense, createElement, lazy } from 'preact/compat';\nimport './lynx.js';\nimport { factory as factory2 } from './compat/componentIs.js';\nimport { useMemo } from './hooks/react.js';\nimport { loadLazyBundle } from './lynx/lazy-bundle.js';\nimport { __root } from './root.js';\nimport { DynamicPartType } from './snapshot/dynamicPartType.js';\nimport { snapshotCreateList } from './snapshot/list.js';\nimport { SnapshotInstance, __page, __pageId, createSnapshot, snapshotManager } from './snapshot.js';\nexport { __page, __pageId, __root };\nexport { SnapshotInstance, snapshotCreateList, createSnapshot, snapshotManager };\nexport const __DynamicPartSlot = DynamicPartType.Slot;\nexport const __DynamicPartMultiChildren = DynamicPartType.MultiChildren;\nexport const __DynamicPartChildren = DynamicPartType.Children;\nexport const __DynamicPartListChildren = DynamicPartType.ListChildren;\nexport { __DynamicPartChildren_0 } from './snapshot.js';\nexport { updateSpread } from './snapshot/spread.js';\nexport { updateEvent } from './snapshot/event.js';\nexport { updateRef, transformRef } from './snapshot/ref.js';\nexport { updateWorkletEvent } from './snapshot/workletEvent.js';\nexport { updateWorkletRef } from './snapshot/workletRef.js';\nexport { updateGesture } from './snapshot/gesture.js';\nexport { updateListItemPlatformInfo } from './snapshot/platformInfo.js';\nexport { options, \n// Component is not an internal API, but refresh needs it from 'react/internal'\nComponent, } from 'preact';\nexport { loadDynamicJS, __dynamicImport } from './lynx/dynamic-js.js';\nexport { withInitDataInState } from './compat/initData.js';\nexport { wrapWithLynxComponent } from './compat/lynxComponent.js';\n/**\n * @internal a polyfill for <component is=? />\n */\nexport const __ComponentIsPolyfill = /* @__PURE__ */ factory2(\n// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n{ Suspense, lazy, createElement, useMemo }, loadLazyBundle);\nexport { loadLazyBundle } from './lynx/lazy-bundle.js';\nexport { transformToWorklet } from './worklet/transformToWorklet.js';\nexport { registerWorkletOnBackground } from './worklet/hmr.js';\nexport { loadWorkletRuntime } from '@lynx-js/react/worklet-runtime/bindings';\n//# sourceMappingURL=internal.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { render } from 'preact';\nimport { __root } from '../root.js';\nimport { delayedEvents } from './event/delayEvents.js';\nimport { delayedLifecycleEvents } from './event/delayLifecycleEvents.js';\nimport { globalCommitTaskMap } from './patch/commit.js';\nfunction destroyBackground() {\n    if (__PROFILE__) {\n        console.profile('destroyBackground');\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    render(null, __root);\n    globalCommitTaskMap.forEach(task => {\n        task();\n    });\n    globalCommitTaskMap.clear();\n    // Clear delayed events which should not be executed after destroyed.\n    // This is important when the page is performing a reload.\n    delayedLifecycleEvents.length = 0;\n    if (delayedEvents) {\n        delayedEvents.length = 0;\n    }\n    if (__PROFILE__) {\n        console.profileEnd();\n    }\n}\nexport { destroyBackground };\n//# sourceMappingURL=destroy.js.map","// Copyright 2025 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nlet delayedEvents;\nfunction delayedPublishEvent(handlerName, data) {\n    delayedEvents ??= [];\n    delayedEvents.push([handlerName, data]);\n}\nexport { delayedPublishEvent, delayedEvents };\n//# sourceMappingURL=delayEvents.js.map","const delayedLifecycleEvents = [];\nfunction delayLifecycleEvent(type, data) {\n    delayedLifecycleEvents.push([type, data]);\n}\n/**\n * @internal\n */\nexport { delayLifecycleEvent, delayedLifecycleEvents };\n//# sourceMappingURL=delayLifecycleEvents.js.map","// Copyright 2025 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { LifecycleConstant } from '../../lifecycleConstant.js';\nimport { __root } from '../../root.js';\nlet isJSReady;\nlet jsReadyEventIdSwap;\nfunction jsReady() {\n    isJSReady = true;\n    __OnLifecycleEvent([\n        LifecycleConstant.firstScreen, /* FIRST_SCREEN */\n        {\n            root: JSON.stringify(__root),\n            jsReadyEventIdSwap,\n        },\n    ]);\n    jsReadyEventIdSwap = {};\n}\nfunction clearJSReadyEventIdSwap() {\n    jsReadyEventIdSwap = {};\n}\nfunction resetJSReady() {\n    isJSReady = false;\n    jsReadyEventIdSwap = {};\n}\n/**\n * @internal\n */\nexport { jsReady, isJSReady, jsReadyEventIdSwap, clearJSReadyEventIdSwap, resetJSReady };\n//# sourceMappingURL=jsReady.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nlet reloadVersion = 0;\nfunction getReloadVersion() {\n    return reloadVersion;\n}\nfunction increaseReloadVersion() {\n    return ++reloadVersion;\n}\nexport { getReloadVersion, increaseReloadVersion };\n//# sourceMappingURL=pass.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\n/**\n * Implements the commit phase of the rendering lifecycle.\n * This module patches Preact's commit phase to integrate with the snapshot system,\n * handling the collection and transmission of patches between threads.\n *\n * The commit phase is responsible for:\n * - Collecting patches from the snapshot system\n * - Managing commit tasks and their execution\n * - Coordinating with the native layer for updates\n * - Handling performance timing and pipeline options\n */\n/**\n * This module patches Preact's commit phase by hacking into the internal of\n * its [options](https://preactjs.com/guide/v10/options/) API\n */\nimport { options } from 'preact';\nimport { LifecycleConstant } from '../../lifecycleConstant.js';\nimport { globalPipelineOptions, markTiming, markTimingLegacy, setPipeline } from '../../lynx/performance.js';\nimport { COMMIT } from '../../renderToOpcodes/constants.js';\nimport { applyQueuedRefs } from '../../snapshot/ref.js';\nimport { backgroundSnapshotInstanceManager } from '../../snapshot.js';\nimport { hook, isEmptyObject } from '../../utils.js';\nimport { takeWorkletRefInitValuePatch } from '../../worklet/workletRefPool.js';\nimport { getReloadVersion } from '../pass.js';\nimport { takeGlobalSnapshotPatch } from './snapshotPatch.js';\nlet globalFlushOptions = {};\nfunction takeGlobalFlushOptions() {\n    const res = globalFlushOptions;\n    globalFlushOptions = {};\n    return res;\n}\nconst globalCommitTaskMap = /*@__PURE__*/ new Map();\nlet nextCommitTaskId = 1;\nlet globalBackgroundSnapshotInstancesToRemove = [];\nexport let globalPatchOptions = {};\nfunction takeGlobalPatchOptions() {\n    const res = globalPatchOptions;\n    globalPatchOptions = {};\n    return res;\n}\n/**\n * Replaces Preact's default commit hook with our custom implementation\n */\nfunction replaceCommitHook() {\n    hook(options, COMMIT, (originalPreactCommit, // This is actually not used since Preact use `hooks._commit` for callbacks of `useLayoutEffect`.\n    vnode, commitQueue) => {\n        // Skip commit phase for MT runtime\n        if (__MAIN_THREAD__) {\n            // for testing only\n            commitQueue.length = 0;\n            return;\n        }\n        // Mark the end of virtual DOM diffing phase for performance tracking\n        markTimingLegacy('updateDiffVdomEnd');\n        markTiming('diffVdomEnd');\n        const backgroundSnapshotInstancesToRemove = globalBackgroundSnapshotInstancesToRemove;\n        globalBackgroundSnapshotInstancesToRemove = [];\n        const commitTaskId = genCommitTaskId();\n        // Register the commit task\n        globalCommitTaskMap.set(commitTaskId, () => {\n            if (backgroundSnapshotInstancesToRemove.length) {\n                setTimeout(() => {\n                    backgroundSnapshotInstancesToRemove.forEach(id => {\n                        backgroundSnapshotInstanceManager.values.get(id)?.tearDown();\n                    });\n                }, 10000);\n            }\n        });\n        // Collect patches for this update\n        const snapshotPatch = takeGlobalSnapshotPatch();\n        const flushOptions = takeGlobalFlushOptions();\n        const patchOptions = takeGlobalPatchOptions();\n        const workletRefInitValuePatch = takeWorkletRefInitValuePatch();\n        if (!snapshotPatch && workletRefInitValuePatch.length === 0) {\n            // before hydration, skip patch\n            applyQueuedRefs();\n            originalPreactCommit?.(vnode, commitQueue);\n            return;\n        }\n        const patch = {\n            id: commitTaskId,\n        };\n        // TODO: check all fields in `flushOptions` from runtime3\n        if (snapshotPatch?.length) {\n            patch.snapshotPatch = snapshotPatch;\n        }\n        if (workletRefInitValuePatch.length) {\n            patch.workletRefInitValuePatch = workletRefInitValuePatch;\n        }\n        const patchList = {\n            patchList: [patch],\n        };\n        if (!isEmptyObject(flushOptions)) {\n            patchList.flushOptions = flushOptions;\n        }\n        const obj = commitPatchUpdate(patchList, patchOptions);\n        // Send the update to the native layer\n        lynx.getNativeApp().callLepusMethod(LifecycleConstant.patchUpdate, obj, () => {\n            const commitTask = globalCommitTaskMap.get(commitTaskId);\n            if (commitTask) {\n                commitTask();\n                globalCommitTaskMap.delete(commitTaskId);\n            }\n        });\n        applyQueuedRefs();\n        originalPreactCommit?.(vnode, commitQueue);\n    });\n}\n/**\n * Prepares the patch update for transmission to the native layer\n */\nfunction commitPatchUpdate(patchList, patchOptions) {\n    // console.debug('********** JS update:');\n    // printSnapshotInstance(\n    //   (backgroundSnapshotInstanceManager.values.get(1) ?? backgroundSnapshotInstanceManager.values.get(-1))!,\n    // );\n    // console.debug('commitPatchUpdate:', prettyFormatSnapshotPatch(patchList.patchList[0]?.snapshotPatch));\n    if (__PROFILE__) {\n        console.profile('commitChanges');\n    }\n    markTiming('packChangesStart');\n    const obj = {\n        data: JSON.stringify(patchList),\n        patchOptions: {\n            ...patchOptions,\n            reloadVersion: getReloadVersion(),\n        },\n    };\n    markTiming('packChangesEnd');\n    if (globalPipelineOptions) {\n        obj.patchOptions.pipelineOptions = globalPipelineOptions;\n        setPipeline(undefined);\n    }\n    if (__PROFILE__) {\n        console.profileEnd();\n    }\n    return obj;\n}\n/**\n * Generates a unique ID for commit tasks\n */\nfunction genCommitTaskId() {\n    return nextCommitTaskId++;\n}\n/**\n * Resets the commit task ID counter\n */\nfunction clearCommitTaskId() {\n    nextCommitTaskId = 1;\n}\n/**\n * @internal\n */\nexport { clearCommitTaskId, commitPatchUpdate, genCommitTaskId, globalBackgroundSnapshotInstancesToRemove, globalCommitTaskMap, globalFlushOptions, replaceCommitHook, };\n//# sourceMappingURL=commit.js.map","// Copyright 2025 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { backgroundSnapshotInstanceManager, snapshotManager } from '../../snapshot.js';\nexport const ctxNotFoundType = 'Lynx.Error.CtxNotFound';\nconst errorMsg = 'snapshotPatchApply failed: ctx not found';\nlet ctxNotFoundEventListener = null;\nexport function sendCtxNotFoundEventToBackground(id) {\n    /* v8 ignore next 3 */\n    if (!lynx.getJSContext) {\n        throw new Error(errorMsg);\n    }\n    lynx.getJSContext().dispatchEvent({\n        type: ctxNotFoundType,\n        data: {\n            id,\n        },\n    });\n}\nexport function reportCtxNotFound(data) {\n    const id = data.id;\n    const instance = backgroundSnapshotInstanceManager.values.get(id);\n    let snapshotType = 'null';\n    if (instance && instance.__snapshot_def) {\n        for (const [snapshotId, snapshot] of snapshotManager.values.entries()) {\n            if (snapshot === instance.__snapshot_def) {\n                snapshotType = snapshotId;\n                break;\n            }\n        }\n    }\n    lynx.reportError(new Error(`${errorMsg}, snapshot type: '${snapshotType}'`));\n}\nexport function addCtxNotFoundEventListener() {\n    ctxNotFoundEventListener = (e) => {\n        reportCtxNotFound(e.data);\n    };\n    lynx.getCoreContext?.().addEventListener(ctxNotFoundType, ctxNotFoundEventListener);\n}\nexport function removeCtxNotFoundEventListener() {\n    const coreContext = lynx.getCoreContext?.();\n    if (coreContext && ctxNotFoundEventListener) {\n        coreContext.removeEventListener(ctxNotFoundType, ctxNotFoundEventListener);\n        ctxNotFoundEventListener = null;\n    }\n}\n//# sourceMappingURL=error.js.map","// Copyright 2025 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { onHydrationFinished } from '@lynx-js/react/worklet-runtime/bindings';\nexport let isMainThreadHydrating = false;\nexport function setMainThreadHydrating(isHydrating) {\n    if (!isHydrating && isMainThreadHydrating) {\n        onHydrationFinished();\n    }\n    isMainThreadHydrating = isHydrating;\n}\n//# sourceMappingURL=isMainThreadHydrating.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\n/**\n * Defines the core patch operations for the snapshot system.\n * The patch operations are designed to be serializable and minimal, allowing\n * efficient transmission between threads and application to element tree.\n */\nexport const SnapshotOperation = {\n    CreateElement: 0,\n    InsertBefore: 1,\n    RemoveChild: 2,\n    SetAttribute: 3,\n    SetAttributes: 4,\n    DEV_ONLY_AddSnapshot: 100,\n    DEV_ONLY_RegisterWorklet: 101,\n};\nexport const SnapshotOperationParams = /* @__PURE__ */ {\n    [SnapshotOperation.CreateElement]: { name: 'CreateElement', params: ['type', /* string */ 'id' /* number */] },\n    [SnapshotOperation.InsertBefore]: {\n        name: 'InsertBefore',\n        params: ['parentId', /* number */ 'childId', /* number */ 'beforeId' /* number | undefined */],\n    },\n    [SnapshotOperation.RemoveChild]: { name: 'RemoveChild', params: ['parentId', /* number */ 'childId' /* number */] },\n    [SnapshotOperation.SetAttribute]: {\n        name: 'SetAttribute',\n        params: ['id', /* number */ 'dynamicPartIndex', /* number */ 'value' /* any */],\n    },\n    [SnapshotOperation.SetAttributes]: { name: 'SetAttributes', params: ['id', /* number */ 'values' /* any */] },\n    [SnapshotOperation.DEV_ONLY_AddSnapshot]: {\n        name: 'DEV_ONLY_AddSnapshot',\n        params: [\n            'uniqID', /* string */\n            'create', /* string */\n            'update', /* string[] */\n            'slot', /* [DynamicPartType, number][] */\n            'cssId', /* number | undefined */\n            'entryName', /* string | undefined */\n        ],\n    },\n    [SnapshotOperation.DEV_ONLY_RegisterWorklet]: {\n        name: 'DEV_ONLY_RegisterWorklet',\n        params: ['hash', /* string */ 'fnStr' /* string */],\n    },\n};\nexport let __globalSnapshotPatch;\nexport function takeGlobalSnapshotPatch() {\n    if (__globalSnapshotPatch) {\n        const list = __globalSnapshotPatch;\n        __globalSnapshotPatch = [];\n        return list;\n    }\n    else {\n        return undefined;\n    }\n}\nexport function initGlobalSnapshotPatch() {\n    __globalSnapshotPatch = [];\n}\nexport function deinitGlobalSnapshotPatch() {\n    __globalSnapshotPatch = undefined;\n}\n//# sourceMappingURL=snapshotPatch.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\n/**\n * Implements the patch application logic for the snapshot system.\n * This module is responsible for interpreting and executing patch operations\n * that were generated in the background thread, applying them to the DOM\n * in the main thread.\n *\n * The module handles various operations like element creation, insertion,\n * removal, and attribute updates, ensuring they are applied in the correct\n * order and with proper error handling.\n */\nimport { sendCtxNotFoundEventToBackground } from './error.js';\nimport { SnapshotOperation } from './snapshotPatch.js';\nimport { SnapshotInstance, createSnapshot, entryUniqID, snapshotInstanceManager, snapshotManager, } from '../../snapshot.js';\n/**\n * Applies a patch of snapshot operations to the main thread.\n * This is the counterpart to the patch generation in the background thread.\n * Each operation in the patch is processed sequentially to update the DOM.\n */\nexport function snapshotPatchApply(snapshotPatch) {\n    const length = snapshotPatch.length;\n    for (let i = 0; i < length; ++i) {\n        switch (snapshotPatch[i]) {\n            case SnapshotOperation.CreateElement: {\n                const type = snapshotPatch[++i];\n                const id = snapshotPatch[++i];\n                new SnapshotInstance(type, id);\n                break;\n            }\n            case SnapshotOperation.InsertBefore: {\n                const parentId = snapshotPatch[++i];\n                const childId = snapshotPatch[++i];\n                const beforeId = snapshotPatch[++i];\n                const parent = snapshotInstanceManager.values.get(parentId);\n                const child = snapshotInstanceManager.values.get(childId);\n                const existingNode = snapshotInstanceManager.values.get(beforeId);\n                if (!parent || !child) {\n                    sendCtxNotFoundEventToBackground(parent ? childId : parentId);\n                }\n                else {\n                    parent.insertBefore(child, existingNode);\n                }\n                break;\n            }\n            case SnapshotOperation.RemoveChild: {\n                const parentId = snapshotPatch[++i];\n                const childId = snapshotPatch[++i];\n                const parent = snapshotInstanceManager.values.get(parentId);\n                const child = snapshotInstanceManager.values.get(childId);\n                if (!parent || !child) {\n                    sendCtxNotFoundEventToBackground(parent ? childId : parentId);\n                }\n                else {\n                    parent.removeChild(child);\n                }\n                break;\n            }\n            case SnapshotOperation.SetAttribute: {\n                const id = snapshotPatch[++i];\n                const dynamicPartIndex = snapshotPatch[++i];\n                const value = snapshotPatch[++i];\n                const si = snapshotInstanceManager.values.get(id);\n                if (si) {\n                    si.setAttribute(dynamicPartIndex, value);\n                }\n                else {\n                    sendCtxNotFoundEventToBackground(id);\n                }\n                break;\n            }\n            case SnapshotOperation.SetAttributes: {\n                const id = snapshotPatch[++i];\n                const values = snapshotPatch[++i];\n                const si = snapshotInstanceManager.values.get(id);\n                if (si) {\n                    si.setAttribute('values', values);\n                }\n                else {\n                    sendCtxNotFoundEventToBackground(id);\n                }\n                break;\n            }\n            case SnapshotOperation.DEV_ONLY_AddSnapshot: {\n                if (__DEV__) {\n                    const uniqID = snapshotPatch[++i];\n                    const create = snapshotPatch[++i];\n                    const update = snapshotPatch[++i];\n                    const slot = snapshotPatch[++i];\n                    const cssId = (snapshotPatch[++i] ?? 0);\n                    const entryName = snapshotPatch[++i];\n                    if (!snapshotManager.values.has(entryUniqID(uniqID, entryName))) {\n                        // HMR-related\n                        // Update the evaluated snapshots from JS.\n                        createSnapshot(uniqID, evaluate(create), \n                        // eslint-disable-next-line unicorn/no-array-callback-reference\n                        update.map(evaluate), slot, cssId, entryName, null);\n                    }\n                }\n                break;\n            }\n            // case SnapshotOperation.DEV_ONLY_RegisterWorklet: {\n            //   // HMR-related\n            //   if (__DEV__) {\n            //     const hash: string = snapshotPatch[++i];\n            //     const fnStr: string = snapshotPatch[++i];\n            //     const fn = evaluate<(ctx: SnapshotInstance) => FiberElement[]>(fnStr);\n            //     registerWorklet('main-thread', hash, fn);\n            //   }\n            //   break;\n            // }\n        }\n    }\n}\n/* v8 ignore start */\n/**\n * Evaluates a string as code with ReactLynx runtime injected.\n * Used for HMR (Hot Module Replacement) to update snapshot definitions.\n */\nfunction evaluate(code) {\n    if (__DEV__) {\n        // We are using `eval` here to make the updated snapshot to access variables like `__webpack_require__`.\n        // See: https://github.com/lynx-family/lynx-stack/issues/983.\n        return eval(`(() => ${code})()`);\n    }\n    throw new Error('unreachable: evaluate is not supported in production');\n}\n/* v8 ignore stop */\n//# sourceMappingURL=snapshotPatchApply.js.map","// Copyright 2025 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { updateWorkletRefInitValueChanges } from '@lynx-js/react/worklet-runtime/bindings';\nimport { setMainThreadHydrating } from './isMainThreadHydrating.js';\nimport { snapshotPatchApply } from './snapshotPatchApply.js';\nimport { LifecycleConstant } from '../../lifecycleConstant.js';\nimport { markTiming, setPipeline } from '../../lynx/performance.js';\nimport { __pendingListUpdates } from '../../pendingListUpdates.js';\nimport { applyRefQueue } from '../../snapshot/workletRef.js';\nimport { __page } from '../../snapshot.js';\nimport { getReloadVersion } from '../pass.js';\nfunction updateMainThread({ data, patchOptions }) {\n    if ((patchOptions.reloadVersion) < getReloadVersion()) {\n        return;\n    }\n    const flowIds = patchOptions.flowIds;\n    if (flowIds) {\n        lynx.performance.profileStart('ReactLynx::patch', {\n            flowId: flowIds[0],\n            // @ts-expect-error flowIds is not defined in the type, for now\n            flowIds,\n        });\n    }\n    setPipeline(patchOptions.pipelineOptions);\n    markTiming('mtsRenderStart');\n    markTiming('parseChangesStart');\n    const { patchList, flushOptions = {} } = JSON.parse(data);\n    markTiming('parseChangesEnd');\n    markTiming('patchChangesStart');\n    if (patchOptions.isHydration) {\n        setMainThreadHydrating(true);\n    }\n    try {\n        for (const { snapshotPatch, workletRefInitValuePatch } of patchList) {\n            updateWorkletRefInitValueChanges(workletRefInitValuePatch);\n            __pendingListUpdates.clear();\n            if (snapshotPatch) {\n                snapshotPatchApply(snapshotPatch);\n            }\n            __pendingListUpdates.flush();\n            // console.debug('********** Lepus updatePatch:');\n            // printSnapshotInstance(snapshotInstanceManager.values.get(-1)!);\n        }\n    }\n    finally {\n        markTiming('patchChangesEnd');\n        markTiming('mtsRenderEnd');\n        if (patchOptions.isHydration) {\n            setMainThreadHydrating(false);\n        }\n    }\n    applyRefQueue();\n    if (patchOptions.pipelineOptions) {\n        flushOptions.pipelineOptions = patchOptions.pipelineOptions;\n    }\n    __FlushElementTree(__page, flushOptions);\n    if (flowIds) {\n        lynx.performance.profileEnd();\n    }\n}\nfunction injectUpdateMainThread() {\n    Object.assign(globalThis, { [LifecycleConstant.patchUpdate]: updateMainThread });\n}\n/**\n * @internal\n */\nexport { injectUpdateMainThread };\n//# sourceMappingURL=updateMainThread.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { hydrationMap } from '../../snapshotInstanceHydrationMap.js';\n/**\n * A flag to indicate whether UI operations should be delayed.\n * When set to true, UI operations will be queued in the `delayedUiOps` array\n * and executed later when `runDelayedUiOps` is called.\n * This is used before hydration to ensure UI operations are batched\n * and executed at the appropriate time.\n */\nconst shouldDelayUiOps = { value: true };\n/**\n * An array of functions that will be executed later when `runDelayedUiOps` is called.\n * These functions contain UI operations that need to be delayed.\n */\nconst delayedUiOps = [];\n/**\n * Runs a task either immediately or delays it based on the `shouldDelayUiOps` flag.\n * @param task - The function to execute.\n */\nfunction runOrDelay(task) {\n    if (shouldDelayUiOps.value) {\n        delayedUiOps.push(task);\n    }\n    else {\n        task();\n    }\n}\n/**\n * Executes all delayed UI operations.\n */\nfunction runDelayedUiOps() {\n    for (const task of delayedUiOps) {\n        task();\n    }\n    shouldDelayUiOps.value = false;\n    delayedUiOps.length = 0;\n}\n/**\n * A proxy class designed for managing and executing reference-based tasks.\n * It delays the execution of tasks until hydration is complete.\n */\nclass RefProxy {\n    refAttr;\n    task;\n    constructor(refAttr) {\n        this.refAttr = refAttr;\n    }\n    setTask(method, args) {\n        this.task = (nodesRef) => {\n            return nodesRef[method](...args);\n        };\n        return this;\n    }\n    invoke(...args) {\n        return new RefProxy(this.refAttr).setTask('invoke', args);\n    }\n    path(...args) {\n        return new RefProxy(this.refAttr).setTask('path', args);\n    }\n    fields(...args) {\n        return new RefProxy(this.refAttr).setTask('fields', args);\n    }\n    setNativeProps(...args) {\n        return new RefProxy(this.refAttr).setTask('setNativeProps', args);\n    }\n    exec() {\n        runOrDelay(() => {\n            const realRefId = hydrationMap.get(this.refAttr[0]) ?? this.refAttr[0];\n            const refSelector = `[react-ref-${realRefId}-${this.refAttr[1]}]`;\n            this.task(lynx.createSelectorQuery().select(refSelector)).exec();\n        });\n    }\n}\n/**\n * @internal\n */\nexport { RefProxy, runDelayedUiOps, shouldDelayUiOps };\n//# sourceMappingURL=delay.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\n/**\n * Implements the reload (thinking of \"refresh\" in browser) for both main thread\n * and background thread.\n */\nimport { render } from 'preact';\nimport { hydrate } from '../hydrate.js';\nimport { LifecycleConstant } from '../lifecycleConstant.js';\nimport { __pendingListUpdates } from '../pendingListUpdates.js';\nimport { __root, setRoot } from '../root.js';\nimport { destroyBackground } from './destroy.js';\nimport { applyRefQueue } from '../snapshot/workletRef.js';\nimport { SnapshotInstance, __page, snapshotInstanceManager } from '../snapshot.js';\nimport { isEmptyObject } from '../utils.js';\nimport { destroyWorklet } from '../worklet/destroy.js';\nimport { clearJSReadyEventIdSwap, isJSReady } from './event/jsReady.js';\nimport { increaseReloadVersion } from './pass.js';\nimport { deinitGlobalSnapshotPatch } from './patch/snapshotPatch.js';\nimport { shouldDelayUiOps } from './ref/delay.js';\nimport { renderMainThread } from './render.js';\nfunction reloadMainThread(data, options) {\n    if (__PROFILE__) {\n        console.profile('reloadTemplate');\n    }\n    increaseReloadVersion();\n    if (typeof data == 'object' && !isEmptyObject(data)) {\n        Object.assign(lynx.__initData, data);\n    }\n    destroyWorklet();\n    snapshotInstanceManager.clear();\n    __pendingListUpdates.clear();\n    clearJSReadyEventIdSwap();\n    const oldRoot = __root;\n    setRoot(new SnapshotInstance('root'));\n    __root.__jsx = oldRoot.__jsx;\n    renderMainThread();\n    hydrate(oldRoot, __root, {\n        skipUnRef: true,\n    });\n    // always call this before `__FlushElementTree`\n    __pendingListUpdates.flush();\n    applyRefQueue();\n    if (isJSReady) {\n        __OnLifecycleEvent([\n            LifecycleConstant.firstScreen, /* FIRST_SCREEN */\n            {\n                root: JSON.stringify(__root),\n            },\n        ]);\n    }\n    __FlushElementTree(__page, options);\n    if (__PROFILE__) {\n        console.profileEnd();\n    }\n    return;\n}\nfunction reloadBackground(updateData) {\n    if (__PROFILE__) {\n        console.profile('reload');\n    }\n    deinitGlobalSnapshotPatch();\n    destroyBackground();\n    increaseReloadVersion();\n    // COW when modify `lynx.__initData` to make sure Provider & Consumer works\n    lynx.__initData = Object.assign({}, lynx.__initData, updateData);\n    shouldDelayUiOps.value = true;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    render(__root.__jsx, __root);\n    if (__PROFILE__) {\n        console.profileEnd();\n    }\n}\nexport { reloadBackground, reloadMainThread };\n//# sourceMappingURL=reload.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\n/**\n * Implements the IFR (Instant First-Frame Rendering) on main thread.\n */\nimport { isValidElement } from 'preact';\nimport { renderOpcodesInto } from '../opcodes.js';\nimport { render as renderToString } from '../renderToOpcodes/index.js';\nimport { __root } from '../root.js';\nimport { SnapshotInstance } from '../snapshot.js';\nfunction renderMainThread() {\n    let opcodes;\n    try {\n        if (__PROFILE__) {\n            console.profile('renderToString');\n        }\n        opcodes = renderToString(__root.__jsx, undefined);\n    }\n    catch (e) {\n        lynx.reportError(e);\n        opcodes = [];\n    }\n    finally {\n        if (__PROFILE__) {\n            console.profileEnd();\n        }\n    }\n    if (process.env['NODE_ENV'] === 'test') {\n        opcodes = opcodes.map((opcode) => {\n            if (isValidElement(opcode) && typeof opcode.type === 'string') {\n                return Object.assign(new SnapshotInstance(opcode.type), opcode, { $$typeof: undefined });\n            }\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n            return opcode;\n        });\n    }\n    if (__PROFILE__) {\n        console.profile('renderOpcodesInto');\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    renderOpcodesInto(opcodes, __root);\n    if (__ENABLE_SSR__) {\n        __root.__opcodes = opcodes;\n    }\n    if (__PROFILE__) {\n        console.profileEnd();\n    }\n}\nexport { renderMainThread };\n//# sourceMappingURL=render.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nexport var LifecycleConstant;\n(function (LifecycleConstant) {\n    LifecycleConstant[\"firstScreen\"] = \"rLynxFirstScreen\";\n    LifecycleConstant[\"updateFromRoot\"] = \"updateFromRoot\";\n    LifecycleConstant[\"globalEventFromLepus\"] = \"globalEventFromLepus\";\n    LifecycleConstant[\"jsReady\"] = \"rLynxJSReady\";\n    LifecycleConstant[\"patchUpdate\"] = \"rLynxChange\";\n    LifecycleConstant[\"publishEvent\"] = \"rLynxPublishEvent\";\n})(LifecycleConstant || (LifecycleConstant = {}));\nexport var NativeUpdateDataType;\n(function (NativeUpdateDataType) {\n    NativeUpdateDataType[NativeUpdateDataType[\"UPDATE\"] = 0] = \"UPDATE\";\n    NativeUpdateDataType[NativeUpdateDataType[\"RESET\"] = 1] = \"RESET\";\n})(NativeUpdateDataType || (NativeUpdateDataType = {}));\n//# sourceMappingURL=lifecycleConstant.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { LifecycleConstant } from './lifecycleConstant.js';\nimport { applyRefQueue } from './snapshot/workletRef.js';\nimport { maybePromise } from './utils.js';\nexport const gSignMap = {};\nexport const gRecycleMap = {};\nconst gParentWeakMap = new WeakMap();\nconst resolvedPromise = /* @__PURE__ */ Promise.resolve();\nexport function clearListGlobal() {\n    for (const key in gSignMap) {\n        delete gSignMap[key];\n    }\n    for (const key in gRecycleMap) {\n        delete gRecycleMap[key];\n    }\n}\nexport function componentAtIndexFactory(ctx, hydrateFunction) {\n    // A hack workaround to ensure childCtx has no direct reference through `__parent` to list,\n    // to avoid memory leak.\n    // TODO(hzy): make `__parent` a WeakRef or `#__parent` in the future.\n    ctx.forEach((childCtx) => {\n        if (gParentWeakMap.has(childCtx)) {\n            // do it only once\n        }\n        else {\n            gParentWeakMap.set(childCtx, childCtx.parentNode);\n            Object.defineProperty(childCtx, '__parent', {\n                get: () => gParentWeakMap.get(childCtx),\n                set: (value) => {\n                    gParentWeakMap.set(childCtx, value);\n                },\n            });\n        }\n    });\n    const componentAtChildCtx = (list, listID, childCtx, operationID, enableReuseNotification, enableBatchRender = false, asyncFlush = false) => {\n        const signMap = gSignMap[listID];\n        const recycleMap = gRecycleMap[listID];\n        if (!signMap || !recycleMap) {\n            throw new Error('componentAtIndex called on removed list');\n        }\n        const platformInfo = childCtx.__listItemPlatformInfo ?? {};\n        // The lifecycle of this `__extraProps.isReady`:\n        //   0 -> Promise<number> -> 1\n        // 0: The initial state, the list-item is not ready yet, we will send a event to background\n        //    when `componentAtIndex` is called on it\n        // Promise<number>: A promise that will be resolved when the list-item is ready\n        // 1: The list-item is ready, we can use it to render the list\n        if (childCtx.__extraProps?.['isReady'] === 0) {\n            if (typeof __GetAttributeByName === 'function'\n                && __GetAttributeByName(list, 'custom-list-name') === 'list-container') {\n                // we are in supported env\n                // do not throw\n            }\n            else {\n                throw new Error('Unsupported: `<list-item/>` with `defer={true}` must be used with `<list custom-list-name=\"list-container\"/>`');\n            }\n            __OnLifecycleEvent([LifecycleConstant.publishEvent, {\n                    handlerName: `${childCtx.__id}:__extraProps:onComponentAtIndex`,\n                    data: {},\n                }]);\n            let p;\n            return (p = new Promise((resolve) => {\n                Object.defineProperty(childCtx.__extraProps, 'isReady', {\n                    set(isReady) {\n                        if (isReady === 1) {\n                            delete childCtx.__extraProps['isReady'];\n                            childCtx.__extraProps['isReady'] = 1;\n                            void resolvedPromise.then(() => {\n                                // the cellIndex may be changed already, but the `childCtx` is the same\n                                resolve(componentAtChildCtx(list, listID, childCtx, operationID, enableReuseNotification));\n                            });\n                        }\n                    },\n                    get() {\n                        return p;\n                    },\n                });\n            }));\n        }\n        else if (maybePromise(childCtx.__extraProps?.['isReady'])) {\n            throw new Error('componentAtIndex was called on a pending deferred list item');\n        }\n        const uniqID = childCtx.type + (platformInfo['reuse-identifier'] ?? '');\n        const recycleSignMap = recycleMap.get(uniqID);\n        if (childCtx.__elements) {\n            /**\n             * If this situation is encountered, there might be two cases:\n             * 1. Reusing with itself\n             *    In this case, enqueueComponent will be triggered first, followed by componentAtIndex.\n             * 2. Moving\n             *    In this case, the trigger order is uncertain; componentAtIndex might be triggered first, or enqueueComponent might be triggered first.\n             *\n             * When enqueueComponent is triggered first, there must be an item in the reuse pool with the same sign as here, which can be returned directly.\n             * When componentAtIndex is triggered first, a clone needs to be made first, then follow the logic for adding or reusing. The cloned item will enter the reuse pool in the subsequent enqueueComponent.\n             */\n            const root = childCtx.__elements[0];\n            const sign = __GetElementUniqueID(root);\n            if (recycleSignMap?.has(sign)) {\n                signMap.set(sign, childCtx);\n                recycleSignMap.delete(sign);\n                if (!enableBatchRender) {\n                    __FlushElementTree(root, { triggerLayout: true, operationID, elementID: sign, listID });\n                }\n                else if (enableBatchRender && asyncFlush) {\n                    __FlushElementTree(root, { asyncFlush: true });\n                }\n                // enableBatchRender == true && asyncFlush == false\n                // in this case, no need to invoke __FlushElementTree because in the end of componentAtIndexes(), the list will invoke __FlushElementTree.\n                return sign;\n            }\n            else {\n                const newCtx = childCtx.takeElements();\n                signMap.set(sign, newCtx);\n            }\n        }\n        if (recycleSignMap && recycleSignMap.size > 0) {\n            const [first] = recycleSignMap;\n            const [sign, oldCtx] = first;\n            recycleSignMap.delete(sign);\n            hydrateFunction(oldCtx, childCtx);\n            oldCtx.unRenderElements();\n            if (!oldCtx.__id) {\n                oldCtx.tearDown();\n            }\n            else if (oldCtx.__extraProps?.['isReady'] === 1) {\n                __OnLifecycleEvent([LifecycleConstant.publishEvent, {\n                        handlerName: `${oldCtx.__id}:__extraProps:onRecycleComponent`,\n                        data: {},\n                    }]);\n            }\n            const root = childCtx.__element_root;\n            applyRefQueue();\n            if (!enableBatchRender) {\n                const flushOptions = {\n                    triggerLayout: true,\n                    operationID,\n                    elementID: sign,\n                    listID,\n                };\n                if (enableReuseNotification) {\n                    flushOptions.listReuseNotification = {\n                        listElement: list,\n                        itemKey: platformInfo['item-key'],\n                    };\n                }\n                __FlushElementTree(root, flushOptions);\n            }\n            else if (enableBatchRender && asyncFlush) {\n                const flushOptions = {\n                    asyncFlush: true,\n                };\n                if (enableReuseNotification) {\n                    flushOptions.listReuseNotification = {\n                        listElement: list,\n                        itemKey: platformInfo['item-key'],\n                    };\n                }\n                __FlushElementTree(root, flushOptions);\n            }\n            signMap.set(sign, childCtx);\n            return sign;\n        }\n        childCtx.ensureElements();\n        const root = childCtx.__element_root;\n        __AppendElement(list, root);\n        const sign = __GetElementUniqueID(root);\n        applyRefQueue();\n        if (!enableBatchRender) {\n            __FlushElementTree(root, {\n                triggerLayout: true,\n                operationID,\n                elementID: sign,\n                listID,\n            });\n        }\n        else if (enableBatchRender && asyncFlush) {\n            __FlushElementTree(root, {\n                asyncFlush: true,\n            });\n        }\n        signMap.set(sign, childCtx);\n        return sign;\n    };\n    function componentAtIndex(list, listID, cellIndex, operationID, enableReuseNotification) {\n        const childCtx = ctx[cellIndex];\n        if (!childCtx) {\n            throw new Error('childCtx not found');\n        }\n        const r = componentAtChildCtx(list, listID, childCtx, operationID, enableReuseNotification);\n        /* v8 ignore start */\n        if (process.env['NODE_ENV'] === 'test') {\n            return r;\n        }\n        else {\n            return typeof r === 'number' ? r : undefined;\n        }\n        /* v8 ignore end */\n    }\n    function componentAtIndexes(list, listID, cellIndexes, operationIDs, enableReuseNotification, asyncFlush) {\n        let hasUnready = false;\n        const p = [];\n        cellIndexes.forEach((cellIndex, index) => {\n            const operationID = operationIDs[index];\n            const childCtx = ctx[cellIndex];\n            if (!childCtx) {\n                throw new Error('childCtx not found');\n            }\n            const u = componentAtChildCtx(list, listID, childCtx, operationID, enableReuseNotification, true, asyncFlush);\n            if (typeof u === 'number') {\n                // ready\n            }\n            else {\n                hasUnready = true;\n            }\n            p.push(u);\n        });\n        // We need __FlushElementTree twice:\n        // 1. The first time is sync, we flush the items that are ready, with unready items' uiSign as -1.\n        // 2. The second time is async, with all the uiSigns.\n        // NOTE: The `operationIDs` passed to __FlushElementTree must be the one passed in,\n        // not the one generated by any code here, to workaround a bug of Lynx Engine.\n        // So we CANNOT split the `operationIDs` into two parts: one for ready items, one for unready items.\n        if (hasUnready) {\n            void Promise.all(p).then((uiSigns) => {\n                __FlushElementTree(list, {\n                    triggerLayout: true,\n                    operationIDs,\n                    elementIDs: uiSigns,\n                    listID,\n                });\n            });\n        }\n        __FlushElementTree(list, {\n            triggerLayout: true,\n            operationIDs,\n            elementIDs: cellIndexes.map((_, index) => typeof p[index] === 'number' ? p[index] : -1),\n            listID,\n        });\n    }\n    return [componentAtIndex, componentAtIndexes];\n}\nexport function enqueueComponentFactory() {\n    // eslint-disable-next-line unicorn/consistent-function-scoping\n    const enqueueComponent = (_, listID, sign) => {\n        const signMap = gSignMap[listID];\n        const recycleMap = gRecycleMap[listID];\n        if (!signMap || !recycleMap) {\n            throw new Error('enqueueComponent called on removed list');\n        }\n        const childCtx = signMap.get(sign);\n        if (!childCtx) {\n            return;\n        }\n        const platformInfo = childCtx.__listItemPlatformInfo ?? {};\n        const uniqID = childCtx.type + (platformInfo['reuse-identifier'] ?? '');\n        if (!recycleMap.has(uniqID)) {\n            recycleMap.set(uniqID, new Map());\n        }\n        recycleMap.get(uniqID).set(sign, childCtx);\n    };\n    return enqueueComponent;\n}\n//# sourceMappingURL=list.js.map","// Copyright 2025 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { hydrate } from './hydrate.js';\nimport { componentAtIndexFactory, enqueueComponentFactory } from './list.js';\nexport class ListUpdateInfoRecording {\n    list;\n    constructor(list) {\n        this.list = list;\n        this.oldChildNodes = list.childNodes;\n        // this.oldChildNodesSet = new Set(this.oldChildNodes);\n    }\n    // private __commitAndReset() {\n    //   (this.__pendingAttributes ??= []).push(this.__toAttribute());\n    //   this.oldChildNodes = this.list.childNodes;\n    //   this.oldChildNodesSet = new Set(this.oldChildNodes);\n    //   this.removeChild1.clear();\n    //   this.removeChild2.clear();\n    //   this.insertBefore.clear();\n    //   this.appendChild.length = 0;\n    //   this.platformInfoUpdate.clear();\n    // }\n    flush() {\n        const elementIndex = this.list.__snapshot_def.slot[0][1];\n        const listElement = this.list.__elements[elementIndex];\n        // this.__pendingAttributes?.forEach(pendingAttribute => {\n        //   __SetAttribute(listElement, \"update-list-info\", pendingAttribute);\n        //   __FlushElementTree(listElement);\n        // });\n        __SetAttribute(listElement, 'update-list-info', this.__toAttribute());\n        const [componentAtIndex, componentAtIndexes] = componentAtIndexFactory(this.list.childNodes, hydrate);\n        __UpdateListCallbacks(listElement, componentAtIndex, enqueueComponentFactory(), componentAtIndexes);\n    }\n    oldChildNodes;\n    // private oldChildNodesSet: Set<SnapshotInstance>;\n    removeChild = new Set();\n    insertBefore = new Map(); // insert V before K\n    appendChild = [];\n    platformInfoUpdate = new Map();\n    onInsertBefore(newNode, existingNode) {\n        if (newNode.parentNode) {\n            // if (!this.oldChildNodesSet.has(newNode)) {\n            //   this.__commitAndReset();\n            // }\n            this.removeChild.add(newNode);\n        }\n        if (existingNode) {\n            // if (!this.oldChildNodesSet.has(existingNode)) {\n            //   this.__commitAndReset();\n            // }\n            const newChildren = this.insertBefore.get(existingNode) ?? [];\n            newChildren.push(newNode);\n            this.insertBefore.set(existingNode, newChildren);\n        }\n        else {\n            this.appendChild.push(newNode);\n        }\n    }\n    onRemoveChild(child) {\n        // if (!this.oldChildNodesSet.has(child)) {\n        //   this.__commitAndReset();\n        // }\n        this.removeChild.add(child);\n    }\n    onSetAttribute(child, attr, _oldAttr) {\n        this.platformInfoUpdate.set(child, attr);\n    }\n    __toAttribute() {\n        const { removeChild, insertBefore, appendChild, platformInfoUpdate } = this;\n        const removals = [];\n        const insertions = [];\n        const updates = [];\n        let j = 0;\n        for (let i = 0; i < this.oldChildNodes.length; i++, j++) {\n            const child = this.oldChildNodes[i];\n            if (platformInfoUpdate.has(child)) {\n                updates.push({\n                    ...platformInfoUpdate.get(child),\n                    from: +j,\n                    to: +j,\n                    // no flush\n                    flush: false,\n                    type: child.type,\n                });\n            }\n            if (insertBefore.has(child)) {\n                const children = insertBefore.get(child);\n                children.forEach(c => {\n                    insertions.push({\n                        position: j,\n                        type: c.type,\n                        ...c.__listItemPlatformInfo,\n                    });\n                    j++;\n                });\n            }\n            if (removeChild.has(child)) {\n                removals.push(i);\n                removeChild.delete(child);\n                j--;\n            }\n        }\n        for (let i = 0; i < appendChild.length; i++) {\n            const child = appendChild[i];\n            insertions.push({\n                position: j + i,\n                type: child.type,\n                ...child.__listItemPlatformInfo,\n            });\n        }\n        insertions.sort((a, b) => a.position - b.position);\n        removals.sort((a, b) => a - b);\n        if (SystemInfo.lynxSdkVersion === '2.14'\n            || SystemInfo.lynxSdkVersion === '2.15'\n            || SystemInfo.lynxSdkVersion === '2.16'\n            || SystemInfo.lynxSdkVersion === '2.17'\n            || SystemInfo.lynxSdkVersion === '2.18') {\n            const elementIndex = this.list.__snapshot_def.slot[0][1];\n            const listElement = this.list.__elements[elementIndex];\n            // `__GetAttributeByName` is available since Lynx 2.14\n            if (__GetAttributeByName(listElement, 'custom-list-name') === 'list-container') {\n                // `updateAction` must be full (not incremental) when Lynx version <= 2.18 and\n                // when `custom-list-name` is `list-container` (available when Lynx version >= 2.14) is true,\n                updates.length = 0;\n                this.list.childNodes.forEach((child, index) => {\n                    updates.push({\n                        ...child.__listItemPlatformInfo,\n                        from: index,\n                        to: index,\n                        // no flush\n                        flush: false,\n                        type: child.type,\n                    });\n                });\n            }\n        }\n        return {\n            insertAction: insertions,\n            removeAction: removals,\n            updateAction: updates,\n        };\n    }\n    toJSON() {\n        // if (this.__pendingAttributes) {\n        //   return [...this.__pendingAttributes, this.__toAttribute()];\n        // } else {\n        //   return [this.__toAttribute()];\n        // }\n        return [this.__toAttribute()];\n    }\n}\n//# sourceMappingURL=listUpdateInfo.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { options, render } from 'preact';\nimport { createContext, createElement } from 'preact/compat';\nimport { useState } from 'preact/hooks';\nimport { factory, withInitDataInState } from './compat/initData.js';\nimport { useLynxGlobalEventListener } from './hooks/useLynxGlobalEventListener.js';\nimport { LifecycleConstant } from './lifecycleConstant.js';\nimport { flushDelayedLifecycleEvents } from './lynx/tt.js';\nimport { __root } from './root.js';\n/**\n * The default and only root of ReactLynx for you to render JSX\n * @example\n * ```ts\n * import { root } from \"@lynx-js/react\"\n * ```\n *\n * @public\n */\nexport const root = {\n    render: (jsx) => {\n        /* v8 ignore next 2 */\n        if (__MAIN_THREAD__) {\n            __root.__jsx = jsx;\n        }\n        else {\n            __root.__jsx = jsx;\n            let preactProcess = undefined;\n            // eslint-disable-next-line @typescript-eslint/unbound-method\n            const oldDebounceRendering = options.debounceRendering;\n            options.debounceRendering = (cb) => {\n                preactProcess = cb;\n            };\n            try {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n                render(jsx, __root);\n                preactProcess?.();\n            }\n            finally {\n                options.debounceRendering = oldDebounceRendering;\n            }\n            if (__FIRST_SCREEN_SYNC_TIMING__ === 'immediately') {\n                // This is for cases where `root.render()` is called asynchronously,\n                // `firstScreen` message might have been reached.\n                flushDelayedLifecycleEvents();\n            }\n            else {\n                lynx.getNativeApp().callLepusMethod(LifecycleConstant.jsReady, {});\n            }\n        }\n    },\n    /* v8 ignore next 3 */\n    registerDataProcessors: (dataProcessorDefinition) => {\n        lynx.registerDataProcessors(dataProcessorDefinition);\n    },\n};\nconst _InitData = /* @__PURE__ */ factory({\n    createContext,\n    useState,\n    createElement,\n    useLynxGlobalEventListener,\n}, '__initData', 'onDataChanged');\n/**\n * The {@link https://react.dev/reference/react/createContext#provider | Provider} Component that provide `initData`,\n * you must wrap your JSX inside it\n * @group Components\n *\n * @example\n *\n * ```ts\n * import { root } from \"@lynx-js/react\"\n *\n * function App() {\n *   return (\n *     <InitDataConsumer children={(initData) => <view>...</view>}/>\n *   )\n * }\n *\n * root.render(\n *   <InitDataProvider>\n *      <App/>\n *   </InitDataProvider>\n * );\n *\n * ```\n *\n * @public\n */\n// @ts-expect-error make preact and react types work\nexport const InitDataProvider = /* @__PURE__ */ _InitData.Provider();\n/**\n * The {@link https://react.dev/reference/react/createContext#consumer | Consumer} Component that provide `initData`.\n * This should be used with {@link InitDataProvider}\n * @group Components\n * @public\n */\n// @ts-expect-error make preact and react types work\nexport const InitDataConsumer = /* @__PURE__ */ _InitData.Consumer();\n/**\n * A React Hooks for you to get `initData`.\n * If `initData` is changed, a re-render will be triggered automatically.\n *\n * @example\n *\n * ```ts\n * function App() {\n *   const initData = useInitData();\n *\n *   initData.someProperty // use it\n * }\n * ```\n *\n * @public\n */\nexport const useInitData = /* @__PURE__ */ _InitData.use();\n/**\n * A React Hooks for you to get notified when `initData` changed.\n *\n * @example\n * ```ts\n * function App() {\n *   useInitDataChanged((data) => {\n *     data.someProperty // can use it\n *   })\n * }\n * ```\n * @public\n */\nexport const useInitDataChanged = /* @__PURE__ */ _InitData.useChanged();\nexport { withInitDataInState };\nexport { useLynxGlobalEventListener } from './hooks/useLynxGlobalEventListener.js';\nexport { runOnBackground } from './worklet/runOnBackground.js';\nexport { runOnMainThread } from './worklet/runOnMainThread.js';\nexport { MainThreadRef, useMainThreadRef } from './worklet/workletRef.js';\n//# sourceMappingURL=lynx-api.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { options } from 'preact';\n// to make sure preact's hooks to register earlier than ours\nimport './hooks/react.js';\nimport { initAlog } from './alog/index.js';\nimport { setupComponentStack } from './debug/component-stack.js';\nimport { initProfileHook } from './debug/profile.js';\nimport { document, setupBackgroundDocument } from './document.js';\nimport { replaceCommitHook } from './lifecycle/patch/commit.js';\nimport { addCtxNotFoundEventListener } from './lifecycle/patch/error.js';\nimport { injectUpdateMainThread } from './lifecycle/patch/updateMainThread.js';\nimport { injectCalledByNative } from './lynx/calledByNative.js';\nimport { setupLynxEnv } from './lynx/env.js';\nimport { injectLepusMethods } from './lynx/injectLepusMethods.js';\nimport { initTimingAPI } from './lynx/performance.js';\nimport { injectTt } from './lynx/tt.js';\nexport { runWithForce } from './lynx/runWithForce.js';\n// @ts-expect-error Element implicitly has an 'any' type because type 'typeof globalThis' has no index signature\nif (__MAIN_THREAD__ && typeof globalThis.processEvalResult === 'undefined') {\n    // @ts-expect-error Element implicitly has an 'any' type because type 'typeof globalThis' has no index signature\n    globalThis.processEvalResult = (result, schema) => {\n        return result?.(schema);\n    };\n}\nif (__MAIN_THREAD__) {\n    injectCalledByNative();\n    injectUpdateMainThread();\n    if (__DEV__) {\n        injectLepusMethods();\n    }\n}\nif (__DEV__) {\n    setupComponentStack();\n}\n// We are profiling both main-thread and background.\nif (__MAIN_THREAD__ && __PROFILE__) {\n    initProfileHook();\n}\nif (typeof __ALOG__ !== 'undefined' && __ALOG__) {\n    // We are logging both main-thread and background.\n    initAlog();\n}\nif (__BACKGROUND__) {\n    // Trick Preact and TypeScript to accept our custom document adapter.\n    options.document = document;\n    if (lynx.queueMicrotask) {\n        options.requestAnimationFrame = callback => lynx.queueMicrotask(callback);\n    }\n    else if (globalThis.Promise) {\n        const realResolvedPromise = globalThis.Promise.resolve();\n        options.requestAnimationFrame = callback => void realResolvedPromise.then(callback);\n    }\n    setupBackgroundDocument();\n    injectTt();\n    addCtxNotFoundEventListener();\n    if (process.env['NODE_ENV'] === 'test') { }\n    else {\n        replaceCommitHook();\n        initTimingAPI();\n        if (lynx.performance?.isProfileRecording?.()) {\n            initProfileHook();\n        }\n    }\n}\nsetupLynxEnv();\n//# sourceMappingURL=lynx.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { hydrate } from '../hydrate.js';\nimport { isJSReady, jsReady, jsReadyEventIdSwap, resetJSReady } from '../lifecycle/event/jsReady.js';\nimport { reloadMainThread } from '../lifecycle/reload.js';\nimport { renderMainThread } from '../lifecycle/render.js';\nimport { LifecycleConstant } from '../lifecycleConstant.js';\nimport { ssrHydrateByOpcodes } from '../opcodes.js';\nimport { __pendingListUpdates } from '../pendingListUpdates.js';\nimport { __root, setRoot } from '../root.js';\nimport { applyRefQueue } from '../snapshot/workletRef.js';\nimport { SnapshotInstance, __page, setupPage } from '../snapshot.js';\nimport { isEmptyObject } from '../utils.js';\nimport { markTiming, setPipeline } from './performance.js';\nfunction ssrEncode() {\n    const { __opcodes } = __root;\n    delete __root.__opcodes;\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const oldToJSON = SnapshotInstance.prototype.toJSON;\n    SnapshotInstance.prototype.toJSON = function () {\n        return [\n            this.type,\n            this.__id,\n            this.__elements,\n        ];\n    };\n    try {\n        return JSON.stringify({ __opcodes, __root_values: __root.__values });\n    }\n    finally {\n        SnapshotInstance.prototype.toJSON = oldToJSON;\n    }\n}\nfunction ssrHydrate(info) {\n    const nativePage = __GetPageElement();\n    if (!nativePage) {\n        throw new Error('SSR Hydration Failed! Please check if the SSR content loaded successfully!');\n    }\n    resetJSReady();\n    setupPage(nativePage);\n    const refsMap = __GetTemplateParts(nativePage);\n    const { __opcodes, __root_values } = JSON.parse(info);\n    if (__root_values) {\n        __root.setAttribute('values', __root_values);\n    }\n    ssrHydrateByOpcodes(__opcodes, __root, refsMap);\n    __root.__elements = [nativePage];\n    __root.__element_root = nativePage;\n}\nfunction injectCalledByNative() {\n    if (process.env['NODE_ENV'] !== 'test' && __FIRST_SCREEN_SYNC_TIMING__ !== 'jsReady' && __ENABLE_SSR__) {\n        throw new Error('`firstScreenSyncTiming` must be `jsReady` when SSR is enabled');\n    }\n    const calledByNative = {\n        renderPage,\n        updatePage,\n        updateGlobalProps,\n        getPageData: function () {\n            return null;\n        },\n        removeComponents: function () { },\n        ...(__ENABLE_SSR__ ? { ssrEncode, ssrHydrate } : {}),\n    };\n    Object.assign(globalThis, calledByNative);\n    Object.assign(globalThis, {\n        [LifecycleConstant.jsReady]: jsReady,\n    });\n}\nfunction renderPage(data) {\n    // reset `jsReady` state\n    resetJSReady();\n    lynx.__initData = data ?? {};\n    setupPage(__CreatePage('0', 0));\n    __root.ensureElements();\n    renderMainThread();\n    // always call this before `__FlushElementTree`\n    // (There is an implicit `__FlushElementTree` in `renderPage`)\n    __pendingListUpdates.flush();\n    applyRefQueue();\n    if (__FIRST_SCREEN_SYNC_TIMING__ === 'immediately') {\n        jsReady();\n    }\n}\nfunction updatePage(data, options) {\n    if (options?.reloadTemplate) {\n        reloadMainThread(data, options);\n        return;\n    }\n    if (options?.resetPageData) {\n        lynx.__initData = {};\n    }\n    if (typeof data == 'object' && !isEmptyObject(data)) {\n        lynx.__initData ??= {};\n        Object.assign(lynx.__initData, data);\n    }\n    const flushOptions = options ?? {};\n    if (!isJSReady) {\n        const oldRoot = __root;\n        setRoot(new SnapshotInstance('root'));\n        __root.__jsx = oldRoot.__jsx;\n        setPipeline(options?.pipelineOptions);\n        markTiming('updateDiffVdomStart');\n        {\n            __pendingListUpdates.clear();\n            renderMainThread();\n            // As said by codename `jsReadyEventIdSwap`, this swap will only be used for event remap,\n            // because ref & unref cause by previous render will be ignored\n            hydrate(oldRoot, __root, { skipUnRef: true, swap: jsReadyEventIdSwap });\n            // always call this before `__FlushElementTree`\n            __pendingListUpdates.flush();\n            applyRefQueue();\n        }\n        flushOptions.triggerDataUpdated = true;\n        markTiming('updateDiffVdomEnd');\n    }\n    __FlushElementTree(__page, flushOptions);\n}\nfunction updateGlobalProps(_data, options) {\n    if (options) {\n        __FlushElementTree(__page, options);\n    }\n    else {\n        __FlushElementTree();\n    }\n}\n/**\n * @internal\n */\nexport { injectCalledByNative };\n//# sourceMappingURL=calledByNative.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\n/* eslint-disable */\nimport { Component } from 'preact';\nimport { PerfSpecificKey, markTimingLegacy } from './performance.js';\nimport { globalFlushOptions } from '../lifecycle/patch/commit.js';\nimport { NEXT_STATE } from '../renderToOpcodes/constants.js';\nif (__JS__) {\n    function reportRefDeprecationError(fnName, newFnName) {\n        if (!__DISABLE_CREATE_SELECTOR_QUERY_INCOMPATIBLE_WARNING__) {\n            lynx.reportError(new Error(`${fnName} is deprecated and has different behavior in ReactLynx 3.0, please use ref or ${newFnName} instead.`));\n        }\n    }\n    const __Component = Component;\n    __Component.prototype._reactAppInstance = lynxCoreInject.tt;\n    __Component.prototype.getNodeRef = function (a, b) {\n        reportRefDeprecationError('getNodeRef', 'lynx.createSelectorQuery');\n        // @ts-expect-error hack lynx-kernel\n        return lynxCoreInject.tt._reactLynx.ReactComponent.prototype.getNodeRef\n            .call({\n            _type: '',\n            // @ts-expect-error hack lynx-kernel\n            _nativeApp: lynxCoreInject.tt._nativeApp,\n            // @ts-expect-error hack lynx-kernel\n            _uiModule: lynxCoreInject.tt._nativeApp.nativeModuleProxy.LynxUIMethodModule,\n            _reactAppInstance: lynxCoreInject.tt,\n        }, a, b);\n    };\n    __Component.prototype.getNodeRefFromRoot = function (a) {\n        reportRefDeprecationError('getNodeRefFromRoot', 'lynx.createSelectorQuery');\n        // @ts-expect-error hack lynx-kernel\n        return lynxCoreInject.tt._reactLynx.ReactComponent.prototype\n            .getNodeRefFromRoot.call({\n            _type: '',\n            // @ts-expect-error hack lynx-kernel\n            _nativeApp: lynxCoreInject.tt._nativeApp,\n            // @ts-expect-error hack lynx-kernel\n            _uiModule: lynxCoreInject.tt._nativeApp.nativeModuleProxy.LynxUIMethodModule,\n            _reactAppInstance: lynxCoreInject.tt,\n        }, a);\n    };\n    __Component.prototype.registerModule = function (name, module) {\n        this._reactAppInstance.registerModule(name, module);\n    };\n    __Component.prototype.getJSModule = function (name) {\n        return this._reactAppInstance.getJSModule(name);\n    };\n    __Component.prototype.addGlobalEventListener = function (eventName, callback, context) {\n        return this._reactAppInstance.getJSModule('GlobalEventEmitter').addListener(eventName, callback, context);\n    };\n    __Component.prototype.getElementById = function (id) {\n        reportRefDeprecationError('getElementById', 'lynx.getElementById');\n        return lynx.getElementById(id);\n    };\n    __Component.prototype.GlobalEventEmitter = lynxCoreInject.tt.GlobalEventEmitter;\n    __Component.prototype.createSelectorQuery = function () {\n        reportRefDeprecationError('createSelectorQuery on component instance', 'lynx.createSelectorQuery');\n        return lynx.createSelectorQuery();\n    };\n    const oldSetState = __Component.prototype.setState;\n    __Component.prototype.setState = function (state, callback) {\n        oldSetState.call(this, state, callback);\n        // @ts-ignore\n        const timingFlag = this[NEXT_STATE][PerfSpecificKey];\n        if (timingFlag) {\n            globalFlushOptions.__lynx_timing_flag = timingFlag;\n            markTimingLegacy('updateSetStateTrigger', timingFlag);\n            this[NEXT_STATE][PerfSpecificKey] = '';\n        }\n    };\n}\n//# sourceMappingURL=component.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { loadLazyBundle } from './lazy-bundle.js';\nexport function loadDynamicJS(url) {\n    if (__LEPUS__) {\n        _ReportError(new Error(`A dynamic import (to \"${url}\") is leaked to Lepus bundle.`), { errorCode: 202 });\n        // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n        return Promise.reject();\n    }\n    return new Promise((resolve, reject) => {\n        lynx.requireModuleAsync(url, (err, data) => {\n            if (err) {\n                reject(err);\n            }\n            else {\n                resolve(data);\n            }\n        });\n    });\n}\nexport function __dynamicImport(url, options) {\n    const t = options?.with?.type;\n    if (t === 'component' || t === 'tsx' || t === 'jsx') {\n        return loadLazyBundle(url);\n    }\n    else {\n        return loadDynamicJS(url);\n    }\n}\n//# sourceMappingURL=dynamic-js.js.map","export function setupLynxEnv() {\n    if (!__LEPUS__) {\n        const { initData, updateData } = lynxCoreInject.tt._params;\n        lynx.__initData = { ...initData, ...updateData };\n        lynx.registerDataProcessors = function () { };\n    }\n    if (__LEPUS__) {\n        lynx.__initData = {\n        /* available only in renderPage */\n        };\n        // @ts-expect-error no type for lynx.SystemInfo\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        globalThis.SystemInfo = lynx.SystemInfo ?? {};\n        lynx.reportError = function (e) {\n            const error = e instanceof Error ? e : new Error(JSON.stringify(e));\n            _ReportError(error, {\n                errorCode: 1101, // ErrCode::LYNX_ERROR_CODE_LEPUS in Lynx/base/debug/error_code.h\n            });\n        };\n        lynx.triggerGlobalEventFromLepus = function (eventName, params) {\n            __OnLifecycleEvent(['globalEventFromLepus', [eventName, params]]);\n        };\n        {\n            // eslint-disable-next-line unicorn/consistent-function-scoping\n            function __name(empty) {\n                return `Native${empty}Modules`;\n            }\n            // TODO(hongzhiyuan.hzy): make sure this is run before any other code (especially code access `NativeModules`)\n            // @ts-expect-error hack\n            if (typeof globalThis[__name('')] === 'undefined') {\n                // @ts-expect-error hack\n                globalThis[__name('')] = undefined;\n            }\n        }\n        lynx.registerDataProcessors = function (dataProcessorDefinition) {\n            let hasDefaultDataProcessorExecuted = false;\n            globalThis.processData = (data, processorName) => {\n                if (__PROFILE__) {\n                    console.profile('processData');\n                }\n                let r;\n                try {\n                    if (processorName) {\n                        r = dataProcessorDefinition?.dataProcessors?.[processorName]?.(data) ?? data;\n                    }\n                    else {\n                        r = dataProcessorDefinition?.defaultDataProcessor?.(data) ?? data;\n                    }\n                }\n                catch (e) {\n                    lynx.reportError(e);\n                    // when there is an error\n                    // we should perform like dataProcessor returns nothing\n                    // so use `{}` rather than `data`\n                    r = {};\n                }\n                if (__PROFILE__) {\n                    console.profileEnd();\n                }\n                if (hasDefaultDataProcessorExecuted === false) {\n                    // @ts-expect-error todo: add types to i18n logic\n                    if (globalThis.__I18N_RESOURCE_TRANSLATION__) {\n                        r = {\n                            ...r,\n                            // @ts-expect-error todo: add types to i18n logic\n                            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                            __I18N_RESOURCE_TRANSLATION__: globalThis.__I18N_RESOURCE_TRANSLATION__,\n                        };\n                    }\n                    // @ts-expect-error todo: add types to __EXTRACT_STR__\n                    if (__EXTRACT_STR__) {\n                        r = {\n                            ...r,\n                            // @ts-expect-error todo: add types to __EXTRACT_STR__\n                            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                            _EXTRACT_STR: __EXTRACT_STR_IDENT_FLAG__,\n                        };\n                    }\n                }\n                if (processorName) { }\n                else {\n                    hasDefaultDataProcessorExecuted = true;\n                }\n                return r;\n            };\n        };\n        // register empty DataProcessors to make sure `globalThis.processData` is set\n        lynx.registerDataProcessors();\n    }\n}\n//# sourceMappingURL=env.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { snapshotInstanceManager } from '../snapshot.js';\nfunction injectLepusMethods() {\n    Object.assign(globalThis, {\n        getUniqueIdListBySnapshotId,\n        getSnapshotIdByUniqueId,\n    });\n}\n/**\n * Get the list of `unique_id` of the fiber element by the SnapshotInstance `__id`.\n */\nfunction getUniqueIdListBySnapshotId({ snapshotId }) {\n    const si = snapshotInstanceManager.values.get(snapshotId);\n    if (si?.__elements?.length) {\n        const uniqueIdList = [];\n        for (const element of si.__elements) {\n            const uniqueId = __GetElementUniqueID(element);\n            uniqueIdList.push(uniqueId);\n        }\n        return {\n            uniqueIdList,\n        };\n    }\n    return null;\n}\n/**\n * Get the SnapshotInstance `__id` of the fiber element by the `unique_id`.\n */\nfunction getSnapshotIdByUniqueId({ uniqueId }) {\n    for (const si of snapshotInstanceManager.values.values()) {\n        if (si?.__elements?.length) {\n            for (const element of si.__elements) {\n                const unique_id = __GetElementUniqueID(element);\n                if (unique_id === uniqueId) {\n                    return {\n                        snapshotId: si.__id,\n                    };\n                }\n            }\n        }\n    }\n    return null;\n}\n/**\n * @internal\n */\nexport { injectLepusMethods };\n//# sourceMappingURL=injectLepusMethods.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\n/**\n * To make code below works\n * const App1 = lazy(() => import(\"./x\").then(({App1}) => ({default: App1})))\n * const App2 = lazy(() => import(\"./x\").then(({App2}) => ({default: App2})))\n * @internal\n */\nexport const makeSyncThen = function (result) {\n    return function (onF, _onR) {\n        if (onF) {\n            let ret;\n            try {\n                ret = onF(result);\n            }\n            catch (e) {\n                // if (onR) {\n                //   return Promise.resolve(onR(e));\n                // }\n                return Promise.reject(e);\n            }\n            if (ret && typeof ret.then === 'function' /* `thenable` object */) {\n                // lazy(() =>\n                //   import(\"./x\").then(() => new Promise(...))\n                // )\n                // Calling `then` and passing a callback is standard behavior\n                // but in Lepus runtime the callback will never be called\n                // So can be simplified to code below\n                return ret;\n                // TODO(hongzhiyuan.hzy): Avoid warning that cannot be turned-off, so the warning is commented\n                // lynx.reportError(\n                //   new Error(\n                //     'You returned a Promise in promise-chain of lazy-bundle import (eg. `import(\"./x\").then(() => new Promise(...))`), which will cause related Component unavailable at first-screen, '\n                //   ),\n                //   { level: \"warning\" }\n                // );\n            }\n            const p = Promise.resolve(ret);\n            const then = makeSyncThen(ret);\n            p.then = then;\n            return p;\n        }\n        return this;\n    };\n};\n/**\n * Load dynamic component from source. Designed to be used with `lazy`.\n * @param source - where dynamic component template.js locates\n * @returns\n * @public\n */\nexport const loadLazyBundle = /*#__PURE__*/ (() => {\n    lynx.loadLazyBundle = loadLazyBundle;\n    function loadLazyBundle(source) {\n        if (__LEPUS__) {\n            const query = __QueryComponent(source);\n            let result;\n            try {\n                result = query.evalResult;\n            }\n            catch (e) {\n                // Here we cannot return a rejected promise\n                // (which will eventually be an unhandled rejection and cause unnecessary redbox)\n                // But we still need a object in shape of Promise\n                // So we return a Promise which will never resolve or reject,\n                // which fit our principle \"lepus run only once at first-screen\" better\n                return new Promise(() => { });\n            }\n            const r = Promise.resolve(result);\n            // Why we should modify the implementation of `then`?\n            // We should make it `sync` so lepus first-screen render can use result above instantly\n            // We also should keep promise shape\n            r.then = makeSyncThen(result);\n            return r;\n        }\n        else if (__JS__) {\n            const resolver = withSyncResolvers();\n            const callback = result => {\n                const { code, detail } = result;\n                if (code === 0) {\n                    const { schema } = detail;\n                    const exports = lynxCoreInject.tt.getDynamicComponentExports(schema);\n                    // `code === 0` means that the lazy bundle has been successfully parsed. However,\n                    // its javascript files may still fail to run, which would prevent the retrieval of the exports object.\n                    if (exports) {\n                        resolver.resolve(exports);\n                        return;\n                    }\n                }\n                resolver.reject(new Error('Lazy bundle load failed: ' + JSON.stringify(result)));\n            };\n            if (typeof lynx.QueryComponent === 'function') {\n                lynx.QueryComponent(source, callback);\n            }\n            else {\n                lynx.getNativeLynx().QueryComponent(source, callback);\n            }\n            if (resolver.result !== null) {\n                const p = Promise.resolve(resolver.result);\n                p.then = makeSyncThen(resolver.result);\n                return p;\n            }\n            else if (resolver.error === null) {\n                return new Promise((_resolve, _reject) => {\n                    resolver.resolve = _resolve;\n                    resolver.reject = _reject;\n                });\n            }\n            else {\n                return Promise.reject(resolver.error);\n            }\n        }\n        throw new Error('unreachable');\n    }\n    return loadLazyBundle;\n})();\nfunction withSyncResolvers() {\n    'background-only';\n    const resolver = {\n        resolve: (result) => {\n            resolver.result = result;\n        },\n        reject: (error) => {\n            resolver.error = error;\n        },\n        result: null,\n        error: null,\n    };\n    return resolver;\n}\n//# sourceMappingURL=lazy-bundle.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { options } from 'preact';\nimport { __globalSnapshotPatch } from '../lifecycle/patch/snapshotPatch.js';\nimport { RENDER_COMPONENT, ROOT } from '../renderToOpcodes/constants.js';\nimport { hook, isSdkVersionGt } from '../utils.js';\nconst PerformanceTimingKeys = [\n    'updateSetStateTrigger',\n    'updateDiffVdomStart',\n    'updateDiffVdomEnd',\n    // updateSetStateTrigger, updateDiffVdomStart and updateDiffVdomEnd is deprecated\n    'diffVdomStart',\n    'diffVdomEnd',\n    'packChangesStart',\n    'packChangesEnd',\n    'parseChangesStart',\n    'parseChangesEnd',\n    'patchChangesStart',\n    'patchChangesEnd',\n    'hydrateParseSnapshotStart',\n    'hydrateParseSnapshotEnd',\n    'mtsRenderStart',\n    'mtsRenderEnd',\n];\nconst PerformanceTimingFlags = {\n    reactLynxHydrate: 'react_lynx_hydrate',\n};\nconst PipelineOrigins = {\n    reactLynxHydrate: 'reactLynxHydrate',\n    updateTriggeredByBts: 'updateTriggeredByBts',\n};\n/**\n * @deprecated used by old timing api(setState timing flag)\n */\nconst PerfSpecificKey = '__lynx_timing_flag';\nlet timingFlag;\nlet shouldMarkDiffVdomStart = false;\nlet shouldMarkDiffVdomEnd = false;\nlet globalPipelineOptions;\n/**\n * @deprecated used by old timing api(setState timing flag)\n */\nfunction markTimingLegacy(key, timingFlag_) {\n    switch (key) {\n        case 'updateSetStateTrigger': {\n            shouldMarkDiffVdomStart = true;\n            shouldMarkDiffVdomEnd = true;\n            timingFlag = timingFlag_;\n            break;\n        }\n        case 'updateDiffVdomStart': {\n            /* v8 ignore start */\n            if (!shouldMarkDiffVdomStart) {\n                return;\n            }\n            /* v8 ignore stop */\n            shouldMarkDiffVdomStart = false;\n            break;\n        }\n        case 'updateDiffVdomEnd': {\n            if (!shouldMarkDiffVdomEnd) {\n                return;\n            }\n            shouldMarkDiffVdomEnd = false;\n            break;\n        }\n    }\n    lynx.getNativeApp().markTiming?.(timingFlag, key);\n}\nfunction beginPipeline(needTimestamps, pipelineOrigin, timingFlag) {\n    globalPipelineOptions = lynx.performance?._generatePipelineOptions?.();\n    if (globalPipelineOptions) {\n        globalPipelineOptions.needTimestamps = needTimestamps;\n        globalPipelineOptions.pipelineOrigin = pipelineOrigin;\n        globalPipelineOptions.dsl = 'reactLynx';\n        switch (pipelineOrigin) {\n            case PipelineOrigins.reactLynxHydrate:\n                globalPipelineOptions.stage = 'hydrate';\n                break;\n            case PipelineOrigins.updateTriggeredByBts:\n                globalPipelineOptions.stage = 'update';\n                break;\n        }\n        if (isSdkVersionGt(3, 0)) {\n            lynx.performance?._onPipelineStart?.(globalPipelineOptions.pipelineID, globalPipelineOptions);\n        }\n        else {\n            lynx.performance?._onPipelineStart?.(globalPipelineOptions.pipelineID);\n        }\n        if (timingFlag) {\n            lynx.performance?._bindPipelineIdWithTimingFlag?.(globalPipelineOptions.pipelineID, timingFlag);\n        }\n    }\n}\nfunction setPipeline(pipeline) {\n    globalPipelineOptions = pipeline;\n}\nfunction markTiming(timestampKey, force) {\n    if (globalPipelineOptions && (force || globalPipelineOptions.needTimestamps)) {\n        lynx.performance?._markTiming?.(globalPipelineOptions.pipelineID, timestampKey);\n    }\n}\nfunction initTimingAPI() {\n    // eslint-disable-next-line unicorn/consistent-function-scoping\n    const helper = () => {\n        // check `__globalSnapshotPatch` to make sure this only runs after hydrate\n        if (__JS__ && __globalSnapshotPatch) {\n            if (!globalPipelineOptions) {\n                beginPipeline(false, PipelineOrigins.updateTriggeredByBts);\n                markTiming('diffVdomStart', true);\n            }\n            if (shouldMarkDiffVdomStart) {\n                markTimingLegacy('updateDiffVdomStart');\n            }\n        }\n    };\n    hook(options, RENDER_COMPONENT, (old, vnode, c) => {\n        helper();\n        /* v8 ignore start */\n        if (old) {\n            old(vnode, c);\n        }\n        /* v8 ignore stop */\n    });\n    hook(options, ROOT, (old, vnode, parentDom) => {\n        helper();\n        /* v8 ignore start */\n        if (old) {\n            old(vnode, parentDom);\n        }\n        /* v8 ignore stop */\n    });\n}\n/**\n * @internal\n */\nexport { PerformanceTimingFlags, PipelineOrigins, PerfSpecificKey, markTimingLegacy, initTimingAPI, beginPipeline, markTiming, setPipeline, globalPipelineOptions, };\n//# sourceMappingURL=performance.js.map","// Copyright 2025 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { options } from 'preact';\nimport { COMPONENT, DIFF2, FORCE } from '../renderToOpcodes/constants.js';\nexport function runWithForce(cb) {\n    const oldDiff = options[DIFF2];\n    options[DIFF2] = (vnode, oldVNode) => {\n        /* v8 ignore start */\n        if (oldDiff) {\n            oldDiff(vnode, oldVNode);\n        }\n        /* v8 ignore stop */\n        const c = oldVNode[COMPONENT];\n        if (c) {\n            c[FORCE] = true;\n        }\n        else {\n            // mount phase of a new Component\n            // `isNew` is true, no need to set FORCE\n        }\n    };\n    try {\n        cb();\n    }\n    finally {\n        options[DIFF2] = oldDiff;\n    }\n}\n//# sourceMappingURL=runWithForce.js.map","// Copyright 2025 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { Suspense as PreactSuspense, createElement as createElementBackground } from 'preact/compat';\nimport { useRef } from 'preact/hooks';\nimport { createElement as createElementMainThread } from '@lynx-js/react/lepus';\nimport { globalBackgroundSnapshotInstancesToRemove } from '../lifecycle/patch/commit.js';\nexport const Suspense = ({ children, fallback }) => {\n    const __createElement = (__MAIN_THREAD__ ? createElementMainThread : createElementBackground);\n    const childrenRef = useRef();\n    // @ts-expect-error wrapper is a valid element type\n    const newChildren = __createElement('wrapper', {\n        ref: (bsi) => {\n            if (bsi) {\n                childrenRef.current = bsi;\n            }\n        },\n    }, children);\n    // @ts-expect-error wrapper is a valid element type\n    const newFallback = __createElement('wrapper', {\n        ref: (bsi) => {\n            if (bsi && childrenRef.current) {\n                const i = globalBackgroundSnapshotInstancesToRemove.indexOf(childrenRef.current.__id);\n                if (i !== -1) {\n                    globalBackgroundSnapshotInstancesToRemove.splice(i, 1);\n                }\n                childrenRef.current = undefined;\n            }\n        },\n    }, fallback);\n    return __createElement(PreactSuspense, { fallback: newFallback }, newChildren);\n};\n//# sourceMappingURL=suspense.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { hydrate } from './hydrate.js';\nimport { componentAtIndexFactory, enqueueComponentFactory, gRecycleMap, gSignMap } from './list.js';\nimport { CHILDREN } from './renderToOpcodes/constants.js';\nimport { SnapshotInstance } from './snapshot.js';\nvar Opcode;\n(function (Opcode) {\n    Opcode[Opcode[\"Begin\"] = 0] = \"Begin\";\n    Opcode[Opcode[\"End\"] = 1] = \"End\";\n    Opcode[Opcode[\"Attr\"] = 2] = \"Attr\";\n    Opcode[Opcode[\"Text\"] = 3] = \"Text\";\n})(Opcode || (Opcode = {}));\nexport function ssrHydrateByOpcodes(opcodes, into, refMap) {\n    let top = into;\n    const stack = [into];\n    for (let i = 0; i < opcodes.length;) {\n        const opcode = opcodes[i];\n        switch (opcode) {\n            case Opcode.Begin: {\n                const p = top;\n                const [type, __id, elements] = opcodes[i + 1];\n                top = new SnapshotInstance(type, __id);\n                top.__pendingElements = elements;\n                p.insertBefore(top);\n                stack.push(top);\n                i += 2;\n                break;\n            }\n            case Opcode.End: {\n                // @ts-ignore\n                top[CHILDREN] = undefined;\n                top.__elements = top.__pendingElements.map(({ ssrID }) => refMap[ssrID]);\n                top.__element_root = top.__elements[0];\n                delete top.__pendingElements;\n                if (top.__snapshot_def.isListHolder) {\n                    const listElement = top.__element_root;\n                    const listElementUniqueID = __GetElementUniqueID(listElement);\n                    const signMap = gSignMap[listElementUniqueID] = new Map();\n                    gRecycleMap[listElementUniqueID] = new Map();\n                    const enqueueFunc = enqueueComponentFactory();\n                    const [componentAtIndex, componentAtIndexes] = componentAtIndexFactory(top.childNodes, hydrate);\n                    for (const child of top.childNodes) {\n                        if (child.__element_root) {\n                            const childElementUniqueID = __GetElementUniqueID(child.__element_root);\n                            signMap.set(childElementUniqueID, child);\n                            enqueueFunc(listElement, listElementUniqueID, childElementUniqueID);\n                        }\n                    }\n                    __UpdateListCallbacks(listElement, componentAtIndex, enqueueFunc, componentAtIndexes);\n                }\n                stack.pop();\n                const p = stack[stack.length - 1];\n                top = p;\n                i += 1;\n                break;\n            }\n            case Opcode.Attr: {\n                const key = opcodes[i + 1];\n                const value = opcodes[i + 2];\n                top.setAttribute(key, value);\n                i += 3;\n                break;\n            }\n            case Opcode.Text: {\n                const [[type, __id, elements], text] = opcodes[i + 1];\n                const s = new SnapshotInstance(type, __id);\n                s.setAttribute(0, text);\n                top.insertBefore(s);\n                s.__elements = elements.map(({ ssrID }) => refMap[ssrID]);\n                s.__element_root = s.__elements[0];\n                i += 2;\n                break;\n            }\n        }\n    }\n}\nexport function renderOpcodesInto(opcodes, into) {\n    let top = into;\n    const stack = [into];\n    for (let i = 0; i < opcodes.length;) {\n        const opcode = opcodes[i];\n        switch (opcode) {\n            case Opcode.Begin: {\n                const p = top;\n                top = opcodes[i + 1];\n                // @ts-ignore\n                if (top.__parent) {\n                    // already inserted\n                    top = new SnapshotInstance(top.type);\n                    opcodes[i + 1] = top;\n                }\n                p.insertBefore(top);\n                stack.push(top);\n                i += 2;\n                break;\n            }\n            case Opcode.End: {\n                // @ts-ignore\n                top[CHILDREN] = undefined;\n                stack.pop();\n                const p = stack[stack.length - 1];\n                top = p;\n                i += 1;\n                break;\n            }\n            case Opcode.Attr: {\n                const key = opcodes[i + 1];\n                const value = opcodes[i + 2];\n                top.setAttribute(key, value);\n                i += 3;\n                break;\n            }\n            case Opcode.Text: {\n                const text = opcodes[i + 1];\n                const s = new SnapshotInstance(null);\n                if (__ENABLE_SSR__) {\n                    // We need store the just created SnapshotInstance, or it will be lost when we leave the function\n                    opcodes[i + 1] = [s, text];\n                }\n                s.setAttribute(0, text);\n                top.insertBefore(s);\n                i += 2;\n                break;\n            }\n        }\n    }\n}\n//# sourceMappingURL=opcodes.js.map","// Copyright 2025 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nexport const __pendingListUpdates = {\n    values: {},\n    clear() {\n        this.values = {};\n    },\n    flush() {\n        if (this.values) {\n            Object.values(this.values).forEach(update => {\n                update.flush();\n            });\n            this.clear();\n        }\n    },\n    runWithoutUpdates(cb) {\n        const old = this.values;\n        this.values = null;\n        try {\n            cb();\n        }\n        finally {\n            this.values = old;\n        }\n    },\n};\n//# sourceMappingURL=pendingListUpdates.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nexport const DIFF = '__b';\nexport const DIFF2 = '_diff2';\nexport const RENDER = '__r';\nexport const DIFFED = 'diffed';\nexport const COMMIT = '__c';\nexport const SKIP_EFFECTS = '__s';\nexport const CATCH_ERROR = '__e';\nexport const ROOT = '__';\nexport const RENDER_COMPONENT = 'renderComponent';\n// VNode properties\nexport const COMPONENT = '__c';\nexport const CHILDREN = '__k';\nexport const PARENT = '__';\nexport const MASK = '__m';\nexport const DOM = '__e';\n// Component properties\nexport const VNODE = '__v';\nexport const DIRTY = '__d';\nexport const FORCE = '__e';\nexport const NEXT_STATE = '__s';\nexport const CHILD_DID_SUSPEND = '__c';\nexport const RENDER_CALLBACKS = '__h';\nexport const HOOK = '__h';\n//# sourceMappingURL=constants.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\n/**\n * Implements rendering to opcodes.\n * This module is modified from preact-render-to-string@6.0.3 to generate\n * opcodes instead of HTML strings for Lynx.\n */\n// @ts-nocheck\nimport { Fragment, h, options } from 'preact';\nimport { CHILDREN, COMMIT, COMPONENT, DIFF, DIFF2, DIFFED, DIRTY, NEXT_STATE, PARENT, RENDER, SKIP_EFFECTS, VNODE, } from './constants.js';\n/** @typedef {import('preact').VNode} VNode */\nconst EMPTY_ARR = [];\nconst isArray = /* @__PURE__ */ Array.isArray;\nconst assign = /* @__PURE__ */ Object.assign;\n// Global state for the current render pass\nlet beforeDiff, beforeDiff2, afterDiff, renderHook, ummountHook;\n/**\n * Render Preact JSX + Components to an HTML string.\n * @param {VNode} vnode\tJSX Element / VNode to render\n * @param {object} [context] Initial root context object\n */\nexport function renderToString(vnode, context) {\n    // Performance optimization: `renderToString` is synchronous and we\n    // therefore don't execute any effects. To do that we pass an empty\n    // array to `options._commit` (`__c`). But we can go one step further\n    // and avoid a lot of dirty checks and allocations by setting\n    // `options._skipEffects` (`__s`) too.\n    const previousSkipEffects = options[SKIP_EFFECTS];\n    options[SKIP_EFFECTS] = true;\n    // store options hooks once before each synchronous render call\n    beforeDiff = options[DIFF];\n    beforeDiff2 = options[DIFF2];\n    afterDiff = options[DIFFED];\n    renderHook = options[RENDER];\n    ummountHook = options.unmount;\n    const parent = h(Fragment, null);\n    parent[CHILDREN] = [vnode];\n    const opcodes = [];\n    try {\n        _renderToString(vnode, context || EMPTY_OBJ, false, undefined, parent, opcodes, 0);\n    }\n    finally {\n        // options._commit, we don't schedule any effects in this library right now,\n        // so we can pass an empty queue to this hook.\n        if (options[COMMIT])\n            options[COMMIT](vnode, EMPTY_ARR);\n        options[SKIP_EFFECTS] = previousSkipEffects;\n        EMPTY_ARR.length = 0;\n    }\n    return opcodes;\n}\n// Installed as setState/forceUpdate for function components\nfunction markAsDirty() {\n    this.__d = true;\n}\nconst EMPTY_OBJ = {};\nexport const __OpBegin = 0;\nexport const __OpEnd = 1;\nexport const __OpAttr = 2;\nexport const __OpText = 3;\n/**\n * @param {VNode} vnode\n * @param {Record<string, unknown>} context\n */\nfunction renderClassComponent(vnode, context) {\n    const type = /** @type {import(\"preact\").ComponentClass<typeof vnode.props>} */ (vnode.type);\n    let c;\n    if (vnode[COMPONENT]) {\n        c = vnode[COMPONENT];\n        c.state = c[NEXT_STATE];\n    }\n    else {\n        c = new type(vnode.props, context);\n    }\n    vnode[COMPONENT] = c;\n    c[VNODE] = vnode;\n    c.props = vnode.props;\n    c.context = context;\n    // turn off stateful re-rendering:\n    c[DIRTY] = true;\n    if (c.state == null)\n        c.state = EMPTY_OBJ;\n    if (c[NEXT_STATE] == null) {\n        c[NEXT_STATE] = c.state;\n    }\n    if (type.getDerivedStateFromProps) {\n        c.state = assign({}, c.state, type.getDerivedStateFromProps(c.props, c.state));\n    }\n    if (renderHook)\n        renderHook(vnode);\n    return c.render(c.props, c.state, context);\n}\n/**\n * Recursively render VNodes to HTML.\n * @param {VNode|any} vnode\n * @param {any} context\n * @param {boolean} isSvgMode\n * @param {any} selectValue\n * @param {VNode} parent\n * @param opcodes\n */\nfunction _renderToString(vnode, context, isSvgMode, selectValue, parent, opcodes, opcodesLength) {\n    // Ignore non-rendered VNodes/values\n    if (vnode == null || vnode === true || vnode === false || vnode === '') {\n        return;\n    }\n    // Text VNodes: escape as HTML\n    if (typeof vnode !== 'object') {\n        if (typeof vnode === 'function')\n            return;\n        opcodes.push(__OpText, vnode + '');\n        return;\n    }\n    // Recurse into children / Arrays\n    if (isArray(vnode)) {\n        parent[CHILDREN] = vnode;\n        for (let i = 0; i < vnode.length; i++) {\n            const child = vnode[i];\n            if (child == null || typeof child === 'boolean')\n                continue;\n            _renderToString(child, context, isSvgMode, selectValue, parent, opcodes, opcodes.length);\n        }\n        return;\n    }\n    // VNodes have {constructor:undefined} to prevent JSON injection:\n    // if (vnode.constructor !== undefined) return;\n    vnode[PARENT] = parent;\n    if (beforeDiff)\n        beforeDiff(vnode);\n    if (beforeDiff2)\n        beforeDiff2(vnode, EMPTY_OBJ);\n    let type = vnode.type, props = vnode.props, cctx = context, contextType, rendered, component;\n    // Invoke rendering on Components\n    if (typeof type === 'function') {\n        if (type === Fragment) {\n            rendered = props.children;\n        }\n        else {\n            contextType = type.contextType;\n            if (contextType != null) {\n                const provider = context[contextType.__c];\n                cctx = provider ? provider.props.value : contextType.__;\n            }\n            if (type.prototype && typeof type.prototype.render === 'function') {\n                rendered = /**#__NOINLINE__**/ renderClassComponent(vnode, cctx);\n                component = vnode[COMPONENT];\n            }\n            else {\n                component = {\n                    __v: vnode,\n                    props,\n                    context: cctx,\n                    // silently drop state updates\n                    setState: markAsDirty,\n                    forceUpdate: markAsDirty,\n                    __d: true,\n                    // hooks\n                    __h: [],\n                };\n                vnode[COMPONENT] = component;\n                component.constructor = type;\n                component.render = doRender;\n                // If a hook invokes setState() to invalidate the component during rendering,\n                // re-render it up to 25 times to allow \"settling\" of memoized states.\n                // Note:\n                //   This will need to be updated for Preact 11 to use internal.flags rather than component._dirty:\n                //   https://github.com/preactjs/preact/blob/d4ca6fdb19bc715e49fd144e69f7296b2f4daa40/src/diff/component.js#L35-L44\n                let count = 0;\n                while (component[DIRTY] && count++ < 25) {\n                    component[DIRTY] = false;\n                    if (renderHook)\n                        renderHook(vnode);\n                    rendered = component.render(props, component.state, cctx);\n                }\n                component[DIRTY] = true;\n            }\n            if (component.getChildContext != null) {\n                context = assign({}, context, component.getChildContext());\n            }\n        }\n        // When a component returns a Fragment node we flatten it in core, so we\n        // need to mirror that logic here too\n        const isTopLevelFragment = rendered != null && rendered.type === Fragment\n            && rendered.key == null;\n        rendered = isTopLevelFragment ? rendered.props.children : rendered;\n        // Recurse into children before invoking the after-diff hook\n        try {\n            _renderToString(rendered, context, isSvgMode, selectValue, vnode, opcodes, opcodes.length);\n        }\n        catch (e) {\n            if (e && typeof e === 'object' && e.then && component && /* _childDidSuspend */ component.__c) {\n                component.setState({ /* _suspended */ __a: true });\n                if (component[DIRTY]) {\n                    rendered = renderClassComponent(vnode, context);\n                    component = vnode[COMPONENT];\n                    opcodes.length = opcodesLength;\n                    _renderToString(rendered, context, isSvgMode, selectValue, vnode, opcodes, opcodes.length);\n                }\n            }\n            else {\n                throw e;\n            }\n        }\n        finally {\n            if (afterDiff)\n                afterDiff(vnode);\n            vnode[PARENT] = undefined;\n            if (ummountHook)\n                ummountHook(vnode);\n        }\n        return;\n    }\n    let children;\n    opcodes.push(__OpBegin, vnode);\n    for (const name in props) {\n        const v = props[name];\n        switch (name) {\n            case 'children':\n                children = v;\n                continue;\n            // VDOM-specific props\n            /* c8 ignore next 5 */\n            case 'key':\n            case 'ref':\n            case '__self':\n            case '__source':\n                continue;\n            default: { }\n        }\n        // write this attribute to the buffer\n        if (v != null && v !== false && typeof v !== 'function') {\n            opcodes.push(__OpAttr, name, v);\n        }\n    }\n    if (typeof children === 'string' || typeof children === 'number') {\n        // single text child\n        opcodes.push(__OpText, children);\n    }\n    else if (children != null && children !== false && children !== true) {\n        // recurse into this element VNode's children\n        _renderToString(children, context, false, selectValue, vnode, opcodes, opcodes.length);\n    }\n    if (afterDiff)\n        afterDiff(vnode);\n    vnode[PARENT] = undefined;\n    if (ummountHook)\n        ummountHook(vnode);\n    opcodes.push(__OpEnd);\n    return;\n}\n/** The `.render()` method for a PFC backing instance. */\nfunction doRender(props, state, context) {\n    return this.constructor(props, context);\n}\nexport default renderToString;\nexport const render = renderToString;\nexport const renderToStaticMarkup = renderToString;\n//# sourceMappingURL=index.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { BackgroundSnapshotInstance } from './backgroundSnapshot.js';\nimport { SnapshotInstance } from './snapshot.js';\n/**\n * The internal ReactLynx's root.\n * {@link @lynx-js/react!Root | root}.\n */\nlet __root;\nfunction setRoot(root) {\n    __root = root;\n    // A fake ELEMENT_NODE to make preact/debug happy.\n    if (__DEV__ && __root) {\n        __root.nodeType = 1;\n    }\n}\nif (__MAIN_THREAD__) {\n    setRoot(new SnapshotInstance('root'));\n}\nelse if (__BACKGROUND__) {\n    setRoot(new BackgroundSnapshotInstance('root'));\n}\nexport { __root, setRoot };\n//# sourceMappingURL=root.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { SnapshotOperation, __globalSnapshotPatch } from './lifecycle/patch/snapshotPatch.js';\nimport { ListUpdateInfoRecording } from './listUpdateInfo.js';\nimport { __pendingListUpdates } from './pendingListUpdates.js';\nimport { DynamicPartType } from './snapshot/dynamicPartType.js';\nimport { snapshotDestroyList } from './snapshot/list.js';\nimport { unref } from './snapshot/ref.js';\nimport { isDirectOrDeepEqual } from './utils.js';\nexport let __page;\nexport let __pageId = 0;\nexport function setupPage(page) {\n    __page = page;\n    __pageId = __GetElementUniqueID(page);\n}\nexport function clearPage() {\n    __page = undefined;\n    __pageId = 0;\n}\nexport const __DynamicPartChildren_0 = [[DynamicPartType.Children, 0]];\nexport const snapshotManager = {\n    values: /* @__PURE__ */ new Map([\n        [\n            'root',\n            {\n                create() {\n                    /* v8 ignore start */\n                    if (__JS__ && !__DEV__) {\n                        return [];\n                    }\n                    /* v8 ignore stop */\n                    return [__page];\n                },\n                update: [],\n                slot: __DynamicPartChildren_0,\n                isListHolder: false,\n                cssId: 0,\n            },\n        ],\n        [\n            'wrapper',\n            {\n                create() {\n                    /* v8 ignore start */\n                    if (__JS__ && !__DEV__) {\n                        return [];\n                    }\n                    /* v8 ignore stop */\n                    return [__CreateWrapperElement(__pageId)];\n                },\n                update: [],\n                slot: __DynamicPartChildren_0,\n                isListHolder: false,\n            },\n        ],\n        [\n            null,\n            {\n                create() {\n                    /* v8 ignore start */\n                    if (__JS__ && !__DEV__) {\n                        return [];\n                    }\n                    /* v8 ignore stop */\n                    return [__CreateRawText('')];\n                },\n                update: [\n                    ctx => {\n                        /* v8 ignore start */\n                        if (__JS__ && !__DEV__) {\n                            return;\n                        }\n                        /* v8 ignore stop */\n                        if (ctx.__elements) {\n                            __SetAttribute(ctx.__elements[0], 'text', ctx.__values[0]);\n                        }\n                    },\n                ],\n                slot: [],\n                isListHolder: false,\n            },\n        ],\n    ]),\n};\nexport const snapshotInstanceManager = {\n    nextId: 0,\n    values: /* @__PURE__ */ new Map(),\n    clear() {\n        // not resetting `nextId` to prevent id collision\n        this.values.clear();\n    },\n};\nexport const backgroundSnapshotInstanceManager = {\n    nextId: 0,\n    values: /* @__PURE__ */ new Map(),\n    clear() {\n        // not resetting `nextId` to prevent id collision\n        this.values.clear();\n    },\n    updateId(id, newId) {\n        const values = this.values;\n        const si = values.get(id);\n        // For PreactDevtools, on first hydration,\n        // PreactDevtools can get the real snapshot instance id in main-thread\n        if (__DEV__) {\n            lynx.getJSModule('GlobalEventEmitter').emit('onBackgroundSnapshotInstanceUpdateId', [\n                {\n                    backgroundSnapshotInstance: si,\n                    oldId: id,\n                    newId,\n                },\n            ]);\n        }\n        values.delete(id);\n        values.set(newId, si);\n        si.__id = newId;\n    },\n    getValueBySign(str) {\n        const res = str?.split(':');\n        if (!res || (res.length != 2 && res.length != 3)) {\n            throw new Error('Invalid ctx format: ' + str);\n        }\n        const id = Number(res[0]);\n        const expIndex = Number(res[1]);\n        const ctx = this.values.get(id);\n        if (!ctx) {\n            return null;\n        }\n        const spreadKey = res[2];\n        if (res[1] === '__extraProps') {\n            if (spreadKey) {\n                return ctx.__extraProps[spreadKey];\n            }\n            throw new Error('unreachable');\n        }\n        else {\n            if (spreadKey) {\n                return ctx.__values[expIndex][spreadKey];\n            }\n            else {\n                return ctx.__values[expIndex];\n            }\n        }\n    },\n};\nexport function entryUniqID(uniqID, entryName) {\n    return entryName ? `${entryName}:${uniqID}` : uniqID;\n}\nexport function createSnapshot(uniqID, create, update, slot, cssId, entryName, refAndSpreadIndexes) {\n    if (__DEV__ && __JS__\n        // `__globalSnapshotPatch` does not exist before hydration,\n        // so the snapshot of the first screen will not be sent to the main thread.\n        && __globalSnapshotPatch\n        && !snapshotManager.values.has(entryUniqID(uniqID, entryName))\n        // `create` may be `null` when loading a lazy bundle after hydration.\n        && create !== null) {\n        // We only update the lepus snapshot if the `uniqID` is different.\n        // This means that `uniqID` is considered the \"hash\" of the snapshot.\n        // When HMR (Hot Module Replacement) or fast refresh updates occur, `createSnapshot` will be re-executed with the new snapshot definition.\n        __globalSnapshotPatch.push(SnapshotOperation.DEV_ONLY_AddSnapshot, uniqID, \n        // We use `Function.prototype.toString` to serialize the `create` and `update` functions for Lepus.\n        // This allows the updates to be applied to Lepus.\n        // As a result, both the static part (`create`) and the dynamic parts (`update` and `slot`) can be updated.\n        create.toString(), update?.map(f => f.toString()) ?? [], slot, cssId, entryName);\n    }\n    uniqID = entryUniqID(uniqID, entryName);\n    const s = { create, update, slot, cssId, entryName, refAndSpreadIndexes };\n    snapshotManager.values.set(uniqID, s);\n    if (slot && slot[0] && slot[0][0] === DynamicPartType.ListChildren) {\n        s.isListHolder = true;\n    }\n    return uniqID;\n}\nexport function traverseSnapshotInstance(si, callback) {\n    const c = si.childNodes;\n    callback(si);\n    for (const vv of c) {\n        traverseSnapshotInstance(vv, callback);\n    }\n}\nconst DEFAULT_ENTRY_NAME = '__Card__';\nconst DEFAULT_CSS_ID = 0;\n/**\n * The runtime instance of a {@link Snapshot} on the main thread that manages\n * the actual elements and handles updates to dynamic parts.\n *\n * This class is designed to be compatible with Preact's {@link ContainerNode}\n * interface for Preact's renderer to operate upon.\n */\nexport class SnapshotInstance {\n    type;\n    __id;\n    __snapshot_def;\n    __elements;\n    __element_root;\n    __values;\n    __current_slot_index = 0;\n    __worklet_ref_set;\n    __listItemPlatformInfo;\n    __extraProps;\n    constructor(type, id) {\n        this.type = type;\n        this.__snapshot_def = snapshotManager.values.get(type);\n        // Suspense uses 'div'\n        if (!this.__snapshot_def && type !== 'div') {\n            throw new Error('Snapshot not found: ' + type);\n        }\n        id ??= snapshotInstanceManager.nextId -= 1;\n        this.__id = id;\n        snapshotInstanceManager.values.set(id, this);\n    }\n    ensureElements() {\n        const { create, slot, isListHolder, cssId, entryName } = this.__snapshot_def;\n        const elements = create(this);\n        this.__elements = elements;\n        this.__element_root = elements[0];\n        if (cssId === undefined) {\n            // This means either:\n            //   CSS Scope is removed(We only need to call `__SetCSSId` when there is `entryName`)\n            //   Or an old bundle(`__SetCSSId` is called in `create`), we skip calling `__SetCSSId`\n            if (entryName !== DEFAULT_ENTRY_NAME && entryName !== undefined) {\n                __SetCSSId(this.__elements, DEFAULT_CSS_ID, entryName);\n            }\n        }\n        else {\n            // cssId !== undefined\n            if (entryName !== DEFAULT_ENTRY_NAME && entryName !== undefined) {\n                // For lazy bundle, we need add `entryName` to the third params\n                __SetCSSId(this.__elements, cssId, entryName);\n            }\n            else {\n                __SetCSSId(this.__elements, cssId);\n            }\n        }\n        __pendingListUpdates.runWithoutUpdates(() => {\n            const values = this.__values;\n            if (values) {\n                this.__values = undefined;\n                this.setAttribute('values', values);\n            }\n        });\n        if (isListHolder) {\n            // never recurse into list's children\n        }\n        else {\n            let index = 0;\n            let child = this.__firstChild;\n            while (child) {\n                child.ensureElements();\n                const [type, elementIndex] = slot[index];\n                switch (type) {\n                    case DynamicPartType.Slot: {\n                        __ReplaceElement(child.__element_root, elements[elementIndex]);\n                        elements[elementIndex] = child.__element_root;\n                        index++;\n                        break;\n                    }\n                    /* v8 ignore start */\n                    case DynamicPartType.MultiChildren: {\n                        if (__GetTag(elements[elementIndex]) === 'wrapper') {\n                            __ReplaceElement(child.__element_root, elements[elementIndex]);\n                        }\n                        else {\n                            __AppendElement(elements[elementIndex], child.__element_root);\n                        }\n                        index++;\n                        break;\n                    }\n                    /* v8 ignore end */\n                    case DynamicPartType.Children:\n                    case DynamicPartType.ListChildren: {\n                        __AppendElement(elements[elementIndex], child.__element_root);\n                        break;\n                    }\n                }\n                child = child.__nextSibling;\n            }\n        }\n    }\n    unRenderElements() {\n        const { isListHolder } = this.__snapshot_def;\n        this.__elements = undefined;\n        this.__element_root = undefined;\n        if (isListHolder) {\n            // never recurse into list's children\n        }\n        else {\n            let child = this.__firstChild;\n            while (child) {\n                child.unRenderElements();\n                child = child.__nextSibling;\n            }\n        }\n    }\n    takeElements() {\n        const a = Object.create(SnapshotInstance.prototype);\n        a.__id = this.__id;\n        a.__snapshot_def = this.__snapshot_def;\n        a.__values = this.__values;\n        // all clear\n        a.__parent = null;\n        a.__firstChild = null;\n        a.__lastChild = null;\n        a.__nextSibling = null;\n        a.__previousSibling = null;\n        this.childNodes.map(c => c.takeElements()).forEach(node => a.__insertBefore(node));\n        a.__elements = this.__elements;\n        a.__element_root = this.__element_root;\n        this.__elements = undefined;\n        this.__element_root = undefined;\n        return a;\n    }\n    tearDown() {\n        traverseSnapshotInstance(this, v => {\n            v.__parent = null;\n            v.__previousSibling = null;\n            v.__nextSibling = null;\n        });\n    }\n    // onCreate?: () => void;\n    // onAttach?: () => void;\n    // onDetach?: () => void;\n    // onRef?: () => void;\n    // onUnref?: () => void;\n    __parent = null;\n    __firstChild = null;\n    __lastChild = null;\n    __previousSibling = null;\n    __nextSibling = null;\n    get parentNode() {\n        return this.__parent;\n    }\n    get nextSibling() {\n        return this.__nextSibling;\n    }\n    // get isConnected() {\n    //   return !!this.__parent;\n    // }\n    contains(child) {\n        return child.parentNode === this;\n    }\n    get childNodes() {\n        const nodes = [];\n        let node = this.__firstChild;\n        while (node) {\n            nodes.push(node);\n            node = node.__nextSibling;\n        }\n        return nodes;\n    }\n    __insertBefore(node, beforeNode) {\n        // If the node already has a parent, remove it from its current parent\n        if (node.__parent) {\n            node.__parent.__removeChild(node);\n        }\n        // If beforeNode is not provided, add the new node as the last child\n        if (beforeNode) {\n            // If beforeNode is provided, insert the new node before beforeNode\n            if (beforeNode.__previousSibling) {\n                beforeNode.__previousSibling.__nextSibling = node;\n                node.__previousSibling = beforeNode.__previousSibling;\n            }\n            else {\n                this.__firstChild = node;\n                node.__previousSibling = null;\n            }\n            beforeNode.__previousSibling = node;\n            node.__nextSibling = beforeNode;\n            node.__parent = this;\n        }\n        else {\n            if (this.__lastChild) {\n                this.__lastChild.__nextSibling = node;\n                node.__previousSibling = this.__lastChild;\n            }\n            else {\n                this.__firstChild = node;\n                node.__previousSibling = null;\n            }\n            this.__lastChild = node;\n            node.__parent = this;\n            node.__nextSibling = null;\n        }\n    }\n    __removeChild(node) {\n        if (node.__parent !== this) {\n            throw new Error('The node to be removed is not a child of this node.');\n        }\n        if (node.__previousSibling) {\n            node.__previousSibling.__nextSibling = node.__nextSibling;\n        }\n        else {\n            this.__firstChild = node.__nextSibling;\n        }\n        if (node.__nextSibling) {\n            node.__nextSibling.__previousSibling = node.__previousSibling;\n        }\n        else {\n            this.__lastChild = node.__previousSibling;\n        }\n        node.__parent = null;\n        node.__previousSibling = null;\n        node.__nextSibling = null;\n    }\n    insertBefore(newNode, existingNode) {\n        const __snapshot_def = this.__snapshot_def;\n        if (__snapshot_def.isListHolder) {\n            if (__pendingListUpdates.values) {\n                (__pendingListUpdates.values[this.__id] ??= new ListUpdateInfoRecording(this)).onInsertBefore(newNode, existingNode);\n            }\n            this.__insertBefore(newNode, existingNode);\n            return;\n        }\n        const shouldRemove = newNode.__parent === this;\n        this.__insertBefore(newNode, existingNode);\n        const __elements = this.__elements;\n        if (__elements) {\n            if (!newNode.__elements) {\n                newNode.ensureElements();\n            }\n        }\n        else {\n            return;\n        }\n        const count = __snapshot_def.slot.length;\n        if (count === 1) {\n            const [, elementIndex] = __snapshot_def.slot[0];\n            const parent = __elements[elementIndex];\n            if (shouldRemove) {\n                __RemoveElement(parent, newNode.__element_root);\n            }\n            if (existingNode) {\n                __InsertElementBefore(parent, newNode.__element_root, existingNode.__element_root);\n            }\n            else {\n                __AppendElement(parent, newNode.__element_root);\n            }\n        }\n        else if (count > 1) {\n            const index = this.__current_slot_index++;\n            const [s, elementIndex] = __snapshot_def.slot[index];\n            if (s === DynamicPartType.Slot) {\n                __ReplaceElement(newNode.__element_root, __elements[elementIndex]);\n                __elements[elementIndex] = newNode.__element_root;\n                /* v8 ignore start */\n            }\n            else if (s === DynamicPartType.MultiChildren) {\n                if (__GetTag(__elements[elementIndex]) === 'wrapper') {\n                    __ReplaceElement(newNode.__element_root, __elements[elementIndex]);\n                }\n                else {\n                    __AppendElement(__elements[elementIndex], newNode.__element_root);\n                }\n            }\n            /* v8 ignore end */\n        }\n    }\n    removeChild(child) {\n        const __snapshot_def = this.__snapshot_def;\n        if (__snapshot_def.isListHolder) {\n            if (__pendingListUpdates.values) {\n                (__pendingListUpdates.values[this.__id] ??= new ListUpdateInfoRecording(this)).onRemoveChild(child);\n            }\n            this.__removeChild(child);\n            traverseSnapshotInstance(child, v => {\n                snapshotInstanceManager.values.delete(v.__id);\n            });\n            // mark this child as deleted\n            child.__id = 0;\n            return;\n        }\n        unref(child, true);\n        if (this.__elements) {\n            const [, elementIndex] = __snapshot_def.slot[0];\n            __RemoveElement(this.__elements[elementIndex], child.__element_root);\n        }\n        if (child.__snapshot_def.isListHolder) {\n            snapshotDestroyList(child);\n        }\n        this.__removeChild(child);\n        traverseSnapshotInstance(child, v => {\n            v.__parent = null;\n            v.__previousSibling = null;\n            v.__nextSibling = null;\n            delete v.__elements;\n            delete v.__element_root;\n            snapshotInstanceManager.values.delete(v.__id);\n        });\n    }\n    setAttribute(key, value) {\n        if (key === 'values') {\n            const oldValues = this.__values;\n            const values = value;\n            this.__values = values;\n            if (oldValues) {\n                for (let index = 0; index < values.length; index++) {\n                    this.callUpdateIfNotDirectOrDeepEqual(index, oldValues[index], values[index]);\n                }\n            }\n            else {\n                for (let index = 0; index < values.length; index++) {\n                    this.callUpdateIfNotDirectOrDeepEqual(index, undefined, values[index]);\n                }\n            }\n            return;\n        }\n        if (typeof key === 'string') {\n            // for more flexible usage, we allow setting non-indexed attributes\n            (this.__extraProps ??= {})[key] = value;\n            return;\n        }\n        this.__values ??= [];\n        this.callUpdateIfNotDirectOrDeepEqual(key, this.__values[key], this.__values[key] = value);\n    }\n    toJSON() {\n        return {\n            id: this.__id,\n            type: this.type,\n            values: this.__values,\n            extraProps: this.__extraProps,\n            children: this.__firstChild ? this.childNodes : undefined,\n        };\n    }\n    callUpdateIfNotDirectOrDeepEqual(index, oldValue, newValue) {\n        if (isDirectOrDeepEqual(oldValue, newValue)) { }\n        else {\n            this.__snapshot_def.update[index](this, index, oldValue);\n        }\n    }\n}\n//# sourceMappingURL=snapshot.js.map","// Copyright 2025 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\n/**\n * Types of dynamic parts that can be updated in a snapshot\n * These are determined at compile time through static analysis\n */\nexport var DynamicPartType;\n(function (DynamicPartType) {\n    DynamicPartType[DynamicPartType[\"Attr\"] = 0] = \"Attr\";\n    DynamicPartType[DynamicPartType[\"Spread\"] = 1] = \"Spread\";\n    DynamicPartType[DynamicPartType[\"Slot\"] = 2] = \"Slot\";\n    DynamicPartType[DynamicPartType[\"Children\"] = 3] = \"Children\";\n    DynamicPartType[DynamicPartType[\"ListChildren\"] = 4] = \"ListChildren\";\n    DynamicPartType[DynamicPartType[\"MultiChildren\"] = 5] = \"MultiChildren\";\n})(DynamicPartType || (DynamicPartType = {}));\n//# sourceMappingURL=dynamicPartType.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { SnapshotInstance } from '../snapshot.js';\nfunction updateEvent(snapshot, expIndex, _oldValue, elementIndex, eventType, eventName, spreadKey) {\n    const value = snapshot.__values[expIndex];\n    let event;\n    if (!value) {\n        event = undefined;\n    }\n    else if (typeof value === 'string') {\n        event = value;\n    }\n    else {\n        event = `${snapshot.__id}:${expIndex}:${spreadKey}`;\n    }\n    // todo: reuseId?\n    snapshot.__values[expIndex] = event;\n    if (snapshot.__elements) {\n        __AddEvent(snapshot.__elements[elementIndex], eventType, eventName, event);\n    }\n}\nexport { updateEvent };\n//# sourceMappingURL=event.js.map","// Copyright 2025 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { processGesture } from '../gesture/processGesture.js';\nimport { isMainThreadHydrating } from '../lifecycle/patch/isMainThreadHydrating.js';\nimport { SnapshotInstance } from '../snapshot.js';\nexport function updateGesture(snapshot, expIndex, oldValue, elementIndex, workletType) {\n    if (!snapshot.__elements) {\n        return;\n    }\n    if (__PROFILE__) {\n        console.profile('updateGesture');\n    }\n    const value = snapshot.__values[expIndex];\n    if (workletType === 'main-thread') {\n        processGesture(snapshot.__elements[elementIndex], value, oldValue, isMainThreadHydrating);\n    }\n    if (__PROFILE__) {\n        console.profileEnd();\n    }\n}\n//# sourceMappingURL=gesture.js.map","// Copyright 2025 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { hydrate } from '../hydrate.js';\nimport { componentAtIndexFactory, enqueueComponentFactory, gRecycleMap, gSignMap } from '../list.js';\nexport function snapshotCreateList(pageId, _ctx, _expIndex) {\n    const signMap = new Map();\n    const recycleMap = new Map();\n    const [componentAtIndex, componentAtIndexes] = componentAtIndexFactory([], hydrate);\n    const list = __CreateList(pageId, componentAtIndex, enqueueComponentFactory(), {}, componentAtIndexes);\n    const listID = __GetElementUniqueID(list);\n    gSignMap[listID] = signMap;\n    gRecycleMap[listID] = recycleMap;\n    return list;\n}\nexport function snapshotDestroyList(si) {\n    const [, elementIndex] = si.__snapshot_def.slot[0];\n    const list = si.__elements[elementIndex];\n    const listID = __GetElementUniqueID(list);\n    delete gSignMap[listID];\n    delete gRecycleMap[listID];\n}\n//# sourceMappingURL=list.js.map","// Copyright 2025 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { ListUpdateInfoRecording } from '../listUpdateInfo.js';\nimport { __pendingListUpdates } from '../pendingListUpdates.js';\nimport { SnapshotInstance } from '../snapshot.js';\nconst platformInfoVirtualAttributes = /* @__PURE__ */ new Set([\n    'reuse-identifier',\n    'recyclable',\n]);\nconst platformInfoAttributes = /* @__PURE__ */ new Set([\n    'reuse-identifier',\n    'full-span',\n    'item-key',\n    'sticky-top',\n    'sticky-bottom',\n    'estimated-height',\n    'estimated-height-px',\n    'estimated-main-axis-size-px',\n    'recyclable',\n]);\nfunction updateListItemPlatformInfo(ctx, index, oldValue, elementIndex) {\n    const newValue = ctx.__listItemPlatformInfo = ctx.__values[index];\n    if (__pendingListUpdates.values) {\n        const list = ctx.parentNode;\n        if (list?.__snapshot_def.isListHolder) {\n            (__pendingListUpdates.values[list.__id] ??= new ListUpdateInfoRecording(list)).onSetAttribute(ctx, newValue, oldValue);\n        }\n    }\n    // In this updater, unlike `updateSpread`, the shape of the value is guaranteed to be an fixed object.\n    // No adding / removing keys.\n    if (ctx.__elements) {\n        const e = ctx.__elements[elementIndex];\n        const value = ctx.__values[index];\n        for (const k in value) {\n            if (platformInfoVirtualAttributes.has(k)) {\n                continue;\n            }\n            __SetAttribute(e, k, value[k]);\n        }\n    }\n}\nexport { updateListItemPlatformInfo, platformInfoAttributes };\n//# sourceMappingURL=platformInfo.js.map","import { workletUnRef } from './workletRef.js';\nimport { RefProxy } from '../lifecycle/ref/delay.js';\nconst refsToClear = [];\nconst refsToApply = [];\nfunction unref(snapshot, recursive) {\n    snapshot.__worklet_ref_set?.forEach(v => {\n        if (v) {\n            workletUnRef(v);\n        }\n    });\n    snapshot.__worklet_ref_set?.clear();\n    if (recursive) {\n        snapshot.childNodes.forEach(it => {\n            unref(it, recursive);\n        });\n    }\n}\n// This function is modified from preact source code.\nfunction applyRef(ref, value) {\n    const newRef = value && new RefProxy(value);\n    try {\n        if (typeof ref == 'function') {\n            const hasRefUnmount = typeof ref._unmount == 'function';\n            if (hasRefUnmount) {\n                ref._unmount();\n            }\n            if (!hasRefUnmount || newRef != null) {\n                // Store the cleanup function on the function\n                // instance object itself to avoid shape\n                // transitioning vnode\n                ref._unmount = ref(newRef);\n            }\n        }\n        else\n            ref.current = newRef;\n        /* v8 ignore start */\n    }\n    catch (e) {\n        lynx.reportError(e);\n    }\n    /* v8 ignore stop */\n}\nfunction updateRef(snapshot, expIndex, oldValue, elementIndex) {\n    const value = snapshot.__values[expIndex];\n    let ref;\n    if (typeof value === 'string') {\n        ref = value;\n    }\n    else {\n        ref = `react-ref-${snapshot.__id}-${expIndex}`;\n    }\n    snapshot.__values[expIndex] = ref;\n    if (snapshot.__elements && oldValue !== ref) {\n        if (oldValue) {\n            __SetAttribute(snapshot.__elements[elementIndex], oldValue, undefined);\n        }\n        if (ref) {\n            __SetAttribute(snapshot.__elements[elementIndex], ref, 1);\n        }\n    }\n}\nfunction transformRef(ref) {\n    if (ref === undefined || ref === null) {\n        return ref;\n    }\n    if (typeof ref === 'function' || (typeof ref === 'object' && 'current' in ref)) {\n        if ('__ref' in ref) {\n            return ref;\n        }\n        return Object.defineProperty(ref, '__ref', { value: 1 });\n    }\n    throw new Error(`Elements' \"ref\" property should be a function, or an object created `\n        + `by createRef(), but got [${typeof ref}] instead`);\n}\nfunction applyQueuedRefs() {\n    try {\n        for (const ref of refsToClear) {\n            applyRef(ref, null);\n        }\n        for (let i = 0; i < refsToApply.length; i += 2) {\n            const ref = refsToApply[i];\n            const value = refsToApply[i + 1];\n            applyRef(ref, value);\n        }\n    }\n    finally {\n        clearQueuedRefs();\n    }\n}\nfunction queueRefAttrUpdate(oldRef, newRef, snapshotInstanceId, expIndex) {\n    if (oldRef === newRef) {\n        return;\n    }\n    if (oldRef) {\n        refsToClear.push(oldRef);\n    }\n    if (newRef) {\n        refsToApply.push(newRef, [snapshotInstanceId, expIndex]);\n    }\n}\nfunction clearQueuedRefs() {\n    refsToClear.length = 0;\n    refsToApply.length = 0;\n}\n/**\n * @internal\n */\nexport { queueRefAttrUpdate, updateRef, unref, transformRef, applyRef, applyQueuedRefs, clearQueuedRefs };\n//# sourceMappingURL=ref.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { ListUpdateInfoRecording } from '../listUpdateInfo.js';\nimport { __pendingListUpdates } from '../pendingListUpdates.js';\nimport { SnapshotInstance } from '../snapshot.js';\nimport { isDirectOrDeepEqual, isEmptyObject, pick } from '../utils.js';\nimport { updateEvent } from './event.js';\nimport { updateGesture } from './gesture.js';\nimport { platformInfoAttributes, updateListItemPlatformInfo } from './platformInfo.js';\nimport { transformRef, updateRef } from './ref.js';\nimport { updateWorkletEvent } from './workletEvent.js';\nimport { updateWorkletRef } from './workletRef.js';\n// eslint-disable-next-line regexp/no-unused-capturing-group\nconst eventRegExp = /^(([A-Za-z-]*):)?(bind|catch|capture-bind|capture-catch|global-bind)([A-Za-z]+)$/;\nconst eventTypeMap = {\n    bind: 'bindEvent',\n    catch: 'catchEvent',\n    'capture-bind': 'capture-bind',\n    'capture-catch': 'capture-catch',\n    'global-bind': 'global-bindEvent',\n};\nconst noFlattenAttributes = /* @__PURE__ */ new Set([\n    'name',\n    'clip-radius',\n    'overlap',\n    'exposure-scene',\n    'exposure-id',\n]);\nfunction updateSpread(snapshot, index, oldValue, elementIndex) {\n    oldValue ??= {};\n    let newValue = snapshot.__values[index]; // compiler guarantee this must be an object;\n    const list = snapshot.parentNode;\n    if (list?.__snapshot_def.isListHolder) {\n        const oldPlatformInfo = pick(oldValue, platformInfoAttributes);\n        const platformInfo = pick(newValue, platformInfoAttributes);\n        if (!isDirectOrDeepEqual(oldPlatformInfo, platformInfo)) {\n            if (__pendingListUpdates.values) {\n                (__pendingListUpdates.values[list.__id] ??= new ListUpdateInfoRecording(list)).onSetAttribute(snapshot, platformInfo, oldPlatformInfo);\n            }\n            snapshot.__listItemPlatformInfo = platformInfo;\n            // The fakeSnapshot is missing `__parent`, so no `ListUpdateInfoRecording#onSetAttribute` will be called\n            const fakeSnapshot = {\n                __values: {\n                    get [index]() {\n                        return platformInfo;\n                    },\n                },\n                __id: snapshot.__id,\n                __elements: snapshot.__elements,\n            };\n            updateListItemPlatformInfo(fakeSnapshot, index, oldPlatformInfo, elementIndex);\n        }\n    }\n    if (!snapshot.__elements) {\n        return;\n    }\n    if ('__spread' in newValue) {\n        // first screen\n        newValue = transformSpread(snapshot, index, newValue);\n        snapshot.__values[index] = newValue;\n    }\n    const dataset = {};\n    let match = null;\n    for (const key in newValue) {\n        const v = newValue[key];\n        if (v !== oldValue[key]) {\n            if (key === 'className') {\n                __SetClasses(snapshot.__elements[elementIndex], v);\n            }\n            else if (key === 'style') {\n                __SetInlineStyles(snapshot.__elements[elementIndex], v);\n            }\n            else if (key === 'id') {\n                __SetID(snapshot.__elements[elementIndex], v);\n            }\n            else if (key.startsWith('data-')) {\n                // collected below\n            }\n            else if (key === 'ref') {\n                const fakeSnapshot = {\n                    __values: {\n                        get [index]() {\n                            return v;\n                        },\n                        set [index](value) {\n                            // Modifications to the ref value should be reflected in the corresponding position of the spread.\n                            newValue[key] = value;\n                        },\n                    },\n                    __id: snapshot.__id,\n                    __elements: snapshot.__elements,\n                };\n                updateRef(fakeSnapshot, index, oldValue[key], elementIndex);\n            }\n            else if (key.endsWith(':ref')) {\n                snapshot.__worklet_ref_set ??= new Set();\n                const fakeSnapshot = {\n                    __values: {\n                        get [index]() {\n                            return v;\n                        },\n                    },\n                    __id: snapshot.__id,\n                    __elements: snapshot.__elements,\n                    __worklet_ref_set: snapshot.__worklet_ref_set,\n                };\n                updateWorkletRef(fakeSnapshot, index, oldValue[key], elementIndex, key.slice(0, -4));\n            }\n            else if (key.endsWith(':gesture')) {\n                const workletType = key.slice(0, -8);\n                const fakeSnapshot = {\n                    __values: {\n                        get [index]() {\n                            return v;\n                        },\n                    },\n                    __id: snapshot.__id,\n                    __elements: snapshot.__elements,\n                };\n                updateGesture(fakeSnapshot, index, oldValue[key], elementIndex, workletType);\n            }\n            else if ((match = eventRegExp.exec(key))) {\n                const workletType = match[2];\n                const eventType = eventTypeMap[match[3]];\n                const eventName = match[4];\n                const fakeSnapshot = {\n                    __values: {\n                        get [index]() {\n                            return v;\n                        },\n                        set [index](value) {\n                            // Modifications to the event value should be reflected in the corresponding position of the spread.\n                            newValue[key] = value;\n                        },\n                    },\n                    __id: snapshot.__id,\n                    __elements: snapshot.__elements,\n                };\n                if (workletType) {\n                    updateWorkletEvent(fakeSnapshot, index, oldValue[key], elementIndex, workletType, eventType, eventName);\n                }\n                else {\n                    updateEvent(fakeSnapshot, index, oldValue[key], elementIndex, eventType, eventName, key);\n                }\n            }\n            else if (platformInfoAttributes.has(key)) {\n                // ignore\n            }\n            else {\n                __SetAttribute(snapshot.__elements[elementIndex], key, v);\n            }\n        }\n        // collect data regardless of whether it has changed\n        if (key.startsWith('data-')) {\n            dataset[key.slice(5)] = v;\n        }\n    }\n    let hasOldDataset = false;\n    for (const key in oldValue) {\n        if (!(key in newValue)) {\n            if (key === 'className') {\n                __SetClasses(snapshot.__elements[elementIndex], '');\n            }\n            else if (key === 'style') {\n                __SetInlineStyles(snapshot.__elements[elementIndex], '');\n            }\n            else if (key === 'id') {\n                __SetID(snapshot.__elements[elementIndex], null);\n            }\n            else if (key.startsWith('data-')) {\n                // collected below\n            }\n            else if (key === 'ref') {\n                const fakeSnapshot = {\n                    __values: {\n                        get [index]() {\n                            return undefined;\n                        },\n                        set [index](value) {\n                            // Modifications to the ref value should be reflected in the corresponding position of the spread.\n                            newValue[key] = value;\n                        },\n                    },\n                    __id: snapshot.__id,\n                    __elements: snapshot.__elements,\n                };\n                updateRef(fakeSnapshot, index, oldValue[key], elementIndex);\n            }\n            else if (key.endsWith(':ref')) {\n                snapshot.__worklet_ref_set ??= new Set();\n                const fakeSnapshot = {\n                    __values: {\n                        get [index]() {\n                            return undefined;\n                        },\n                    },\n                    __id: snapshot.__id,\n                    __elements: snapshot.__elements,\n                    __worklet_ref_set: snapshot.__worklet_ref_set,\n                };\n                updateWorkletRef(fakeSnapshot, index, oldValue[key], elementIndex, key.slice(0, -4));\n            }\n            else if (key.endsWith(':gesture')) {\n                const workletType = key.slice(0, -8);\n                const fakeSnapshot = {\n                    __values: {\n                        get [index]() {\n                            return undefined;\n                        },\n                    },\n                    __id: snapshot.__id,\n                    __elements: snapshot.__elements,\n                };\n                updateGesture(fakeSnapshot, index, oldValue[key], elementIndex, workletType);\n            }\n            else if ((match = eventRegExp.exec(key))) {\n                const workletType = match[2];\n                const eventType = eventTypeMap[match[3]];\n                const eventName = match[4];\n                const fakeSnapshot = {\n                    __values: {\n                        get [index]() {\n                            return undefined;\n                        },\n                        set [index](value) {\n                            newValue[key] = value;\n                        },\n                    },\n                    __id: snapshot.__id,\n                    __elements: snapshot.__elements,\n                };\n                if (workletType) {\n                    updateWorkletEvent(fakeSnapshot, index, oldValue[key], elementIndex, workletType, eventType, eventName);\n                }\n                else {\n                    updateEvent(fakeSnapshot, index, oldValue[key], elementIndex, eventType, eventName, key);\n                }\n            }\n            else if (platformInfoAttributes.has(key)) {\n                // ignore\n            }\n            else {\n                __SetAttribute(snapshot.__elements[elementIndex], key, null);\n            }\n        }\n        // collect data regardless of whether it has changed\n        if (key.startsWith('data-')) {\n            hasOldDataset = true;\n        }\n    }\n    // TODO: compare dataset before commit it to native?\n    if (hasOldDataset || !isEmptyObject(dataset)) {\n        __SetDataset(snapshot.__elements[elementIndex], dataset);\n    }\n}\nfunction transformSpread(snapshot, index, spread) {\n    const result = {};\n    let hasNoFlattenAttributes = false;\n    for (const key in spread) {\n        let value = spread[key];\n        if (key === '__spread') { }\n        else if (key === 'class' || key === 'className') {\n            value ??= '';\n            result['className'] = value;\n        }\n        else if (key === 'ref') {\n            if (__LEPUS__) {\n                result[key] = value ? 1 : undefined;\n            }\n            else {\n                result[key] = transformRef(value)?.__ref;\n            }\n        }\n        else if (typeof value === 'function') {\n            result[key] = `${snapshot.__id}:${index}:${key}`;\n        }\n        else if (key === '__self' || key === '__source') {\n            // for react debug tools\n        }\n        else {\n            if (!hasNoFlattenAttributes && noFlattenAttributes.has(key)) {\n                hasNoFlattenAttributes = true;\n            }\n            result[key] = value;\n        }\n    }\n    if (hasNoFlattenAttributes) {\n        result['flatten'] = false;\n    }\n    return result;\n}\nexport { transformSpread, updateSpread };\n//# sourceMappingURL=spread.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { onWorkletCtxUpdate } from '@lynx-js/react/worklet-runtime/bindings';\nimport { isMainThreadHydrating } from '../lifecycle/patch/isMainThreadHydrating.js';\nimport { SnapshotInstance } from '../snapshot.js';\nfunction updateWorkletEvent(snapshot, expIndex, oldValue, elementIndex, workletType, eventType, eventName) {\n    if (!snapshot.__elements) {\n        return;\n    }\n    const value = (snapshot.__values[expIndex] || undefined) ?? {};\n    value._workletType = workletType;\n    if (workletType === 'main-thread') {\n        onWorkletCtxUpdate(value, oldValue, isMainThreadHydrating, snapshot.__elements[elementIndex]);\n        const event = {\n            type: 'worklet',\n            value,\n        };\n        __AddEvent(snapshot.__elements[elementIndex], eventType, eventName, event);\n    }\n}\nexport { updateWorkletEvent };\n//# sourceMappingURL=workletEvent.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { onWorkletCtxUpdate, runWorkletCtx, updateWorkletRef as update } from '@lynx-js/react/worklet-runtime/bindings';\nimport { isMainThreadHydrating } from '../lifecycle/patch/isMainThreadHydrating.js';\nlet mtRefQueue = [];\nexport function applyRefQueue() {\n    const queue = mtRefQueue;\n    mtRefQueue = [];\n    for (let i = 0; i < queue.length; i += 2) {\n        const worklet = queue[i];\n        const element = queue[i + 1];\n        if ('_wvid' in worklet) {\n            update(worklet, element);\n        }\n        else if ('_wkltId' in worklet) {\n            worklet._unmount = runWorkletCtx(worklet, [{ elementRefptr: element }]);\n        }\n    }\n}\nfunction addToRefQueue(worklet, element) {\n    mtRefQueue.push(worklet, element);\n}\nexport function workletUnRef(value) {\n    if ('_wvid' in value) {\n        update(value, null);\n    }\n    else if ('_wkltId' in value) {\n        if (typeof value._unmount == 'function') {\n            value._unmount();\n        }\n        else {\n            runWorkletCtx(value, [null]);\n        }\n    }\n}\nexport function updateWorkletRef(snapshot, expIndex, oldValue, elementIndex, _workletType) {\n    if (!snapshot.__elements) {\n        return;\n    }\n    if (oldValue && snapshot.__worklet_ref_set?.has(oldValue)) {\n        workletUnRef(oldValue);\n        snapshot.__worklet_ref_set?.delete(oldValue);\n    }\n    const value = snapshot.__values[expIndex];\n    if (value === null || value === undefined) {\n        // do nothing\n    }\n    else if (value._wvid) {\n        const element = snapshot.__elements[elementIndex];\n        addToRefQueue(value, element);\n    }\n    else if (value._wkltId) {\n        const element = snapshot.__elements[elementIndex];\n        onWorkletCtxUpdate(value, oldValue, isMainThreadHydrating, element);\n        addToRefQueue(value, element);\n        /* v8 ignore next 3 */\n    }\n    else if (value._type === '__LEPUS__' || value._lepusWorkletHash) {\n        // for pre-0.99 compatibility\n        // During the initial render, we will not update the WorkletRef because the background thread is not ready yet.\n    }\n    else {\n        throw new Error('MainThreadRef: main-thread:ref must be of type MainThreadRef or main-thread function.');\n    }\n    if (value) {\n        snapshot.__worklet_ref_set ??= new Set();\n        snapshot.__worklet_ref_set.add(value);\n    }\n    // Add an arbitrary attribute to avoid this element being layout-only\n    __SetAttribute(snapshot.__elements[elementIndex], 'has-react-ref', true);\n}\n//# sourceMappingURL=workletRef.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\n/**\n * A map to store hydration states between snapshot instances.\n * K->V: main thread snapshotInstance IDs -> background snapshotInstance IDs.\n *\n * The map is used by the ref system to translate between snapshot instance IDs when\n * operations need to cross the thread boundary during the commit phase.\n */\nconst hydrationMap = new Map();\n/**\n * @internal\n */\nexport { hydrationMap };\n//# sourceMappingURL=snapshotInstanceHydrationMap.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { getCurrentVNode, getOwnerStack } from './debug/component-stack.js';\nexport function isDirectOrDeepEqual(a, b) {\n    if (a === b) {\n        return true;\n    }\n    try {\n        if (typeof a == 'object' && a !== null && typeof b == 'object' && b !== null\n            && JSON.stringify(a) === JSON.stringify(b)) {\n            return true;\n        }\n    }\n    catch (error) {\n        if (__DEV__ && /circular|cyclic/i.test(error.message)) {\n            // JavaScript engines give this different errors name and messages:\n            // PrimJS: \"circular reference\"\n            // JavaScriptCore: \"JSON.stringify cannot serialize cyclic structures\"\n            // V8: \"Converting circular structure to JSON\"\n            const vnode = getCurrentVNode();\n            if (vnode) {\n                const stack = getOwnerStack(vnode);\n                error.message += `\\n\\n${stack}`;\n            }\n        }\n        throw error;\n    }\n    return false;\n}\nexport function isEmptyObject(obj) {\n    for (const _ in obj)\n        return false;\n    return true;\n}\nexport function isSdkVersionGt(major, minor) {\n    const lynxSdkVersion = SystemInfo.lynxSdkVersion || '1.0';\n    const version = lynxSdkVersion.split('.');\n    return Number(version[0]) > major || (Number(version[0]) == major && Number(version[1]) > minor);\n}\nexport function pick(obj, keys) {\n    const result = {};\n    for (const key of keys) {\n        if (key in obj) {\n            result[key] = obj[key];\n        }\n    }\n    return result;\n}\nexport function maybePromise(value) {\n    return (typeof value === 'object'\n        && value !== null\n        // @ts-expect-error the check is safe\n        && typeof value.then === 'function');\n}\nexport function getDisplayName(type) {\n    return type.displayName ?? type.name;\n}\nexport function hook(object, key, fn) {\n    const oldFn = object[key];\n    object[key] = function (...args) {\n        return fn.call(this, oldFn, ...args);\n    };\n}\n//# sourceMappingURL=utils.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { takeWorkletRefInitValuePatch } from './workletRefPool.js';\nexport const destroyTasks = [];\nexport function destroyWorklet() {\n    takeWorkletRefInitValuePatch();\n    for (const task of destroyTasks) {\n        task();\n    }\n    destroyTasks.length = 0;\n}\n//# sourceMappingURL=destroy.js.map","// Copyright 2025 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { WorkletEvents } from '@lynx-js/react/worklet-runtime/bindings';\nimport { destroyTasks } from './destroy.js';\nimport { IndexMap } from './indexMap.js';\nlet resolveMap;\nfunction initReturnValueListener() {\n    const context = __JS__ ? lynx.getCoreContext() : lynx.getJSContext();\n    resolveMap = new IndexMap();\n    context.addEventListener(WorkletEvents.FunctionCallRet, onFunctionCallRet);\n    destroyTasks.push(() => {\n        context.removeEventListener(WorkletEvents.FunctionCallRet, onFunctionCallRet);\n        resolveMap = undefined;\n    });\n}\n/**\n * @internal\n */\nfunction onFunctionCall(resolve) {\n    if (!resolveMap) {\n        initReturnValueListener();\n    }\n    return resolveMap.add(resolve);\n}\nfunction onFunctionCallRet(event) {\n    const data = JSON.parse(event.data);\n    const resolve = resolveMap.get(data.resolveId);\n    resolveMap.remove(data.resolveId);\n    resolve(data.returnValue);\n}\nexport { onFunctionCall };\n//# sourceMappingURL=functionCall.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { isSdkVersionGt } from '../utils.js';\nlet mtsEnabled;\nlet runOnBackgroundEnabled;\n/**\n * @internal\n */\nfunction isMtsEnabled() {\n    return mtsEnabled ??= isSdkVersionGt(2, 13);\n}\n/**\n * @internal\n */\nfunction isRunOnBackgroundEnabled() {\n    return runOnBackgroundEnabled ??= isSdkVersionGt(2, 15);\n}\nfunction clearConfigCacheForTesting() {\n    mtsEnabled = undefined;\n    runOnBackgroundEnabled = undefined;\n}\nexport { isMtsEnabled, isRunOnBackgroundEnabled, clearConfigCacheForTesting };\n//# sourceMappingURL=functionality.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\n// import { __globalSnapshotPatch } from '../lifecycle/patch/snapshotPatch.js';\n// const workletHashSet: Set<string> = /* @__PURE__ */ new Set();\n/* v8 ignore start */\n/**\n * @internal\n */\n// disable hmr until bugs are fixed\n// TODO: re-enable hmr or change a way to impl it; also need to fix the test case DEV_ONLY_RegisterWorklet\nfunction registerWorkletOnBackground(_type, _hash, _fn) {\n    // if (workletHashSet.has(hash)) {\n    //   return;\n    // }\n    // workletHashSet.add(hash);\n    // if (__globalSnapshotPatch) {\n    //   __globalSnapshotPatch.push(\n    //     SnapshotOperation.DEV_ONLY_RegisterWorklet,\n    //     hash,\n    //     // We use `Function.prototype.toString` to serialize the function for Lepus.\n    //     fn.toString(),\n    //   );\n    // }\n}\n/* v8 ignore stop */\nexport { registerWorkletOnBackground };\n//# sourceMappingURL=hmr.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nclass IndexMap {\n    lastIndex = 0;\n    indexMap = new Map();\n    add(value) {\n        const index = ++this.lastIndex;\n        this.indexMap.set(index, value);\n        return index;\n    }\n    get(index) {\n        return this.indexMap.get(index);\n    }\n    remove(index) {\n        this.indexMap.delete(index);\n    }\n}\nexport { IndexMap };\n//# sourceMappingURL=indexMap.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { WorkletEvents, delayRunOnBackground } from '@lynx-js/react/worklet-runtime/bindings';\nimport { destroyTasks } from './destroy.js';\nimport { WorkletExecIdMap } from './execMap.js';\nimport { isRunOnBackgroundEnabled } from './functionality.js';\nimport { onFunctionCall } from './functionCall.js';\nlet execIdMap;\nfunction init() {\n    'background only';\n    if (execIdMap) {\n        return;\n    }\n    execIdMap = new WorkletExecIdMap();\n    lynx.getCoreContext().addEventListener(WorkletEvents.runOnBackground, runJSFunction);\n    lynx.getCoreContext().addEventListener(WorkletEvents.releaseBackgroundWorkletCtx, releaseBackgroundWorkletCtx);\n    destroyTasks.push(() => {\n        lynx.getCoreContext().removeEventListener(WorkletEvents.runOnBackground, runJSFunction);\n        lynx.getCoreContext().removeEventListener(WorkletEvents.releaseBackgroundWorkletCtx, releaseBackgroundWorkletCtx);\n        execIdMap = undefined;\n    });\n}\n/**\n * @internal\n */\nfunction runJSFunction(event) {\n    'background only';\n    const data = JSON.parse(event.data);\n    const obj = execIdMap.findJsFnHandle(data.obj._execId, data.obj._jsFnId);\n    const f = obj?._fn;\n    if (!f) {\n        throw new Error('runOnBackground: JS function not found: ' + JSON.stringify(data.obj));\n    }\n    const returnValue = f(...data.params);\n    lynx.getCoreContext().dispatchEvent({\n        type: WorkletEvents.FunctionCallRet,\n        data: JSON.stringify({\n            resolveId: data.resolveId,\n            returnValue,\n        }),\n    });\n}\nfunction releaseBackgroundWorkletCtx(event) {\n    'background only';\n    for (const id of event.data) {\n        execIdMap.remove(id);\n    }\n}\n/**\n * @internal\n */\nfunction registerWorkletCtx(ctx) {\n    'background only';\n    init();\n    execIdMap.add(ctx);\n}\n/**\n * `runOnBackground` allows triggering js functions on the background thread asynchronously.\n * @param f - The js function to be called.\n * @returns A function. Calling which with the arguments to be passed to the js function to trigger it on the background thread. This function returns a promise that resolves to the return value of the js function.\n * @example\n * ```ts\n * import { runOnBackground } from '@lynx-js/react';\n *\n * async function someMainthreadFunction() {\n *   'main thread';\n *   const fn = runOnBackground(() => {\n *     return 'hello';\n *   });\n *   const result = await fn();\n}\n * ```\n * @public\n */\nfunction runOnBackground(f) {\n    if (!isRunOnBackgroundEnabled()) {\n        throw new Error('runOnBackground requires Lynx sdk version 2.16.');\n    }\n    if (__JS__) {\n        throw new Error('runOnBackground can only be used on the main thread.');\n    }\n    const obj = f;\n    if (obj._error) {\n        throw new Error(obj._error);\n    }\n    return async (...params) => {\n        return new Promise((resolve) => {\n            const resolveId = onFunctionCall(resolve);\n            if (obj._isFirstScreen) {\n                delayRunOnBackground(obj, (fnId, execId) => {\n                    dispatchRunBackgroundFunctionEvent(fnId, params, execId, resolveId);\n                });\n                return;\n            }\n            dispatchRunBackgroundFunctionEvent(obj._jsFnId, params, obj._execId, resolveId);\n        });\n    };\n}\nfunction dispatchRunBackgroundFunctionEvent(fnId, params, execId, resolveId) {\n    lynx.getJSContext().dispatchEvent({\n        type: WorkletEvents.runOnBackground,\n        data: JSON.stringify({\n            obj: {\n                _jsFnId: fnId,\n                _execId: execId,\n            },\n            params,\n            resolveId,\n        }),\n    });\n}\nexport { registerWorkletCtx, runJSFunction, runOnBackground };\n//# sourceMappingURL=runOnBackground.js.map","import { WorkletEvents } from '@lynx-js/react/worklet-runtime/bindings';\nimport { onPostWorkletCtx } from './ctx.js';\nimport { isMtsEnabled } from './functionality.js';\nimport { onFunctionCall } from './functionCall.js';\n/**\n * `runOnMainThread` allows triggering main thread functions on the main thread asynchronously.\n * @param fn - The main thread functions to be called.\n * @returns A function. Calling which with the arguments to be passed to the main thread function to trigger it on the main thread. This function returns a promise that resolves to the return value of the main thread function.\n * @example\n * ```ts\n * import { runOnMainThread } from '@lynx-js/react';\n *\n * async function someFunction() {\n *   const fn = runOnMainThread(() => {\n *     'main thread';\n *     return 'hello';\n *   });\n *   const result = await fn();\n * }\n * ```\n * @public\n */\nexport function runOnMainThread(fn) {\n    if (__LEPUS__) {\n        throw new Error('runOnMainThread can only be used on the background thread.');\n    }\n    if (!isMtsEnabled()) {\n        throw new Error('runOnMainThread requires Lynx sdk version 2.14.');\n    }\n    return async (...params) => {\n        return new Promise((resolve) => {\n            onPostWorkletCtx(fn);\n            const resolveId = onFunctionCall(resolve);\n            lynx.getCoreContext().dispatchEvent({\n                type: WorkletEvents.runWorkletCtx,\n                data: JSON.stringify({\n                    worklet: fn,\n                    params,\n                    resolveId,\n                }),\n            });\n        });\n    };\n}\n//# sourceMappingURL=runOnMainThread.js.map","let lastId = 0;\n/**\n * transform args of `runOnBackground()`.\n *\n * @internal\n */\nexport function transformToWorklet(obj) {\n    const id = ++lastId;\n    if (typeof obj !== 'function') {\n        // We save the error message in the object, so that we can throw it later when the function is called on the main thread.\n        return {\n            _jsFnId: id,\n            _error: `Argument of runOnBackground should be a function, but got [${typeof obj}] instead`,\n        };\n    }\n    obj.toJSON ??= () => '[BackgroundFunction]';\n    return {\n        _jsFnId: id,\n        _fn: obj,\n    };\n}\n//# sourceMappingURL=transformToWorklet.js.map","import { WorkletEvents } from '@lynx-js/react/worklet-runtime/bindings';\nimport { addWorkletRefInitValue } from './workletRefPool.js';\nimport { useMemo } from '../hooks/react.js';\n// Split into two variables for testing purposes\nlet lastIdBG = 0;\nlet lastIdMT = 0;\nexport function clearWorkletRefLastIdForTesting() {\n    lastIdBG = lastIdMT = 0;\n}\nclass WorkletRef {\n    /**\n     * @internal\n     */\n    _wvid;\n    /**\n     * @internal\n     */\n    _initValue;\n    /**\n     * @internal\n     */\n    _type;\n    /**\n     * @internal\n     */\n    _lifecycleObserver;\n    /**\n     * @internal\n     */\n    constructor(initValue, type) {\n        this._initValue = initValue;\n        this._type = type;\n        if (__JS__) {\n            this._wvid = ++lastIdBG;\n            addWorkletRefInitValue(this._wvid, initValue);\n        }\n        else {\n            this._wvid = --lastIdMT;\n        }\n    }\n    get current() {\n        if (__JS__ && __DEV__) {\n            throw new Error('MainThreadRef: value of a MainThreadRef cannot be accessed in the background thread.');\n        }\n        if (__LEPUS__ && __DEV__) {\n            /* v8 ignore next 3 */\n            throw new Error('MainThreadRef: value of a MainThreadRef cannot be accessed outside of main thread script.');\n        }\n        return undefined;\n    }\n    set current(_) {\n        if (__JS__ && __DEV__) {\n            throw new Error('MainThreadRef: value of a MainThreadRef cannot be accessed in the background thread.');\n        }\n        if (__LEPUS__ && __DEV__) {\n            throw new Error('MainThreadRef: value of a MainThreadRef cannot be accessed outside of main thread script.');\n        }\n    }\n    /**\n     * @internal\n     */\n    toJSON() {\n        return {\n            _wvid: this._wvid,\n        };\n    }\n}\n/**\n * A `MainThreadRef` is a ref that can only be accessed on the main thread. It is used to preserve\n * states between main thread function calls.\n * The data saved in `current` property of the `MainThreadRef` can be read and written in\n * multiple main thread functions.\n * @public\n */\nexport class MainThreadRef extends WorkletRef {\n    constructor(initValue) {\n        super(initValue, 'main-thread');\n        if (__JS__) {\n            const id = this._wvid;\n            this._lifecycleObserver = lynx.getNativeApp().createJSObjectDestructionObserver?.(() => {\n                lynx.getCoreContext?.().dispatchEvent({\n                    type: WorkletEvents.releaseWorkletRef,\n                    data: {\n                        id,\n                    },\n                });\n            });\n        }\n    }\n}\nexport function useMainThreadRef(initValue) {\n    return useMemo(() => {\n        return new MainThreadRef(initValue);\n    }, []);\n}\n//# sourceMappingURL=workletRef.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { isMtsEnabled } from './functionality.js';\nlet initValuePatch = [];\nconst initValueIdSet = /*#__PURE__*/ new Set();\n/**\n * @internal\n */\nexport function addWorkletRefInitValue(id, value) {\n    if (!isMtsEnabled()) {\n        return;\n    }\n    initValueIdSet.add(id);\n    initValuePatch.push([id, value]);\n}\n/**\n * @internal\n */\nexport function takeWorkletRefInitValuePatch() {\n    const res = initValuePatch;\n    initValuePatch = [];\n    return res;\n}\n//# sourceMappingURL=workletRefPool.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\n/**\n * Executes the worklet ctx.\n * @param worklet - The Worklet ctx to run.\n * @param params - An array as parameters of the worklet run.\n */\nfunction runWorkletCtx(worklet, params) {\n    return globalThis.runWorklet?.(worklet, params);\n}\n/**\n * Save an element to a `WorkletRef`.\n *\n * @param workletRef - The `WorkletRef` to be updated.\n * @param element - The element.\n * @internal\n */\nfunction updateWorkletRef(workletRef, element) {\n    globalThis.lynxWorkletImpl?._refImpl.updateWorkletRef(workletRef, element);\n}\n/**\n * Update the initial value of the `WorkletRef`.\n *\n * @param patch - An array containing the index and new value of the worklet value.\n */\nfunction updateWorkletRefInitValueChanges(patch) {\n    if (patch) {\n        globalThis.lynxWorkletImpl?._refImpl.updateWorkletRefInitValueChanges(patch);\n    }\n}\n/**\n * Register a worklet.\n *\n * @internal\n */\nfunction registerWorklet(type, id, worklet) {\n    globalThis.registerWorklet(type, id, worklet);\n}\n/**\n * Delay a runOnBackground after hydration.\n *\n * @internal\n */\nfunction delayRunOnBackground(fnObj, fn) {\n    globalThis.lynxWorkletImpl?._runOnBackgroundDelayImpl.delayRunOnBackground(fnObj, fn);\n}\n/**\n * Set whether EOM operations should flush the element tree.\n *\n * @internal\n */\nfunction setEomShouldFlushElementTree(value) {\n    globalThis.lynxWorkletImpl?._eomImpl.setShouldFlush(value);\n}\nexport { runWorkletCtx, updateWorkletRef, updateWorkletRefInitValueChanges, registerWorklet, delayRunOnBackground, setEomShouldFlushElementTree, };\n//# sourceMappingURL=bindings.js.map","var WorkletEvents;\n(function (WorkletEvents) {\n    WorkletEvents[\"runWorkletCtx\"] = \"Lynx.Worklet.runWorkletCtx\";\n    WorkletEvents[\"runOnBackground\"] = \"Lynx.Worklet.runOnBackground\";\n    WorkletEvents[\"FunctionCallRet\"] = \"Lynx.Worklet.FunctionCallRet\";\n    WorkletEvents[\"releaseBackgroundWorkletCtx\"] = \"Lynx.Worklet.releaseBackgroundWorkletCtx\";\n    WorkletEvents[\"releaseWorkletRef\"] = \"Lynx.Worklet.releaseWorkletRef\";\n})(WorkletEvents || (WorkletEvents = {}));\nexport { WorkletEvents };\n//# sourceMappingURL=events.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nexport { loadWorkletRuntime } from './loadRuntime.js';\nexport * from './bindings.js';\nexport * from './observers.js';\nexport { WorkletEvents } from './events.js';\n//# sourceMappingURL=index.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport '../global.js';\n/**\n * Loads and initializes the Lepus chunk in the main thread.\n * @param __schema - The dynamic component entry for loading the Lepus chunk.\n * @returns A boolean indicating whether the Lepus chunk was loaded and initialized successfully.\n */\nfunction loadWorkletRuntime(__schema) {\n    if (typeof __LoadLepusChunk === 'undefined') {\n        return false;\n    }\n    if (globalThis.lynxWorkletImpl) {\n        return true;\n    }\n    return __LoadLepusChunk('worklet-runtime', {\n        dynamicComponentEntry: __schema,\n        chunkType: 0,\n    });\n}\nexport { loadWorkletRuntime };\n//# sourceMappingURL=loadRuntime.js.map","// Copyright 2025 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\n/**\n * This function must be called when a worklet context is updated.\n *\n * @param worklet - The worklet to be updated\n * @param oldWorklet - The old worklet context\n * @param isFirstScreen - Whether it is before the hydration is finished\n * @param element - The element\n */\nexport function onWorkletCtxUpdate(worklet, oldWorklet, isFirstScreen, element) {\n    globalThis.lynxWorkletImpl?._jsFunctionLifecycleManager?.addRef(worklet._execId, worklet);\n    if (isFirstScreen && oldWorklet) {\n        globalThis.lynxWorkletImpl?._hydrateCtx(worklet, oldWorklet);\n    }\n    // For old version dynamic component compatibility.\n    if (isFirstScreen) {\n        globalThis.lynxWorkletImpl?._eventDelayImpl.runDelayedWorklet(worklet, element);\n    }\n}\n/**\n * This must be called when the hydration is finished.\n */\nexport function onHydrationFinished() {\n    globalThis.lynxWorkletImpl?._runOnBackgroundDelayImpl.runDelayedBackgroundFunctions();\n    globalThis.lynxWorkletImpl?._refImpl.clearFirstScreenWorkletRefMap();\n    // For old version dynamic component compatibility.\n    globalThis.lynxWorkletImpl?._eventDelayImpl.clearDelayedWorklets();\n}\n//# sourceMappingURL=observers.js.map","export {};\n//# sourceMappingURL=global.js.map","/**\n * @remix-run/router v1.9.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  let history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nfunction parsePath(path) {\n  let parsedPath = {};\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex();\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n}\n//#endregion\n\nvar ResultType;\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\nconst immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\nfunction isIndexRoute(route) {\n  return route.index === true;\n}\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (manifest === void 0) {\n    manifest = {};\n  }\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id\n      });\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id,\n        children: undefined\n      });\n      manifest[id] = pathOrLayoutRoute;\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i],\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n  return matches;\n}\nfunction convertRouteMatchToUiMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n      // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n  routes.forEach((route, index) => {\n    var _route$path;\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments;\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = [];\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\")));\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = s => s === \"*\";\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  let path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n  const stringify = p => p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1;\n    // only apply the splat if it's the last segment\n    if (isLastSegment && segment === \"*\") {\n      const star = \"*\";\n      // Apply the splat\n      return stringify(params[star]);\n    }\n    const keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n      invariant(optional === \"?\" || param != null, \"Missing \\\":\" + key + \"\\\" param\");\n      return stringify(param);\n    }\n    // Remove any optional markers from optional static segments\n    return segment.replace(/\\?$/g, \"\");\n  })\n  // Remove empty segments\n  .filter(segment => !!segment);\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = paramNames.reduce((memo, paramName, index) => {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let paramNames = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:(\\w+)/g, (_, paramName) => {\n    paramNames.push(paramName);\n    return \"/([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n/**\n * @private\n */\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  let to;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from;\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    }\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  let path = resolvePath(to, from);\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\n/**\n * @private\n */\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\");\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref) => {\n      let [key, value] = _ref;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n    this.init = responseInit;\n  }\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, undefined, data), error => this.onSettle(promise, key, error));\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n    this.pendingKeysSet.delete(key);\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\"Deferred data for key \\\"\" + key + \"\\\" resolved/rejected with `undefined`, \" + \"you must resolve/reject with a value or `null`.\");\n      Object.defineProperty(promise, \"_error\", {\n        get: () => undefinedError\n      });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n  async resolveData(signal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirectDocument = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nclass ErrorResponseImpl {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\n\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nconst defaultMapRouteProperties = route => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary)\n});\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a router and listen to history POP navigations\n */\nfunction createRouter(init) {\n  const routerWindow = init.window ? init.window : typeof window !== \"undefined\" ? window : undefined;\n  const isBrowser = typeof routerWindow !== \"undefined\" && typeof routerWindow.document !== \"undefined\" && typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let mapRouteProperties;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Routes keyed by ID\n  let manifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  let inFlightDataRoutes;\n  let basename = init.basename || \"/\";\n  // Config driven behavior flags\n  let future = _extends({\n    v7_normalizeFormMethod: false,\n    v7_prependBasename: false\n  }, init.future);\n  // Cleanup function for history\n  let unlistenHistory = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors = null;\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n  let initialized =\n  // All initialMatches need to be loaded before we're ready.  If we have lazy\n  // functions around still then we'll need to run them in initialize()\n  !initialMatches.some(m => m.route.lazy) && (\n  // And we have to either have no loaders or have been provided hydrationData\n  !initialMatches.some(m => m.route.loader) || init.hydrationData != null);\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  };\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction = Action.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads = [];\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map();\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map();\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map();\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref;\n      // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1);\n        // Put the blocker into a blocked state\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location,\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location\n            });\n            // Re-do the same POP navigation we just blocked\n            init.history.go(delta);\n          },\n          reset() {\n            let blockers = new Map(state.blockers);\n            blockers.set(blockerKey, IDLE_BLOCKER);\n            updateState({\n              blockers\n            });\n          }\n        });\n        return;\n      }\n      return startNavigation(historyAction, location);\n    });\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n    return router;\n  }\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n  // Subscribe to state updates for the router\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n  // Update our state and notify the calling context of the change\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(subscriber => subscriber(state));\n  }\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(location, newState) {\n    var _location$state, _location$state2;\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n    if (isUninterruptedRevalidation) ; else if (pendingAction === Action.Pop) ; else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    }\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers\n    }));\n    // Reset stateful navigation vars\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ; else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey, IDLE_BLOCKER);\n          updateState({\n            blockers\n          });\n        }\n      });\n      return;\n    }\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace\n    });\n  }\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    });\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    }\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  }\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      });\n      return;\n    }\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      });\n      return;\n    }\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace\n      });\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      // Create a GET request for the loaders\n      request = new Request(request.url, {\n        signal: request.signal\n      });\n    }\n    // Call loaders\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, pendingActionData, pendingError);\n    if (shortCircuited) {\n      return;\n    }\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches\n    }, pendingActionData ? {\n      actionData: pendingActionData\n    } : {}, {\n      loaderData,\n      errors\n    }));\n  }\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(request, location, submission, matches, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    interruptActiveLoads();\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({\n      navigation\n    });\n    // Call our action and get the result\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename);\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n    if (isRedirectResult(result)) {\n      let replace;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace = result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  }\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, fetcherSubmission, replace, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission);\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError);\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId));\n    pendingNavigationLoadId = ++incrementingLoadId;\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null\n      }, pendingActionData ? {\n        actionData: pendingActionData\n      } : {}, updatedFetchers ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      return {\n        shortCircuited: true\n      };\n    }\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(rf => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = getLoadingFetcher(undefined, fetcher ? fetcher.data : undefined);\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState(_extends({\n        navigation: loadingNavigation\n      }, actionData ? Object.keys(actionData).length === 0 ? {\n        actionData: null\n      } : {\n        actionData\n      } : {}, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n    }\n    revalidatingFetchers.forEach(rf => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(f => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    }\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key));\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      await startRedirectNavigation(state, redirect.result, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n    return _extends({\n      loaderData,\n      errors\n    }, shouldUpdateFetchers ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, routeId, opts == null ? void 0 : opts.relative);\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }));\n      return;\n    }\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);\n    if (error) {\n      setFetcherError(key, routeId, error);\n      return;\n    }\n    let match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  }\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    }\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher = getSubmittingFetcher(submission, existingFetcher);\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, manifest, mapRouteProperties, basename);\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our action started, so that\n        // should take precedence over this redirect navigation.  We already\n        // set isRevalidationRequired so all loaders for the new route should\n        // fire unless opted out via shouldRevalidate\n        let doneFetcher = getDoneFetcher(undefined);\n        state.fetchers.set(key, doneFetcher);\n        updateState({\n          fetchers: new Map(state.fetchers)\n        });\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        let loadingFetcher = getLoadingFetcher(submission);\n        state.fetchers.set(key, loadingFetcher);\n        updateState({\n          fetchers: new Map(state.fetchers)\n        });\n        return startRedirectNavigation(state, actionResult, {\n          fetcherSubmission: submission\n        });\n      }\n    }\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, {\n      [match.route.id]: actionResult.data\n    }, undefined // No need to send through errors since we short circuit above\n    );\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = getLoadingFetcher(undefined, existingFetcher ? existingFetcher.data : undefined);\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      if (fetchControllers.has(staleKey)) {\n        abortFetcher(staleKey);\n      }\n      if (rf.controller) {\n        fetchControllers.set(staleKey, rf.controller);\n      }\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(rf => abortFetcher(rf.key));\n    abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n    if (abortController.signal.aborted) {\n      return;\n    }\n    abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      return startRedirectNavigation(state, redirect.result);\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState(_extends({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors)\n      }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      isRevalidationRequired = false;\n    }\n  }\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(key, routeId, path, match, matches, submission) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher = getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : undefined);\n    state.fetchers.set(key, loadingFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match, matches, manifest, mapRouteProperties, basename);\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    }\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        let doneFetcher = getDoneFetcher(undefined);\n        state.fetchers.set(key, doneFetcher);\n        updateState({\n          fetchers: new Map(state.fetchers)\n        });\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(state, result);\n        return;\n      }\n    }\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error\n        }\n      });\n      return;\n    }\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n    // Put the fetcher back into an idle state\n    let doneFetcher = getDoneFetcher(result.data);\n    state.fetchers.set(key, doneFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(state, redirect, _temp) {\n    let {\n      submission,\n      fetcherSubmission,\n      replace\n    } = _temp === void 0 ? {} : _temp;\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n    let redirectLocation = createLocation(state.location, redirect.location, {\n      _isRedirect: true\n    });\n    invariant(redirectLocation, \"Expected a location on the redirect navigation\");\n    if (isBrowser) {\n      let isDocumentReload = false;\n      if (redirect.reloadDocument) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(redirect.location)) {\n        const url = init.history.createURL(redirect.location);\n        isDocumentReload =\n        // Hard reload if it's an absolute URL to a new origin\n        url.origin !== routerWindow.location.origin ||\n        // Hard reload if it's an absolute URL that does not match our basename\n        stripBasename(url.pathname, basename) == null;\n      }\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(redirect.location);\n        } else {\n          routerWindow.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push;\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let {\n      formMethod,\n      formAction,\n      formEncType\n    } = state.navigation;\n    if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (redirectPreserveMethodStatusCodes.has(redirect.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, activeSubmission, {\n          formAction: redirect.location\n        }),\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(redirectLocation, submission);\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    }\n  }\n  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename)), ...fetchersToLoad.map(f => {\n      if (f.matches && f.match && f.controller) {\n        return callLoaderOrAction(\"loader\", createClientSideRequest(init.history, f.path, f.controller.signal), f.match, f.matches, manifest, mapRouteProperties, basename);\n      } else {\n        let error = {\n          type: ResultType.error,\n          error: getInternalRouterError(404, {\n            pathname: f.path\n          })\n        };\n        return error;\n      }\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(() => request.signal), false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(f => f.match), fetcherResults, fetchersToLoad.map(f => f.controller ? f.controller.signal : null), true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n  function setFetcherError(key, routeId, error) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function deleteFetcher(key) {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (fetchControllers.has(key) && !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n    return blocker;\n  }\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({\n      blockers\n    });\n  }\n  function shouldBlockNavigation(_ref2) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref2;\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function getScrollKey(location, matches) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(location, matches.map(m => convertRouteMatchToUiMatch(m, state.loaderData)));\n      return key || location.key;\n    }\n    return location.key;\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, undefined, manifest);\n  }\n  router = {\n    get basename() {\n      return basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\nconst UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let manifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties;\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  let dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(request, _temp2) {\n    let {\n      requestContext\n    } = _temp2 === void 0 ? {} : _temp2;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(request, _temp3) {\n    let {\n      routeId,\n      requestContext\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let result = await queryImpl(request, location, matches, requestContext, match);\n    if (isResponse(result)) {\n      return result;\n    }\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n    if (result.loaderData) {\n      var _result$activeDeferre;\n      let data = Object.values(result.loaderData)[0];\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n    return undefined;\n  }\n  async function queryImpl(request, location, matches, requestContext, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n        return result;\n      }\n      let result = await loadRouteData(request, matches, requestContext, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n  async function submit(request, matches, actionMatch, requestContext, isRouteRequest) {\n    let result;\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename, {\n        isStaticRequest: true,\n        isRouteRequest,\n        requestContext\n      });\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n      }\n    }\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, requestContext, undefined, {\n        [boundaryMatch.route.id]: result.error\n      });\n      // action status codes take precedence over loader status codes\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    }\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n  async function loadRouteData(request, matches, requestContext, routeMatch, pendingActionError) {\n    let isRouteRequest = routeMatch != null;\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n    let requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n    let matchesToLoad = requestMatches.filter(m => m.route.loader || m.route.lazy);\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename, {\n      isStaticRequest: true,\n      isRouteRequest,\n      requestContext\n    }))]);\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n    }\n    // Process and commit output from loaders\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds);\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  }\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n  return newContext;\n}\nfunction isSubmissionNavigation(opts) {\n  return opts != null && (\"formData\" in opts && opts.formData != null || \"body\" in opts && opts.body !== undefined);\n}\nfunction normalizeTo(location, matches, basename, prependBasename, to, fromRouteId, relative) {\n  let contextualMatches;\n  let activeRouteMatch;\n  if (fromRouteId != null && relative !== \"path\") {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route.  When using relative:path,\n    // fromRouteId is ignored since that is always relative to the current\n    // location path\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n  // Resolve the relative path\n  let path = resolveTo(to ? to : \".\", getPathContributingMatches(contextualMatches).map(m => m.pathnameBase), stripBasename(location.pathname, basename) || location.pathname, relative === \"path\");\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n  // Add an ?index param for matched index routes if we don't already have one\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch && activeRouteMatch.route.index && !hasNakedIndexQuery(path.search)) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  }\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  }\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, {\n      type: \"invalid-body\"\n    })\n  });\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();\n  let formAction = stripHashFromPath(path);\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      let text = typeof opts.body === \"string\" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ?\n      // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n      Array.from(opts.body.entries()).reduce((acc, _ref3) => {\n        let [name, value] = _ref3;\n        return \"\" + acc + name + \"=\" + value + \"\\n\";\n      }, \"\") : String(opts.body);\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text\n        }\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      try {\n        let json = typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined\n          }\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n  invariant(typeof FormData === \"function\", \"FormData is not available in this environment\");\n  let searchParams;\n  let formData;\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n  let submission = {\n    formMethod,\n    formAction,\n    formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined\n  };\n  if (isMutationMethod(submission.formMethod)) {\n    return {\n      path,\n      submission\n    };\n  }\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n}\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\nfunction getMatchesToLoad(history, state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (match.route.loader == null) {\n      return false;\n    }\n    // Always call the loader on new route instances and pending defer cancellations\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    }\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate:\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired ||\n      // Clicked the same link, resubmitted a GET form\n      currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search ||\n      // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  });\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate if fetcher won't be present in the subsequent render\n    if (!matches.some(m => m.route.id === f.routeId)) {\n      return;\n    }\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    }\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.includes(key)) {\n      // Always revalidate if the fetcher was cancelled\n      shouldRevalidate = true;\n    } else if (fetcher && fetcher.state !== \"idle\" && fetcher.data === undefined) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params\n      }, submission, {\n        actionResult,\n        defaultShouldRevalidate: isRevalidationRequired\n      }));\n    }\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id;\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return arg.defaultShouldRevalidate;\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(route, mapRouteProperties, manifest) {\n  if (!route.lazy) {\n    return;\n  }\n  let lazyRoute = await route.lazy();\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue = routeToUpdate[lazyRouteProperty];\n    let isPropertyStaticallyDefined = staticRouteValue !== undefined &&\n    // This property isn't static since it should always be updated based\n    // on the route updates\n    lazyRouteProperty !== \"hasErrorBoundary\";\n    warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n    }\n  }\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n    lazy: undefined\n  }));\n}\nasync function callLoaderOrAction(type, request, match, matches, manifest, mapRouteProperties, basename, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  let resultType;\n  let result;\n  let onReject;\n  let runHandler = handler => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject;\n    let abortPromise = new Promise((_, r) => reject = r);\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([handler({\n      request,\n      params: match.params,\n      context: opts.requestContext\n    }), abortPromise]);\n  };\n  try {\n    let handler = match.route[type];\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let values = await Promise.all([\n        // If the handler throws, don't let it immediately bubble out,\n        // since we need to let the lazy() execution finish so we know if this\n        // route has a boundary that can handle the error\n        runHandler(handler).catch(e => {\n          handlerError = e;\n        }), loadLazyRouteModule(match.route, mapRouteProperties, manifest)]);\n        if (handlerError) {\n          throw handlerError;\n        }\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n        handler = match.route[type];\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return {\n            type: ResultType.data,\n            data: undefined\n          };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n    invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n  if (isResponse(result)) {\n    let status = result.status;\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        location = normalizeTo(new URL(request.url), matches.slice(0, matches.indexOf(match) + 1), basename, true, location);\n      } else if (!opts.isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\") ? new URL(currentUrl.protocol + location) : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (opts.isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n        reloadDocument: result.headers.get(\"X-Remix-Reload-Document\") !== null\n      };\n    }\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (opts.isRouteRequest) {\n      let queryRouteResponse = {\n        type: resultType === ResultType.error ? ResultType.error : ResultType.data,\n        response: result\n      };\n      throw queryRouteResponse;\n    }\n    let data;\n    let contentType = result.headers.get(\"Content-Type\");\n    // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponseImpl(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n  if (isDeferredData(result)) {\n    var _result$init, _result$init2;\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n      headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)\n    };\n  }\n  return {\n    type: ResultType.data,\n    data: result\n  };\n}\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType\n    } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({\n        \"Content-Type\": formEncType\n      });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (formEncType === \"application/x-www-form-urlencoded\" && submission.formData) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n  return searchParams;\n}\nfunction convertSearchParamsToFormData(searchParams) {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {};\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = errors || {};\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds);\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      match,\n      controller\n    } = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index];\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  return {\n    loaderData,\n    errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\nfunction getInternalRouterError(status, _temp4) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type\n  } = _temp4 === void 0 ? {} : _temp4;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n  return new ErrorResponseImpl(status || 500, statusText, new Error(errorMessage), true);\n}\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return {\n        result,\n        idx: i\n      };\n    }\n  }\n}\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\nfunction isDeferredData(value) {\n  let deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || obj.type === ResultType.error);\n}\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signals, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(signal, \"Expected an AbortSignal for revalidating fetcher deferred result\");\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n}\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\nfunction getSubmissionFromNavigation(navigation) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    text,\n    formData,\n    json\n  } = navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined\n    };\n  }\n}\nfunction getLoadingNavigation(location, submission) {\n  if (submission) {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text\n    };\n    return navigation;\n  } else {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined\n    };\n    return navigation;\n  }\n}\nfunction getSubmittingNavigation(location, submission) {\n  let navigation = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text\n  };\n  return navigation;\n}\nfunction getLoadingFetcher(submission, data) {\n  if (submission) {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data\n    };\n    return fetcher;\n  } else {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data\n    };\n    return fetcher;\n  }\n}\nfunction getSubmittingFetcher(submission, existingFetcher) {\n  let fetcher = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined\n  };\n  return fetcher;\n}\nfunction getDoneFetcher(data) {\n  let fetcher = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data\n  };\n  return fetcher;\n}\n//#endregion\n\nexport { AbortedDeferredError, Action, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, ErrorResponseImpl as UNSAFE_ErrorResponseImpl, convertRouteMatchToUiMatch as UNSAFE_convertRouteMatchToUiMatch, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getPathContributingMatches as UNSAFE_getPathContributingMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, redirectDocument, resolvePath, resolveTo, stripBasename };\n//# sourceMappingURL=router.js.map\n","/**\n * React Router v6.16.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport * as React from 'react';\nimport { UNSAFE_invariant, joinPaths, matchPath, UNSAFE_getPathContributingMatches, UNSAFE_warning, resolveTo, parsePath, matchRoutes, Action, UNSAFE_convertRouteMatchToUiMatch, stripBasename, IDLE_BLOCKER, isRouteErrorResponse, createMemoryHistory, AbortedDeferredError, createRouter } from '@remix-run/router';\nexport { AbortedDeferredError, Action as NavigationType, createPath, defer, generatePath, isRouteErrorResponse, json, matchPath, matchRoutes, parsePath, redirect, redirectDocument, resolvePath } from '@remix-run/router';\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n// Create react-specific types from the agnostic types in @remix-run/router to\n// export from react-router\nconst DataRouterContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  DataRouterContext.displayName = \"DataRouter\";\n}\nconst DataRouterStateContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  DataRouterStateContext.displayName = \"DataRouterState\";\n}\nconst AwaitContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  AwaitContext.displayName = \"Await\";\n}\n\n/**\n * A Navigator is a \"location changer\"; it's how you get to different locations.\n *\n * Every history instance conforms to the Navigator interface, but the\n * distinction is useful primarily when it comes to the low-level <Router> API\n * where both the location and a navigator must be provided separately in order\n * to avoid \"tearing\" that may occur in a suspense-enabled app if the action\n * and/or location were to be read directly from the history instance.\n */\n\nconst NavigationContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  NavigationContext.displayName = \"Navigation\";\n}\nconst LocationContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  LocationContext.displayName = \"Location\";\n}\nconst RouteContext = /*#__PURE__*/React.createContext({\n  outlet: null,\n  matches: [],\n  isDataRoute: false\n});\nif (process.env.NODE_ENV !== \"production\") {\n  RouteContext.displayName = \"Route\";\n}\nconst RouteErrorContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  RouteErrorContext.displayName = \"RouteError\";\n}\n\n/**\n * Returns the full href for the given \"to\" value. This is useful for building\n * custom links that are also accessible and preserve right-click behavior.\n *\n * @see https://reactrouter.com/hooks/use-href\n */\nfunction useHref(to, _temp) {\n  let {\n    relative\n  } = _temp === void 0 ? {} : _temp;\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useHref() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let {\n    basename,\n    navigator\n  } = React.useContext(NavigationContext);\n  let {\n    hash,\n    pathname,\n    search\n  } = useResolvedPath(to, {\n    relative\n  });\n  let joinedPathname = pathname;\n\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the href.  If this is a root navigation, then just use the raw\n  // basename which allows the basename to have full control over the presence\n  // of a trailing slash on root links\n  if (basename !== \"/\") {\n    joinedPathname = pathname === \"/\" ? basename : joinPaths([basename, pathname]);\n  }\n  return navigator.createHref({\n    pathname: joinedPathname,\n    search,\n    hash\n  });\n}\n\n/**\n * Returns true if this component is a descendant of a <Router>.\n *\n * @see https://reactrouter.com/hooks/use-in-router-context\n */\nfunction useInRouterContext() {\n  return React.useContext(LocationContext) != null;\n}\n\n/**\n * Returns the current location object, which represents the current URL in web\n * browsers.\n *\n * Note: If you're using this it may mean you're doing some of your own\n * \"routing\" in your app, and we'd like to know what your use case is. We may\n * be able to provide something higher-level to better suit your needs.\n *\n * @see https://reactrouter.com/hooks/use-location\n */\nfunction useLocation() {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useLocation() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  return React.useContext(LocationContext).location;\n}\n\n/**\n * Returns the current navigation action which describes how the router came to\n * the current location, either by a pop, push, or replace on the history stack.\n *\n * @see https://reactrouter.com/hooks/use-navigation-type\n */\nfunction useNavigationType() {\n  return React.useContext(LocationContext).navigationType;\n}\n\n/**\n * Returns a PathMatch object if the given pattern matches the current URL.\n * This is useful for components that need to know \"active\" state, e.g.\n * <NavLink>.\n *\n * @see https://reactrouter.com/hooks/use-match\n */\nfunction useMatch(pattern) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useMatch() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let {\n    pathname\n  } = useLocation();\n  return React.useMemo(() => matchPath(pattern, pathname), [pathname, pattern]);\n}\n\n/**\n * The interface for the navigate() function returned from useNavigate().\n */\n\nconst navigateEffectWarning = \"You should call navigate() in a React.useEffect(), not when \" + \"your component is first rendered.\";\n\n// Mute warnings for calls to useNavigate in SSR environments\nfunction useIsomorphicLayoutEffect(cb) {\n  let isStatic = React.useContext(NavigationContext).static;\n  if (!isStatic) {\n    // We should be able to get rid of this once react 18.3 is released\n    // See: https://github.com/facebook/react/pull/26395\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(cb);\n  }\n}\n\n/**\n * Returns an imperative method for changing the location. Used by <Link>s, but\n * may also be used by other elements to change the location.\n *\n * @see https://reactrouter.com/hooks/use-navigate\n */\nfunction useNavigate() {\n  let {\n    isDataRoute\n  } = React.useContext(RouteContext);\n  // Conditional usage is OK here because the usage of a data router is static\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return isDataRoute ? useNavigateStable() : useNavigateUnstable();\n}\nfunction useNavigateUnstable() {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useNavigate() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let dataRouterContext = React.useContext(DataRouterContext);\n  let {\n    basename,\n    navigator\n  } = React.useContext(NavigationContext);\n  let {\n    matches\n  } = React.useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = useLocation();\n  let routePathnamesJson = JSON.stringify(UNSAFE_getPathContributingMatches(matches).map(match => match.pathnameBase));\n  let activeRef = React.useRef(false);\n  useIsomorphicLayoutEffect(() => {\n    activeRef.current = true;\n  });\n  let navigate = React.useCallback(function (to, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(activeRef.current, navigateEffectWarning) : void 0;\n\n    // Short circuit here since if this happens on first render the navigate\n    // is useless because we haven't wired up our history listener yet\n    if (!activeRef.current) return;\n    if (typeof to === \"number\") {\n      navigator.go(to);\n      return;\n    }\n    let path = resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, options.relative === \"path\");\n\n    // If we're operating within a basename, prepend it to the pathname prior\n    // to handing off to history (but only if we're not in a data router,\n    // otherwise it'll prepend the basename inside of the router).\n    // If this is a root navigation, then we navigate to the raw basename\n    // which allows the basename to have full control over the presence of a\n    // trailing slash on root links\n    if (dataRouterContext == null && basename !== \"/\") {\n      path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n    }\n    (!!options.replace ? navigator.replace : navigator.push)(path, options.state, options);\n  }, [basename, navigator, routePathnamesJson, locationPathname, dataRouterContext]);\n  return navigate;\n}\nconst OutletContext = /*#__PURE__*/React.createContext(null);\n\n/**\n * Returns the context (if provided) for the child route at this level of the route\n * hierarchy.\n * @see https://reactrouter.com/hooks/use-outlet-context\n */\nfunction useOutletContext() {\n  return React.useContext(OutletContext);\n}\n\n/**\n * Returns the element for the child route at this level of the route\n * hierarchy. Used internally by <Outlet> to render child routes.\n *\n * @see https://reactrouter.com/hooks/use-outlet\n */\nfunction useOutlet(context) {\n  let outlet = React.useContext(RouteContext).outlet;\n  if (outlet) {\n    return /*#__PURE__*/React.createElement(OutletContext.Provider, {\n      value: context\n    }, outlet);\n  }\n  return outlet;\n}\n\n/**\n * Returns an object of key/value pairs of the dynamic params from the current\n * URL that were matched by the route path.\n *\n * @see https://reactrouter.com/hooks/use-params\n */\nfunction useParams() {\n  let {\n    matches\n  } = React.useContext(RouteContext);\n  let routeMatch = matches[matches.length - 1];\n  return routeMatch ? routeMatch.params : {};\n}\n\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/hooks/use-resolved-path\n */\nfunction useResolvedPath(to, _temp2) {\n  let {\n    relative\n  } = _temp2 === void 0 ? {} : _temp2;\n  let {\n    matches\n  } = React.useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = useLocation();\n  let routePathnamesJson = JSON.stringify(UNSAFE_getPathContributingMatches(matches).map(match => match.pathnameBase));\n  return React.useMemo(() => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, relative === \"path\"), [to, routePathnamesJson, locationPathname, relative]);\n}\n\n/**\n * Returns the element of the route that matched the current location, prepared\n * with the correct context to render the remainder of the route tree. Route\n * elements in the tree must render an <Outlet> to render their child route's\n * element.\n *\n * @see https://reactrouter.com/hooks/use-routes\n */\nfunction useRoutes(routes, locationArg) {\n  return useRoutesImpl(routes, locationArg);\n}\n\n// Internal implementation with accept optional param for RouterProvider usage\nfunction useRoutesImpl(routes, locationArg, dataRouterState) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useRoutes() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let {\n    navigator\n  } = React.useContext(NavigationContext);\n  let {\n    matches: parentMatches\n  } = React.useContext(RouteContext);\n  let routeMatch = parentMatches[parentMatches.length - 1];\n  let parentParams = routeMatch ? routeMatch.params : {};\n  let parentPathname = routeMatch ? routeMatch.pathname : \"/\";\n  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\n  let parentRoute = routeMatch && routeMatch.route;\n  if (process.env.NODE_ENV !== \"production\") {\n    // You won't get a warning about 2 different <Routes> under a <Route>\n    // without a trailing *, but this is a best-effort warning anyway since we\n    // cannot even give the warning unless they land at the parent route.\n    //\n    // Example:\n    //\n    // <Routes>\n    //   {/* This route path MUST end with /* because otherwise\n    //       it will never match /blog/post/123 */}\n    //   <Route path=\"blog\" element={<Blog />} />\n    //   <Route path=\"blog/feed\" element={<BlogFeed />} />\n    // </Routes>\n    //\n    // function Blog() {\n    //   return (\n    //     <Routes>\n    //       <Route path=\"post/:id\" element={<Post />} />\n    //     </Routes>\n    //   );\n    // }\n    let parentPath = parentRoute && parentRoute.path || \"\";\n    warningOnce(parentPathname, !parentRoute || parentPath.endsWith(\"*\"), \"You rendered descendant <Routes> (or called `useRoutes()`) at \" + (\"\\\"\" + parentPathname + \"\\\" (under <Route path=\\\"\" + parentPath + \"\\\">) but the \") + \"parent route path has no trailing \\\"*\\\". This means if you navigate \" + \"deeper, the parent won't match anymore and therefore the child \" + \"routes will never render.\\n\\n\" + (\"Please change the parent <Route path=\\\"\" + parentPath + \"\\\"> to <Route \") + (\"path=\\\"\" + (parentPath === \"/\" ? \"*\" : parentPath + \"/*\") + \"\\\">.\"));\n  }\n  let locationFromContext = useLocation();\n  let location;\n  if (locationArg) {\n    var _parsedLocationArg$pa;\n    let parsedLocationArg = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n    !(parentPathnameBase === \"/\" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, \" + \"the location pathname must begin with the portion of the URL pathname that was \" + (\"matched by all parent routes. The current pathname base is \\\"\" + parentPathnameBase + \"\\\" \") + (\"but pathname \\\"\" + parsedLocationArg.pathname + \"\\\" was given in the `location` prop.\")) : UNSAFE_invariant(false) : void 0;\n    location = parsedLocationArg;\n  } else {\n    location = locationFromContext;\n  }\n  let pathname = location.pathname || \"/\";\n  let remainingPathname = parentPathnameBase === \"/\" ? pathname : pathname.slice(parentPathnameBase.length) || \"/\";\n  let matches = matchRoutes(routes, {\n    pathname: remainingPathname\n  });\n  if (process.env.NODE_ENV !== \"production\") {\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(parentRoute || matches != null, \"No routes matched location \\\"\" + location.pathname + location.search + location.hash + \"\\\" \") : void 0;\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(matches == null || matches[matches.length - 1].route.element !== undefined || matches[matches.length - 1].route.Component !== undefined, \"Matched leaf route at location \\\"\" + location.pathname + location.search + location.hash + \"\\\" \" + \"does not have an element or Component. This means it will render an <Outlet /> with a \" + \"null value by default resulting in an \\\"empty\\\" page.\") : void 0;\n  }\n  let renderedMatches = _renderMatches(matches && matches.map(match => Object.assign({}, match, {\n    params: Object.assign({}, parentParams, match.params),\n    pathname: joinPaths([parentPathnameBase,\n    // Re-encode pathnames that were decoded inside matchRoutes\n    navigator.encodeLocation ? navigator.encodeLocation(match.pathname).pathname : match.pathname]),\n    pathnameBase: match.pathnameBase === \"/\" ? parentPathnameBase : joinPaths([parentPathnameBase,\n    // Re-encode pathnames that were decoded inside matchRoutes\n    navigator.encodeLocation ? navigator.encodeLocation(match.pathnameBase).pathname : match.pathnameBase])\n  })), parentMatches, dataRouterState);\n\n  // When a user passes in a `locationArg`, the associated routes need to\n  // be wrapped in a new `LocationContext.Provider` in order for `useLocation`\n  // to use the scoped location instead of the global location.\n  if (locationArg && renderedMatches) {\n    return /*#__PURE__*/React.createElement(LocationContext.Provider, {\n      value: {\n        location: _extends({\n          pathname: \"/\",\n          search: \"\",\n          hash: \"\",\n          state: null,\n          key: \"default\"\n        }, location),\n        navigationType: Action.Pop\n      }\n    }, renderedMatches);\n  }\n  return renderedMatches;\n}\nfunction DefaultErrorComponent() {\n  let error = useRouteError();\n  let message = isRouteErrorResponse(error) ? error.status + \" \" + error.statusText : error instanceof Error ? error.message : JSON.stringify(error);\n  let stack = error instanceof Error ? error.stack : null;\n  let lightgrey = \"rgba(200,200,200, 0.5)\";\n  let preStyles = {\n    padding: \"0.5rem\",\n    backgroundColor: lightgrey\n  };\n  let codeStyles = {\n    padding: \"2px 4px\",\n    backgroundColor: lightgrey\n  };\n  let devInfo = null;\n  if (process.env.NODE_ENV !== \"production\") {\n    console.error(\"Error handled by React Router default ErrorBoundary:\", error);\n    devInfo = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", null, \"\\uD83D\\uDCBF Hey developer \\uD83D\\uDC4B\"), /*#__PURE__*/React.createElement(\"p\", null, \"You can provide a way better UX than this when your app throws errors by providing your own \", /*#__PURE__*/React.createElement(\"code\", {\n      style: codeStyles\n    }, \"ErrorBoundary\"), \" or\", \" \", /*#__PURE__*/React.createElement(\"code\", {\n      style: codeStyles\n    }, \"errorElement\"), \" prop on your route.\"));\n  }\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h2\", null, \"Unexpected Application Error!\"), /*#__PURE__*/React.createElement(\"h3\", {\n    style: {\n      fontStyle: \"italic\"\n    }\n  }, message), stack ? /*#__PURE__*/React.createElement(\"pre\", {\n    style: preStyles\n  }, stack) : null, devInfo);\n}\nconst defaultErrorElement = /*#__PURE__*/React.createElement(DefaultErrorComponent, null);\nclass RenderErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      location: props.location,\n      revalidation: props.revalidation,\n      error: props.error\n    };\n  }\n  static getDerivedStateFromError(error) {\n    return {\n      error: error\n    };\n  }\n  static getDerivedStateFromProps(props, state) {\n    // When we get into an error state, the user will likely click \"back\" to the\n    // previous page that didn't have an error. Because this wraps the entire\n    // application, that will have no effect--the error page continues to display.\n    // This gives us a mechanism to recover from the error when the location changes.\n    //\n    // Whether we're in an error state or not, we update the location in state\n    // so that when we are in an error state, it gets reset when a new location\n    // comes in and the user recovers from the error.\n    if (state.location !== props.location || state.revalidation !== \"idle\" && props.revalidation === \"idle\") {\n      return {\n        error: props.error,\n        location: props.location,\n        revalidation: props.revalidation\n      };\n    }\n\n    // If we're not changing locations, preserve the location but still surface\n    // any new errors that may come through. We retain the existing error, we do\n    // this because the error provided from the app state may be cleared without\n    // the location changing.\n    return {\n      error: props.error || state.error,\n      location: state.location,\n      revalidation: props.revalidation || state.revalidation\n    };\n  }\n  componentDidCatch(error, errorInfo) {\n    console.error(\"React Router caught the following error during render\", error, errorInfo);\n  }\n  render() {\n    return this.state.error ? /*#__PURE__*/React.createElement(RouteContext.Provider, {\n      value: this.props.routeContext\n    }, /*#__PURE__*/React.createElement(RouteErrorContext.Provider, {\n      value: this.state.error,\n      children: this.props.component\n    })) : this.props.children;\n  }\n}\nfunction RenderedRoute(_ref) {\n  let {\n    routeContext,\n    match,\n    children\n  } = _ref;\n  let dataRouterContext = React.useContext(DataRouterContext);\n\n  // Track how deep we got in our render pass to emulate SSR componentDidCatch\n  // in a DataStaticRouter\n  if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match.route.errorElement || match.route.ErrorBoundary)) {\n    dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;\n  }\n  return /*#__PURE__*/React.createElement(RouteContext.Provider, {\n    value: routeContext\n  }, children);\n}\nfunction _renderMatches(matches, parentMatches, dataRouterState) {\n  var _dataRouterState2;\n  if (parentMatches === void 0) {\n    parentMatches = [];\n  }\n  if (dataRouterState === void 0) {\n    dataRouterState = null;\n  }\n  if (matches == null) {\n    var _dataRouterState;\n    if ((_dataRouterState = dataRouterState) != null && _dataRouterState.errors) {\n      // Don't bail if we have data router errors so we can render them in the\n      // boundary.  Use the pre-matched (or shimmed) matches\n      matches = dataRouterState.matches;\n    } else {\n      return null;\n    }\n  }\n  let renderedMatches = matches;\n\n  // If we have data errors, trim matches to the highest error boundary\n  let errors = (_dataRouterState2 = dataRouterState) == null ? void 0 : _dataRouterState2.errors;\n  if (errors != null) {\n    let errorIndex = renderedMatches.findIndex(m => m.route.id && (errors == null ? void 0 : errors[m.route.id]));\n    !(errorIndex >= 0) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"Could not find a matching route for errors on route IDs: \" + Object.keys(errors).join(\",\")) : UNSAFE_invariant(false) : void 0;\n    renderedMatches = renderedMatches.slice(0, Math.min(renderedMatches.length, errorIndex + 1));\n  }\n  return renderedMatches.reduceRight((outlet, match, index) => {\n    let error = match.route.id ? errors == null ? void 0 : errors[match.route.id] : null;\n    // Only data routers handle errors\n    let errorElement = null;\n    if (dataRouterState) {\n      errorElement = match.route.errorElement || defaultErrorElement;\n    }\n    let matches = parentMatches.concat(renderedMatches.slice(0, index + 1));\n    let getChildren = () => {\n      let children;\n      if (error) {\n        children = errorElement;\n      } else if (match.route.Component) {\n        // Note: This is a de-optimized path since React won't re-use the\n        // ReactElement since it's identity changes with each new\n        // React.createElement call.  We keep this so folks can use\n        // `<Route Component={...}>` in `<Routes>` but generally `Component`\n        // usage is only advised in `RouterProvider` when we can convert it to\n        // `element` ahead of time.\n        children = /*#__PURE__*/React.createElement(match.route.Component, null);\n      } else if (match.route.element) {\n        children = match.route.element;\n      } else {\n        children = outlet;\n      }\n      return /*#__PURE__*/React.createElement(RenderedRoute, {\n        match: match,\n        routeContext: {\n          outlet,\n          matches,\n          isDataRoute: dataRouterState != null\n        },\n        children: children\n      });\n    };\n    // Only wrap in an error boundary within data router usages when we have an\n    // ErrorBoundary/errorElement on this route.  Otherwise let it bubble up to\n    // an ancestor ErrorBoundary/errorElement\n    return dataRouterState && (match.route.ErrorBoundary || match.route.errorElement || index === 0) ? /*#__PURE__*/React.createElement(RenderErrorBoundary, {\n      location: dataRouterState.location,\n      revalidation: dataRouterState.revalidation,\n      component: errorElement,\n      error: error,\n      children: getChildren(),\n      routeContext: {\n        outlet: null,\n        matches,\n        isDataRoute: true\n      }\n    }) : getChildren();\n  }, null);\n}\nvar DataRouterHook = /*#__PURE__*/function (DataRouterHook) {\n  DataRouterHook[\"UseBlocker\"] = \"useBlocker\";\n  DataRouterHook[\"UseRevalidator\"] = \"useRevalidator\";\n  DataRouterHook[\"UseNavigateStable\"] = \"useNavigate\";\n  return DataRouterHook;\n}(DataRouterHook || {});\nvar DataRouterStateHook = /*#__PURE__*/function (DataRouterStateHook) {\n  DataRouterStateHook[\"UseBlocker\"] = \"useBlocker\";\n  DataRouterStateHook[\"UseLoaderData\"] = \"useLoaderData\";\n  DataRouterStateHook[\"UseActionData\"] = \"useActionData\";\n  DataRouterStateHook[\"UseRouteError\"] = \"useRouteError\";\n  DataRouterStateHook[\"UseNavigation\"] = \"useNavigation\";\n  DataRouterStateHook[\"UseRouteLoaderData\"] = \"useRouteLoaderData\";\n  DataRouterStateHook[\"UseMatches\"] = \"useMatches\";\n  DataRouterStateHook[\"UseRevalidator\"] = \"useRevalidator\";\n  DataRouterStateHook[\"UseNavigateStable\"] = \"useNavigate\";\n  DataRouterStateHook[\"UseRouteId\"] = \"useRouteId\";\n  return DataRouterStateHook;\n}(DataRouterStateHook || {});\nfunction getDataRouterConsoleError(hookName) {\n  return hookName + \" must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.\";\n}\nfunction useDataRouterContext(hookName) {\n  let ctx = React.useContext(DataRouterContext);\n  !ctx ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return ctx;\n}\nfunction useDataRouterState(hookName) {\n  let state = React.useContext(DataRouterStateContext);\n  !state ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return state;\n}\nfunction useRouteContext(hookName) {\n  let route = React.useContext(RouteContext);\n  !route ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return route;\n}\n\n// Internal version with hookName-aware debugging\nfunction useCurrentRouteId(hookName) {\n  let route = useRouteContext(hookName);\n  let thisRoute = route.matches[route.matches.length - 1];\n  !thisRoute.route.id ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, hookName + \" can only be used on routes that contain a unique \\\"id\\\"\") : UNSAFE_invariant(false) : void 0;\n  return thisRoute.route.id;\n}\n\n/**\n * Returns the ID for the nearest contextual route\n */\nfunction useRouteId() {\n  return useCurrentRouteId(DataRouterStateHook.UseRouteId);\n}\n\n/**\n * Returns the current navigation, defaulting to an \"idle\" navigation when\n * no navigation is in progress\n */\nfunction useNavigation() {\n  let state = useDataRouterState(DataRouterStateHook.UseNavigation);\n  return state.navigation;\n}\n\n/**\n * Returns a revalidate function for manually triggering revalidation, as well\n * as the current state of any manual revalidations\n */\nfunction useRevalidator() {\n  let dataRouterContext = useDataRouterContext(DataRouterHook.UseRevalidator);\n  let state = useDataRouterState(DataRouterStateHook.UseRevalidator);\n  return React.useMemo(() => ({\n    revalidate: dataRouterContext.router.revalidate,\n    state: state.revalidation\n  }), [dataRouterContext.router.revalidate, state.revalidation]);\n}\n\n/**\n * Returns the active route matches, useful for accessing loaderData for\n * parent/child routes or the route \"handle\" property\n */\nfunction useMatches() {\n  let {\n    matches,\n    loaderData\n  } = useDataRouterState(DataRouterStateHook.UseMatches);\n  return React.useMemo(() => matches.map(m => UNSAFE_convertRouteMatchToUiMatch(m, loaderData)), [matches, loaderData]);\n}\n\n/**\n * Returns the loader data for the nearest ancestor Route loader\n */\nfunction useLoaderData() {\n  let state = useDataRouterState(DataRouterStateHook.UseLoaderData);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);\n  if (state.errors && state.errors[routeId] != null) {\n    console.error(\"You cannot `useLoaderData` in an errorElement (routeId: \" + routeId + \")\");\n    return undefined;\n  }\n  return state.loaderData[routeId];\n}\n\n/**\n * Returns the loaderData for the given routeId\n */\nfunction useRouteLoaderData(routeId) {\n  let state = useDataRouterState(DataRouterStateHook.UseRouteLoaderData);\n  return state.loaderData[routeId];\n}\n\n/**\n * Returns the action data for the nearest ancestor Route action\n */\nfunction useActionData() {\n  let state = useDataRouterState(DataRouterStateHook.UseActionData);\n  let route = React.useContext(RouteContext);\n  !route ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useActionData must be used inside a RouteContext\") : UNSAFE_invariant(false) : void 0;\n  return Object.values((state == null ? void 0 : state.actionData) || {})[0];\n}\n\n/**\n * Returns the nearest ancestor Route error, which could be a loader/action\n * error or a render error.  This is intended to be called from your\n * ErrorBoundary/errorElement to display a proper error message.\n */\nfunction useRouteError() {\n  var _state$errors;\n  let error = React.useContext(RouteErrorContext);\n  let state = useDataRouterState(DataRouterStateHook.UseRouteError);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseRouteError);\n\n  // If this was a render error, we put it in a RouteError context inside\n  // of RenderErrorBoundary\n  if (error) {\n    return error;\n  }\n\n  // Otherwise look for errors from our data router state\n  return (_state$errors = state.errors) == null ? void 0 : _state$errors[routeId];\n}\n\n/**\n * Returns the happy-path data from the nearest ancestor <Await /> value\n */\nfunction useAsyncValue() {\n  let value = React.useContext(AwaitContext);\n  return value == null ? void 0 : value._data;\n}\n\n/**\n * Returns the error from the nearest ancestor <Await /> value\n */\nfunction useAsyncError() {\n  let value = React.useContext(AwaitContext);\n  return value == null ? void 0 : value._error;\n}\nlet blockerId = 0;\n\n/**\n * Allow the application to block navigations within the SPA and present the\n * user a confirmation dialog to confirm the navigation.  Mostly used to avoid\n * using half-filled form data.  This does not handle hard-reloads or\n * cross-origin navigations.\n */\nfunction useBlocker(shouldBlock) {\n  let {\n    router,\n    basename\n  } = useDataRouterContext(DataRouterHook.UseBlocker);\n  let state = useDataRouterState(DataRouterStateHook.UseBlocker);\n  let [blockerKey, setBlockerKey] = React.useState(\"\");\n  let blockerFunction = React.useCallback(arg => {\n    if (typeof shouldBlock !== \"function\") {\n      return !!shouldBlock;\n    }\n    if (basename === \"/\") {\n      return shouldBlock(arg);\n    }\n\n    // If they provided us a function and we've got an active basename, strip\n    // it from the locations we expose to the user to match the behavior of\n    // useLocation\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = arg;\n    return shouldBlock({\n      currentLocation: _extends({}, currentLocation, {\n        pathname: stripBasename(currentLocation.pathname, basename) || currentLocation.pathname\n      }),\n      nextLocation: _extends({}, nextLocation, {\n        pathname: stripBasename(nextLocation.pathname, basename) || nextLocation.pathname\n      }),\n      historyAction\n    });\n  }, [basename, shouldBlock]);\n\n  // This effect is in charge of blocker key assignment and deletion (which is\n  // tightly coupled to the key)\n  React.useEffect(() => {\n    let key = String(++blockerId);\n    setBlockerKey(key);\n    return () => router.deleteBlocker(key);\n  }, [router]);\n\n  // This effect handles assigning the blockerFunction.  This is to handle\n  // unstable blocker function identities, and happens only after the prior\n  // effect so we don't get an orphaned blockerFunction in the router with a\n  // key of \"\".  Until then we just have the IDLE_BLOCKER.\n  React.useEffect(() => {\n    if (blockerKey !== \"\") {\n      router.getBlocker(blockerKey, blockerFunction);\n    }\n  }, [router, blockerKey, blockerFunction]);\n\n  // Prefer the blocker from `state` not `router.state` since DataRouterContext\n  // is memoized so this ensures we update on blocker state updates\n  return blockerKey && state.blockers.has(blockerKey) ? state.blockers.get(blockerKey) : IDLE_BLOCKER;\n}\n\n/**\n * Stable version of useNavigate that is used when we are in the context of\n * a RouterProvider.\n */\nfunction useNavigateStable() {\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseNavigateStable);\n  let id = useCurrentRouteId(DataRouterStateHook.UseNavigateStable);\n  let activeRef = React.useRef(false);\n  useIsomorphicLayoutEffect(() => {\n    activeRef.current = true;\n  });\n  let navigate = React.useCallback(function (to, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(activeRef.current, navigateEffectWarning) : void 0;\n\n    // Short circuit here since if this happens on first render the navigate\n    // is useless because we haven't wired up our router subscriber yet\n    if (!activeRef.current) return;\n    if (typeof to === \"number\") {\n      router.navigate(to);\n    } else {\n      router.navigate(to, _extends({\n        fromRouteId: id\n      }, options));\n    }\n  }, [router, id]);\n  return navigate;\n}\nconst alreadyWarned = {};\nfunction warningOnce(key, cond, message) {\n  if (!cond && !alreadyWarned[key]) {\n    alreadyWarned[key] = true;\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, message) : void 0;\n  }\n}\n\n/**\n  Webpack + React 17 fails to compile on any of the following because webpack\n  complains that `startTransition` doesn't exist in `React`:\n  * import { startTransition } from \"react\"\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React.startTransition(() => setState()) : setState()\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React[\"startTransition\"](() => setState()) : setState()\n\n  Moving it to a constant such as the following solves the Webpack/React 17 issue:\n  * import * as React from from \"react\";\n    const START_TRANSITION = \"startTransition\";\n    START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()\n\n  However, that introduces webpack/terser minification issues in production builds\n  in React 18 where minification/obfuscation ends up removing the call of\n  React.startTransition entirely from the first half of the ternary.  Grabbing\n  this exported reference once up front resolves that issue.\n\n  See https://github.com/remix-run/react-router/issues/10579\n*/\nconst START_TRANSITION = \"startTransition\";\nconst startTransitionImpl = React[START_TRANSITION];\n\n/**\n * Given a Remix Router instance, render the appropriate UI\n */\nfunction RouterProvider(_ref) {\n  let {\n    fallbackElement,\n    router,\n    future\n  } = _ref;\n  // Need to use a layout effect here so we are subscribed early enough to\n  // pick up on any render-driven redirects/navigations (useEffect/<Navigate>)\n  let [state, setStateImpl] = React.useState(router.state);\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => router.subscribe(setState), [router, setState]);\n  let navigator = React.useMemo(() => {\n    return {\n      createHref: router.createHref,\n      encodeLocation: router.encodeLocation,\n      go: n => router.navigate(n),\n      push: (to, state, opts) => router.navigate(to, {\n        state,\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n      }),\n      replace: (to, state, opts) => router.navigate(to, {\n        replace: true,\n        state,\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n      })\n    };\n  }, [router]);\n  let basename = router.basename || \"/\";\n  let dataRouterContext = React.useMemo(() => ({\n    router,\n    navigator,\n    static: false,\n    basename\n  }), [router, navigator, basename]);\n\n  // The fragment and {null} here are important!  We need them to keep React 18's\n  // useId happy when we are server-rendering since we may have a <script> here\n  // containing the hydrated server-side staticContext (from StaticRouterProvider).\n  // useId relies on the component tree structure to generate deterministic id's\n  // so we need to ensure it remains the same on the client even though\n  // we don't need the <script> tag\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DataRouterContext.Provider, {\n    value: dataRouterContext\n  }, /*#__PURE__*/React.createElement(DataRouterStateContext.Provider, {\n    value: state\n  }, /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    location: state.location,\n    navigationType: state.historyAction,\n    navigator: navigator\n  }, state.initialized ? /*#__PURE__*/React.createElement(DataRoutes, {\n    routes: router.routes,\n    state: state\n  }) : fallbackElement))), null);\n}\nfunction DataRoutes(_ref2) {\n  let {\n    routes,\n    state\n  } = _ref2;\n  return useRoutesImpl(routes, undefined, state);\n}\n/**\n * A <Router> that stores all entries in memory.\n *\n * @see https://reactrouter.com/router-components/memory-router\n */\nfunction MemoryRouter(_ref3) {\n  let {\n    basename,\n    children,\n    initialEntries,\n    initialIndex,\n    future\n  } = _ref3;\n  let historyRef = React.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({\n      initialEntries,\n      initialIndex,\n      v5Compat: true\n    });\n  }\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history\n  });\n}\n/**\n * Changes the current location.\n *\n * Note: This API is mostly useful in React.Component subclasses that are not\n * able to use hooks. In functional components, we recommend you use the\n * `useNavigate` hook instead.\n *\n * @see https://reactrouter.com/components/navigate\n */\nfunction Navigate(_ref4) {\n  let {\n    to,\n    replace,\n    state,\n    relative\n  } = _ref4;\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of\n  // the router loaded. We can help them understand how to avoid that.\n  \"<Navigate> may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(!React.useContext(NavigationContext).static, \"<Navigate> must not be used on the initial render in a <StaticRouter>. \" + \"This is a no-op, but you should modify your code so the <Navigate> is \" + \"only ever rendered in response to some user interaction or state change.\") : void 0;\n  let {\n    matches\n  } = React.useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = useLocation();\n  let navigate = useNavigate();\n\n  // Resolve the path outside of the effect so that when effects run twice in\n  // StrictMode they navigate to the same place\n  let path = resolveTo(to, UNSAFE_getPathContributingMatches(matches).map(match => match.pathnameBase), locationPathname, relative === \"path\");\n  let jsonPath = JSON.stringify(path);\n  React.useEffect(() => navigate(JSON.parse(jsonPath), {\n    replace,\n    state,\n    relative\n  }), [navigate, jsonPath, relative, replace, state]);\n  return null;\n}\n/**\n * Renders the child route's element, if there is one.\n *\n * @see https://reactrouter.com/components/outlet\n */\nfunction Outlet(props) {\n  return useOutlet(props.context);\n}\n/**\n * Declares an element that should be rendered at a certain URL path.\n *\n * @see https://reactrouter.com/components/route\n */\nfunction Route(_props) {\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"A <Route> is only ever to be used as the child of <Routes> element, \" + \"never rendered directly. Please wrap your <Route> in a <Routes>.\") : UNSAFE_invariant(false) ;\n}\n/**\n * Provides location context for the rest of the app.\n *\n * Note: You usually won't render a <Router> directly. Instead, you'll render a\n * router that is more specific to your environment such as a <BrowserRouter>\n * in web browsers or a <StaticRouter> for server rendering.\n *\n * @see https://reactrouter.com/router-components/router\n */\nfunction Router(_ref5) {\n  let {\n    basename: basenameProp = \"/\",\n    children = null,\n    location: locationProp,\n    navigationType = Action.Pop,\n    navigator,\n    static: staticProp = false\n  } = _ref5;\n  !!useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"You cannot render a <Router> inside another <Router>.\" + \" You should never have more than one in your app.\") : UNSAFE_invariant(false) : void 0;\n\n  // Preserve trailing slashes on basename, so we can let the user control\n  // the enforcement of trailing slashes throughout the app\n  let basename = basenameProp.replace(/^\\/*/, \"/\");\n  let navigationContext = React.useMemo(() => ({\n    basename,\n    navigator,\n    static: staticProp\n  }), [basename, navigator, staticProp]);\n  if (typeof locationProp === \"string\") {\n    locationProp = parsePath(locationProp);\n  }\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\",\n    state = null,\n    key = \"default\"\n  } = locationProp;\n  let locationContext = React.useMemo(() => {\n    let trailingPathname = stripBasename(pathname, basename);\n    if (trailingPathname == null) {\n      return null;\n    }\n    return {\n      location: {\n        pathname: trailingPathname,\n        search,\n        hash,\n        state,\n        key\n      },\n      navigationType\n    };\n  }, [basename, pathname, search, hash, state, key, navigationType]);\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(locationContext != null, \"<Router basename=\\\"\" + basename + \"\\\"> is not able to match the URL \" + (\"\\\"\" + pathname + search + hash + \"\\\" because it does not start with the \") + \"basename, so the <Router> won't render anything.\") : void 0;\n  if (locationContext == null) {\n    return null;\n  }\n  return /*#__PURE__*/React.createElement(NavigationContext.Provider, {\n    value: navigationContext\n  }, /*#__PURE__*/React.createElement(LocationContext.Provider, {\n    children: children,\n    value: locationContext\n  }));\n}\n/**\n * A container for a nested tree of <Route> elements that renders the branch\n * that best matches the current location.\n *\n * @see https://reactrouter.com/components/routes\n */\nfunction Routes(_ref6) {\n  let {\n    children,\n    location\n  } = _ref6;\n  return useRoutes(createRoutesFromChildren(children), location);\n}\n/**\n * Component to use for rendering lazily loaded data from returning defer()\n * in a loader function\n */\nfunction Await(_ref7) {\n  let {\n    children,\n    errorElement,\n    resolve\n  } = _ref7;\n  return /*#__PURE__*/React.createElement(AwaitErrorBoundary, {\n    resolve: resolve,\n    errorElement: errorElement\n  }, /*#__PURE__*/React.createElement(ResolveAwait, null, children));\n}\nvar AwaitRenderStatus = /*#__PURE__*/function (AwaitRenderStatus) {\n  AwaitRenderStatus[AwaitRenderStatus[\"pending\"] = 0] = \"pending\";\n  AwaitRenderStatus[AwaitRenderStatus[\"success\"] = 1] = \"success\";\n  AwaitRenderStatus[AwaitRenderStatus[\"error\"] = 2] = \"error\";\n  return AwaitRenderStatus;\n}(AwaitRenderStatus || {});\nconst neverSettledPromise = new Promise(() => {});\nclass AwaitErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null\n    };\n  }\n  static getDerivedStateFromError(error) {\n    return {\n      error\n    };\n  }\n  componentDidCatch(error, errorInfo) {\n    console.error(\"<Await> caught the following error during render\", error, errorInfo);\n  }\n  render() {\n    let {\n      children,\n      errorElement,\n      resolve\n    } = this.props;\n    let promise = null;\n    let status = AwaitRenderStatus.pending;\n    if (!(resolve instanceof Promise)) {\n      // Didn't get a promise - provide as a resolved promise\n      status = AwaitRenderStatus.success;\n      promise = Promise.resolve();\n      Object.defineProperty(promise, \"_tracked\", {\n        get: () => true\n      });\n      Object.defineProperty(promise, \"_data\", {\n        get: () => resolve\n      });\n    } else if (this.state.error) {\n      // Caught a render error, provide it as a rejected promise\n      status = AwaitRenderStatus.error;\n      let renderError = this.state.error;\n      promise = Promise.reject().catch(() => {}); // Avoid unhandled rejection warnings\n      Object.defineProperty(promise, \"_tracked\", {\n        get: () => true\n      });\n      Object.defineProperty(promise, \"_error\", {\n        get: () => renderError\n      });\n    } else if (resolve._tracked) {\n      // Already tracked promise - check contents\n      promise = resolve;\n      status = promise._error !== undefined ? AwaitRenderStatus.error : promise._data !== undefined ? AwaitRenderStatus.success : AwaitRenderStatus.pending;\n    } else {\n      // Raw (untracked) promise - track it\n      status = AwaitRenderStatus.pending;\n      Object.defineProperty(resolve, \"_tracked\", {\n        get: () => true\n      });\n      promise = resolve.then(data => Object.defineProperty(resolve, \"_data\", {\n        get: () => data\n      }), error => Object.defineProperty(resolve, \"_error\", {\n        get: () => error\n      }));\n    }\n    if (status === AwaitRenderStatus.error && promise._error instanceof AbortedDeferredError) {\n      // Freeze the UI by throwing a never resolved promise\n      throw neverSettledPromise;\n    }\n    if (status === AwaitRenderStatus.error && !errorElement) {\n      // No errorElement, throw to the nearest route-level error boundary\n      throw promise._error;\n    }\n    if (status === AwaitRenderStatus.error) {\n      // Render via our errorElement\n      return /*#__PURE__*/React.createElement(AwaitContext.Provider, {\n        value: promise,\n        children: errorElement\n      });\n    }\n    if (status === AwaitRenderStatus.success) {\n      // Render children with resolved value\n      return /*#__PURE__*/React.createElement(AwaitContext.Provider, {\n        value: promise,\n        children: children\n      });\n    }\n\n    // Throw to the suspense boundary\n    throw promise;\n  }\n}\n\n/**\n * @private\n * Indirection to leverage useAsyncValue for a render-prop API on <Await>\n */\nfunction ResolveAwait(_ref8) {\n  let {\n    children\n  } = _ref8;\n  let data = useAsyncValue();\n  let toRender = typeof children === \"function\" ? children(data) : children;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, toRender);\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// UTILS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Creates a route config from a React \"children\" object, which is usually\n * either a `<Route>` element or an array of them. Used internally by\n * `<Routes>` to create a route config from its children.\n *\n * @see https://reactrouter.com/utils/create-routes-from-children\n */\nfunction createRoutesFromChildren(children, parentPath) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  let routes = [];\n  React.Children.forEach(children, (element, index) => {\n    if (! /*#__PURE__*/React.isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n    let treePath = [...parentPath, index];\n    if (element.type === React.Fragment) {\n      // Transparently support React.Fragment and its children.\n      routes.push.apply(routes, createRoutesFromChildren(element.props.children, treePath));\n      return;\n    }\n    !(element.type === Route) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"[\" + (typeof element.type === \"string\" ? element.type : element.type.name) + \"] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>\") : UNSAFE_invariant(false) : void 0;\n    !(!element.props.index || !element.props.children) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"An index route cannot have child routes.\") : UNSAFE_invariant(false) : void 0;\n    let route = {\n      id: element.props.id || treePath.join(\"-\"),\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      Component: element.props.Component,\n      index: element.props.index,\n      path: element.props.path,\n      loader: element.props.loader,\n      action: element.props.action,\n      errorElement: element.props.errorElement,\n      ErrorBoundary: element.props.ErrorBoundary,\n      hasErrorBoundary: element.props.ErrorBoundary != null || element.props.errorElement != null,\n      shouldRevalidate: element.props.shouldRevalidate,\n      handle: element.props.handle,\n      lazy: element.props.lazy\n    };\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(element.props.children, treePath);\n    }\n    routes.push(route);\n  });\n  return routes;\n}\n\n/**\n * Renders the result of `matchRoutes()` into a React element.\n */\nfunction renderMatches(matches) {\n  return _renderMatches(matches);\n}\n\nfunction mapRouteProperties(route) {\n  let updates = {\n    // Note: this check also occurs in createRoutesFromChildren so update\n    // there if you change this -- please and thank you!\n    hasErrorBoundary: route.ErrorBoundary != null || route.errorElement != null\n  };\n  if (route.Component) {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (route.element) {\n        process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"You should not include both `Component` and `element` on your route - \" + \"`Component` will be used.\") : void 0;\n      }\n    }\n    Object.assign(updates, {\n      element: /*#__PURE__*/React.createElement(route.Component),\n      Component: undefined\n    });\n  }\n  if (route.ErrorBoundary) {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (route.errorElement) {\n        process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"You should not include both `ErrorBoundary` and `errorElement` on your route - \" + \"`ErrorBoundary` will be used.\") : void 0;\n      }\n    }\n    Object.assign(updates, {\n      errorElement: /*#__PURE__*/React.createElement(route.ErrorBoundary),\n      ErrorBoundary: undefined\n    });\n  }\n  return updates;\n}\nfunction createMemoryRouter(routes, opts) {\n  return createRouter({\n    basename: opts == null ? void 0 : opts.basename,\n    future: _extends({}, opts == null ? void 0 : opts.future, {\n      v7_prependBasename: true\n    }),\n    history: createMemoryHistory({\n      initialEntries: opts == null ? void 0 : opts.initialEntries,\n      initialIndex: opts == null ? void 0 : opts.initialIndex\n    }),\n    hydrationData: opts == null ? void 0 : opts.hydrationData,\n    routes,\n    mapRouteProperties\n  }).initialize();\n}\n\nexport { Await, MemoryRouter, Navigate, Outlet, Route, Router, RouterProvider, Routes, DataRouterContext as UNSAFE_DataRouterContext, DataRouterStateContext as UNSAFE_DataRouterStateContext, LocationContext as UNSAFE_LocationContext, NavigationContext as UNSAFE_NavigationContext, RouteContext as UNSAFE_RouteContext, mapRouteProperties as UNSAFE_mapRouteProperties, useRouteId as UNSAFE_useRouteId, useRoutesImpl as UNSAFE_useRoutesImpl, createMemoryRouter, createRoutesFromChildren, createRoutesFromChildren as createRoutesFromElements, renderMatches, useBlocker as unstable_useBlocker, useActionData, useAsyncError, useAsyncValue, useHref, useInRouterContext, useLoaderData, useLocation, useMatch, useMatches, useNavigate, useNavigation, useNavigationType, useOutlet, useOutletContext, useParams, useResolvedPath, useRevalidator, useRouteError, useRouteLoaderData, useRoutes };\n//# sourceMappingURL=index.js.map\n","import './App.css'\nimport Home from './pages/Home.js'\n\nexport function App(props: {\n  onRender?: () => void\n}) {\n  return (\n    <Home />\n  )\n}\n","export function FraudChart({ fraudCount, totalGifts, fraudUsers }: { fraudCount: number; totalGifts: number; fraudUsers: number; }) {\n  const legitCount = totalGifts - fraudCount;\n  const legitPercent = totalGifts === 0 ? 0 : Math.round(((totalGifts - fraudCount) / totalGifts) * 100);\n  const fraudPercent = totalGifts === 0 ? 0 : Math.round((fraudCount / totalGifts) * 100);\n\n  const chartColor = totalGifts === 0 ? '#888' : undefined;\n\n  return (\n    <view className=\"dashboard-fraud-chart-container\">\n      <view className=\"dashboard-fraud-chart-bar\">\n        <view\n          className=\"dashboard-fraud-chart-legit\"\n          style={{\n            width: `${legitPercent * 100}%`,\n            background: chartColor || '#4caf50',\n          }}\n        />\n        <view\n          className=\"dashboard-fraud-chart-fraud\"\n          style={{\n            width: `${fraudPercent * 100}%`,\n          }}\n        />\n        <text className=\"dashboard-fraud-chart-label\">\n          Legitimate: {Math.round(legitPercent)}% &nbsp;|&nbsp; Fraudulent: {Math.round(fraudPercent)}%\n        </text>\n      </view>\n      <text className=\"dashboard-fraud-chart-accounts\">\n        Potential Fraud Accounts: {fraudUsers}\n      </text>\n    </view>\n  );\n}","import '@lynx-js/preact-devtools'\nimport '@lynx-js/react/debug'\nimport { root } from '@lynx-js/react';\nimport { MemoryRouter, Routes, Route } from 'react-router';\n\nimport { App } from './App.jsx';\nimport Home from './pages/Home.jsx';\nimport LiveSessionDashboard from './pages/LiveSessionDashboard.tsx';\nimport ProjectedPaymentPage from './pages/ProjectedPayment.tsx';\nimport TransparencyExplorer from './pages/TransparencyExplorer.tsx';\n\nroot.render(\n  <MemoryRouter>\n    <Routes>\n      <Route path=\"/\" element={<App />} />\n      <Route path=\"/home\" element={<Home />} />\n      <Route path=\"/live/:id\" element={<LiveSessionDashboard />} />\n      <Route path=\"/projected-payment/:id\" element={<ProjectedPaymentPage />} />\n      <Route path=\"/transparency\" element={<TransparencyExplorer />} />\n    </Routes>\n  </MemoryRouter>\n);\n\nif (import.meta.webpackHot) {\n  import.meta.webpackHot.accept();\n}\n","import '../styles/Home.css'\nimport { useState, useEffect, useRef } from '@lynx-js/react'\nimport { useNavigate } from 'react-router';\nimport { formatDateTime } from '../utils/format-date-time.tsx';\nimport capitalise from '../utils/capitalise.tsx';\n\ntype LiveSession = {\n    id: string,\n    creatorName: string,\n    startAt: string,\n    status: string,\n}\n\nexport default function Home() {\n    const navigate = useNavigate();\n\n    const [sessions, setSessions] = useState<LiveSession[]>([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState<string | null>(null);\n    const [creating, setCreating] = useState(false);\n\n    // AI Chat state\n    const [showChat, setShowChat] = useState(false);\n    const [chatInput, setChatInput] = useState('');\n    const [chatResponse, setChatResponse] = useState('');\n    const [chatLoading, setChatLoading] = useState(false);\n    const inputRef = useRef();\n\n    // Fetch live sessions from backend\n    useEffect(() => {\n        let timer: NodeJS.Timeout;\n        const fetchSessions = async () => {\n            try {\n                setError(null);\n                const res = await fetch('http://localhost:4000/lives');\n                if (!res.ok) throw new Error('Failed to fetch');\n                const data = await res.json();\n                setSessions(data);\n            } catch (err) {\n                setError('Could not load live sessions.');\n                setSessions([]);\n            } finally {\n                setLoading(false);\n            }\n        }\n\n        fetchSessions();\n\n        timer = setInterval(fetchSessions, 5000);\n\n        return () => clearInterval(timer);\n    }, []);\n\n    // Create new live session\n    async function createLive() {\n        setCreating(true)\n        try {\n            const resp = await fetch('http://localhost:4000/lives', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({\n                    creatorId: 'demo-creator',\n                    startAt: new Date().toISOString(),\n                }),\n            });\n            if (!resp.ok) throw new Error('Failed to create live');\n\n            const live = await resp.json();\n            setSessions(prev => [live, ...prev]);\n        } catch (err) {\n            setError('Failed to create live session.');\n        } finally {\n            setCreating(false);\n        }\n    }\n\n    // AI Event handler\n    async function handleSendChat() {\n        if (!chatInput.trim()) return;\n        setChatLoading(true);\n        setChatResponse('');\n        try {\n            const res = await fetch('https://api.openai.com/v1/chat/completions', {\n                method: 'POST',\n                headers: {\n                    'Authorization': 'Bearer YOUR_OPENAI_API_KEY', // <-- Replace with your key\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    model: 'gpt-3.5-turbo',\n                    messages: [{ role: 'user', content: chatInput }]\n                })\n            });\n            const data = await res.json();\n            setChatResponse(data.choices?.[0]?.message?.content || 'No response');\n        } catch (err) {\n            setChatResponse('Error contacting AI.');\n        } finally {\n            setChatLoading(false);\n        }\n    }\n\n    return (\n    <view className=\"home-container\">\n        <text className=\"home-title\">Prism Ledger</text>\n        <view className=\"home-actions\">\n            <view\n                className=\"home-action-btn\"\n                aria-disabled={creating}\n                bindtap={createLive}\n            >\n                {creating ? 'Creating...' : '+ Start New Live'}\n            </view>\n        </view>\n        <view\n            className=\"transparency-explorer-button\"\n            bindtap={() => navigate('/transparency')}\n        >\n            <text className=\"transparency-explorer-button-icon\">⟐</text>\n        </view>\n        {loading ? (\n        <text>Loading sessions...</text>\n        ) : error ? (\n        <text className=\"home-error\">{error}</text>\n        ) : (\n        <scroll-view className=\"home-session-list\" scroll-orientation=\"vertical\">\n            {sessions.length === 0 && (\n            <text className=\"home-session-empty\">No live sessions.</text>\n            )}\n            {sessions.map(session => (\n            <view\n                key={session.id}\n                className=\"home-session-card\"\n                bindtap={() => navigate(`/live/${session.id}`)}\n            >\n                <text className=\"home-session-date\">{formatDateTime(session.startAt)}</text>\n                <text className=\"home-session-status\">\n                    Status:{\" \"}\n                    <text className={`home-session-status-value ${session.status === 'ended' ? 'ended' : session.status === 'running' ? 'running' : ''}`}>\n                        {capitalise(session.status)}\n                    </text>\n                </text>\n            </view>\n            ))}\n        </scroll-view>\n        )}\n    </view>\n    )\n}\n","import { useNavigate, useParams } from 'react-router';\nimport { useEffect, useState } from '@lynx-js/react';\nimport '../styles/LiveSessionDashboard.css';\nimport { formatDateTime } from '../utils/format-date-time.tsx';\nimport capitalise from '../utils/capitalise.tsx';\nimport { FraudChart } from '../components/FraudChart.tsx';\n\ntype Gift = {\n  id: string;\n  consumer: {\n    name: string;\n  };\n  coinAmount: number;\n  timestamp: string;\n  riskFlag?: boolean;\n  recentGiftCount?: number;\n};\n\ntype LiveSession = {\n  id: string;\n  creatorName: string;\n  startAt: string;\n  status: string;\n  gifts: Gift[];\n  fraudStats: {\n    totalGifts: number,\n    fraudCount: number,\n    fraudUsers: number,\n    fraudPercent: number,\n  },\n  qualityMetrics: {\n    score: number,\n    retention: number,\n    engagement: number,\n  },\n};\n\nexport default function LiveSessionDashboard() {\n  const { id } = useParams();\n  const navigate = useNavigate();\n  const [session, setSession] = useState<LiveSession | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [showDemoMenu, setShowDemoMenu] = useState(false);\n  const [demoLoading, setDemoLoading] = useState(false);\n\n  useEffect(() => {\n  let interval: NodeJS.Timeout;\n  setLoading(true);\n\n  async function fetchSession() {\n    try {\n      const res = await fetch(`http://localhost:4000/lives/${id}`);\n      const data = await res.json();\n      setSession(data);\n      setLoading(false);\n    } catch (err) {\n      setLoading(false);\n    }\n  }\n\n  fetchSession(); // Initial fetch\n  interval = setInterval(fetchSession, 2000); // Poll every 2 seconds\n\n  return () => clearInterval(interval);\n}, [id]);\n\n  const barChartData = session \n  ? [\n    { label: 'Retention', value: session.qualityMetrics.retention, color: '#4287f5' },\n    { label: 'Engagement', value: session.qualityMetrics.engagement, color: '#a07d1eff' },\n  ]\n  : [];\n\n  return (\n    <scroll-view className=\"dashboard-container\" scroll-y>\n      <text className=\"dashboard-back\" bindtap={() => navigate('/home')}>← Home</text>\n      <text className=\"dashboard-title\">\n        Live Dashboard\n      </text>\n      <view className=\"dashboard-content\">\n        {loading ? (\n        <text className=\"dashboard-loading\">Loading...</text>\n        ) : session ? (\n        <>\n          <view className=\"dashboard-header\">\n            <view className=\"dashboard-header-info\">\n              <text className=\"dashboard-creator\">{session.creatorName}'s Live</text>\n              <text className=\"dashboard-status\">\n                Status:{\" \"}\n                <text className={`dashboard-status-value ${session.status === 'ended' ? 'ended' : session.status === 'running' ? 'running' : ''}`}>\n                  {capitalise(session.status)}\n                </text>\n              </text>\n              <text className=\"dashboard-date\">\n                {formatDateTime(new Date(session.startAt).toISOString())}\n              </text>\n            </view>\n            <view className=\"dashboard-header-actions\">\n              {session.status === 'running' && (\n                <>\n                  <view\n                    className=\"dashboard-header-action-button\"\n                    bindtap={async () => {\n                      setLoading(true);\n                      const res = await fetch(`http://localhost:4000/lives/${id}/end`, { method: 'POST' });\n                      const data = await res.json();\n                      setSession({ ...session, status: 'ended', qualityMetrics: data.qualityMetrics });\n                      setLoading(false);\n                    }}\n                  >\n                    <text>End Live</text>\n                  </view>\n                </>\n              )}\n              {session.status === 'ended' && (\n                <view\n                  className=\"dashboard-header-action-button\"\n                  bindtap={() => navigate(`/projected-payment/${id}`)}\n                >\n                  <text>Show Projected Payment</text>\n                </view>\n              )}\n            </view>\n          </view>\n          <view className=\"dashboard-summary\">\n            <text className=\"dashboard-summary-title\">Session Summary</text>\n            <text className=\"dashboard-summary-content\">\n              <view className='dashboard-summary-statistics'>\n                <text className=\"dashboard-summary-score\">\n                  Quality Score: {session.qualityMetrics.score}\n                </text>\n                <text className=\"dashboard-summary-fraud\">\n                  { session.fraudStats && session.fraudStats.fraudPercent > 0\n                    ? `Potential Fraud: ${session.fraudStats.fraudPercent}%`\n                    : \"No fraud detected!\" }\n                </text>\n              </view>\n            </text>\n          </view>\n          <view className=\"dashboard-bar-chart\">\n            <text className=\"dashboard-bar-title\">Viewer Retention & Engagement</text>\n            <view className=\"dashboard-bar-row\">\n              {barChartData.map(bar => (\n                <view key={bar.label} className=\"dashboard-bar\">\n                  <view\n                    className=\"dashboard-bar-fill\"\n                    style={{\n                      width: `${bar.value * 100}%`,\n                      background: bar.color,\n                    }}\n                  />\n                  <text className=\"dashboard-bar-label\">\n                    {bar.label}: {Math.round(bar.value * 100)}%\n                  </text>\n                </view>\n              ))}\n            </view>\n          </view>\n          <view className=\"dashboard-fraud-chart\">\n            <text className=\"dashboard-fraud-chart-title\">Gift Fraud Breakdown</text> \n            <FraudChart\n              fraudCount={session.fraudStats.fraudCount}\n              totalGifts={session.fraudStats.totalGifts}\n              fraudUsers={session.fraudStats.fraudUsers}\n            />\n          </view>\n          <scroll-view className=\"dashboard-gift-feed\" scroll-y>\n            <text className=\"dashboard-gift-title\">Gift Feed</text>\n            {session.gifts.length === 0 ? (\n              <text className=\"dashboard-gift-empty\">No gifts yet.</text>\n            ) : (\n              session.gifts.map(gift => (\n                <view key={gift.id} className={`dashboard-gift-card${gift.riskFlag ? ' fraud' : ''}`}>\n                  <view className=\"dashboard-gift-card-details\">\n                    <text className=\"dashboard-gift-sender\">{gift.consumer.name}</text>\n                    <text className=\"dashboard-gift-amount\">{gift.coinAmount} coins</text>\n                    <text className=\"dashboard-gift-time\">\n                      {new Date(gift.timestamp).toLocaleString('en-US', {\n                        hour: '2-digit',\n                        minute: '2-digit',\n                        hour12: true,\n                      })}\n                    </text>\n                  </view>\n                  {gift.riskFlag && (\n                  <text className=\"dashboard-gift-fraud-reason-below\">\n                    ⚠ Potential Fraud: {getFraudReason(gift)}\n                  </text>\n                  )}\n                </view>\n              ))\n            )}\n          </scroll-view>\n        </>\n      ) : (\n        <text className=\"dashboard-error\">Session not found.</text>\n      )}\n      </view>\n      {session && session.status === 'running' && (\n        <view \n          className=\"dashboard-demo-button\"\n          bindtap={() => setShowDemoMenu(true)}\n        >\n          <text className=\"dashboard-demo-button-icon\">{'</>'}</text>\n        </view>\n      )}\n      {showDemoMenu && (\n        <view className=\"dashboard-demo-menu\">\n          <view className=\"dashboard-demo-menu-content\">\n            <text className=\"dashboard-demo-menu-title\">Demo Actions</text>\n            <view className=\"dashboard-demo-menu-actions\">\n              <view\n                className={`dashboard-demo-menu-button${demoLoading ? ' disabled' : ''}`}\n                bindtap={async () => {\n                  if (demoLoading) return;\n\n                  setDemoLoading(true);\n                  await fetch(`http://localhost:4000/demo/send-gift/${id}`, { method: 'POST' });\n                  setDemoLoading(false);\n                  setShowDemoMenu(false);\n                }}\n              >\n                <text>Send Gift</text>\n              </view>\n              <view\n                className={`dashboard-demo-menu-button${demoLoading ? ' disabled' : ''}`}\n                bindtap={async () => {\n                  if (demoLoading) return;\n\n                  setDemoLoading(true);\n                  await fetch(`http://localhost:4000/demo/send-multiple-gifts/${id}`, { method: 'POST' });\n                  setDemoLoading(false);\n                  setShowDemoMenu(false);\n                }}\n              >\n                <text>Send Multiple Gifts</text>\n              </view>\n              <view\n                className={`dashboard-demo-menu-button${demoLoading ? ' disabled' : ''}`}\n                bindtap={async () => {\n                  if (demoLoading) return;\n\n                  setDemoLoading(true);\n                  await fetch(`http://localhost:4000/demo/fraud-burst/${id}`, { method: 'POST' });\n                  setDemoLoading(false);\n                  setShowDemoMenu(false);\n                }}\n              >\n                <text>Trigger Fraud Burst</text>\n              </view>\n              <view\n                className=\"dashboard-demo-menu-button cancel\"\n                bindtap={() => setShowDemoMenu(false)}\n              >\n                <text>Cancel</text>\n              </view>\n            </view>\n          </view>\n        </view>\n      )}\n    </scroll-view>\n  );\n}\n\nfunction getFraudReason(gift: Gift & { recentGiftCount?: number; consumer?: { kycStatus?: string } }) {\n  if (gift.coinAmount > 1000) return \"Large amount flagged as suspicious\";\n  if (gift.recentGiftCount && gift.recentGiftCount > 5) return \"Too many gifts sent in a short period\";\n  if (gift.consumer?.kycStatus !== \"verified\") return \"Sender is not verified\";\n  return \"Flagged by risk assessment.\";\n}","import { useParams, useNavigate } from 'react-router';\nimport { useEffect, useState } from '@lynx-js/react';\nimport '../styles/ProjectedPayment.css';\n\ntype Settlement = {\n  totalCoins?: number;\n  creatorAmountCoins?: number;\n  totalUSD?: number;\n  creatorAmountUSD?: number;\n  platformAmountUSD?: number;\n  reserveAmountUSD?: number;\n};\n\ntype QualityMetrics = {\n  score?: number;\n  retention?: number;\n  engagement?: number;\n};\n\nfunction getCreatorShare(score: number | undefined) {\n  if (score === undefined) return 0;\n  if (score < 40) return 0.65;\n  if (score < 70) return 0.7;\n  if (score < 85) return 0.75;\n  return 0.8;\n}\n\nfunction getCreatorShareText(score: number | undefined) {\n  if (score === undefined) return '';\n\n  const creatorShare = getCreatorShare(score);\n  return `Your share: ${creatorShare * 100}% of gross earnings`;\n}\n\nexport default function ProjectedPaymentPage() {\n  const { id } = useParams();\n  const navigate = useNavigate();\n  const [settlement, setSettlement] = useState<Settlement | null>(null);\n  const [qualityMetrics, setQualityMetrics] = useState<QualityMetrics | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [payoutCredited, setPayoutCredited] = useState(false);\n\n  useEffect(() => {\n    async function fetchSettlement() {\n      setLoading(true);\n      const res = await fetch(`http://localhost:4000/lives/${id}/settlement`);\n      const data = await res.json();\n      setSettlement(data.settlement);\n      setQualityMetrics(data.qualityMetrics);\n      setLoading(false);\n    }\n    fetchSettlement();\n  }, [id]);\n\n  // Format retention and engagement as percentages\n  const retentionPercent = qualityMetrics?.retention !== undefined\n    ? `${Math.round(qualityMetrics.retention * 100)}%`\n    : '-';\n  const engagementPercent = qualityMetrics?.engagement !== undefined\n    ? `${Math.round(qualityMetrics.engagement * 100)}%`\n    : '-';\n\n  return (\n    <view className=\"projected-payment-container\">\n      <text className=\"projected-payment-back\" bindtap={() => navigate(-1)}>← Dashboard</text>\n      <text className=\"projected-payment-title\">Projected Payment Breakdown</text>\n      {loading ? (\n        <text>Loading...</text>\n      ) : (\n        <view className=\"projected-payment-content\">\n          <view className=\"projected-payment-metrics\">\n            <text className=\"projected-payment-metrics-title\">Live Quality Metrics</text>\n            <view className=\"projected-payment-metrics-values\">  \n              <view className=\"projected-payment-metrics-values\">\n                <view className=\"projected-payment-row\">\n                  <text className=\"projected-payment-label\">Retention</text>\n                  <text className=\"projected-payment-value\">{retentionPercent}</text>\n                </view>\n                <view className=\"projected-payment-row\">\n                  <text className=\"projected-payment-label\">Engagement</text>\n                  <text className=\"projected-payment-value\">{engagementPercent}</text>\n                </view>\n                <view className=\"projected-payment-divider\" />\n                <view className=\"projected-payment-row projected-payment-quality\">\n                  <text className=\"projected-payment-label\">Quality Score</text>\n                  <text className=\"projected-payment-value\">{qualityMetrics?.score ?? '-'} / 100</text>\n                </view>\n                <text id=\"projected-payment-share-note\">\n                  {getCreatorShareText(qualityMetrics?.score)}\n                </text>\n              </view>\n            </view>\n          </view>\n          <view className=\"projected-payment-breakdown\">\n            <text className=\"projected-payment-breakdown-title\">Earnings Breakdown</text>\n            <view className=\"projected-payment-breakdown-values\">\n              <view className=\"projected-payment-breakdown-values\">\n                <view className=\"projected-payment-row\">\n                  <text className=\"projected-payment-label\">Total Coins</text>\n                  <text className=\"projected-payment-value\">{settlement?.totalCoins ?? '-'}</text>\n                </view>\n                <view className=\"projected-payment-row\">\n                  <text className=\"projected-payment-label\">Gross Earnings</text>\n                  <text className=\"projected-payment-value\">{settlement?.totalUSD ?? '-'}</text>\n                </view>\n                <view className=\"projected-payment-row\">\n                  <text className=\"projected-payment-label\">Platform Fee ({(1 - getCreatorShare(qualityMetrics?.score)) * 100 - 5}%)</text>\n                  <text className=\"projected-payment-value\">- {settlement?.platformAmountUSD ?? '-'}</text>\n                </view>\n                <view className=\"projected-payment-row\">\n                  <text className=\"projected-payment-label\">Fraud Reserve (5%)</text>\n                  <text className=\"projected-payment-value\">- {settlement?.reserveAmountUSD ?? '-'}</text>\n                </view>\n                <view className=\"projected-payment-divider\" />\n                <view className=\"projected-payment-row projected-payment-final\">\n                  <text className=\"projected-payment-label\">Final Payout</text>\n                  <text className=\"projected-payment-value\">{settlement?.creatorAmountUSD ?? '-'}</text>\n                </view>\n              </view>\n            </view>\n          </view>{!payoutCredited && (\n            <text className=\"projected-payment-note\">\n              Amount will be credited after 48 hours\n            </text>\n          )}\n          <view\n            className=\"projected-payment-fastforward-button\"\n            style={{ opacity: payoutCredited ? 0.6 : 1, pointerEvents: payoutCredited ? 'none' : 'auto' }}\n            bindtap={async () => {\n                if (payoutCredited) return;\n                try {\n                  const res = await fetch(`http://localhost:4000/lives/${id}/fast-forward`, { method: 'POST' });\n                  const data = await res.json();\n                  if (data.ok) {\n                    setPayoutCredited(true);\n                    alert(`Payout of $${data.credited.toFixed(2)} credited to creator!`);\n                    // Optionally refresh settlement info here\n                  } else {\n                    alert('Fast forward failed.');\n                  }\n                } catch (err) {\n                  alert('Fast forward failed.');\n                }\n              }}\n            >\n            <text>{'</>'} Fast Forward</text>\n          </view>\n          {payoutCredited && (\n            <text className=\"projected-payment-payout-credited\">\n              Payout has been credited to your account.\n            </text>\n          )}\n        </view>\n      )}\n    </view>\n  );\n}","import { useEffect, useState } from \"@lynx-js/react\";\nimport { formatDateTime } from \"../utils/format-date-time.tsx\";\nimport { useNavigate } from \"react-router\";\nimport \"../styles/TransparencyExplorer.css\";\n\nexport default function TransparencyExplorer() {\n    const navigate = useNavigate();\n  const [snapshot, setSnapshot] = useState<any | null>(null);\n  const [ledgers, setLedgers] = useState<any[]>([]);\n  const [selectedLedger, setSelectedLedger] = useState<any | null>(null);\n  const [proof, setProof] = useState<any | null>(null);\n  const [showTech, setShowTech] = useState(false);\n\n  useEffect(() => {\n    fetch(\"http://localhost:4000/merkle/snapshot\")\n      .then(res => res.json())\n      .then(data => {\n        setSnapshot(data.snapshot);\n        if (data.snapshot && data.snapshot.ledgerIds) {\n          fetch(\"http://localhost:4000/ledgers/by-ids\", {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({ ids: data.snapshot.ledgerIds })\n          })\n            .then(res => res.json())\n            .then(data => setLedgers(data.ledgers));\n        }\n      });\n  }, []);\n\n  const handleSelectLedger = async (ledger: any) => {\n    setSelectedLedger(ledger);\n    setProof(null);\n    const res = await fetch(`http://localhost:4000/merkle/proof/${ledger.id}`);\n    const data = await res.json();\n    setProof(data);\n  };\n\n  return (\n    <scroll-view className=\"transparency-explorer\" scroll-y>\n        <text className=\"dashboard-back\" bindtap={() => navigate('/home')}>← Home</text>\n      <text className=\"transparency-title\">Transparency Explorer</text>\n      <view className=\"transparency-intro\">\n        <text>Every payout and transaction is securely recorded.</text>\n        <text>Prism uses cryptographic proofs (Merkle trees) to ensure records are tamper-proof and auditable.</text>\n      </view>\n      <view className=\"transparency-root-card\">\n        <text className=\"transparency-root-label\">Current Ledger Integrity Code:</text>\n        <view className=\"transparency-root-card-content\">\n            <text className=\"transparency-root-value\" style={{ fontFamily: \"monospace\" }}>\n            {snapshot?.root || \"Loading...\"}\n            </text>\n            <text className=\"transparency-root-desc\">\n            This code summarizes all transactions. If it ever changes, it means the records have changed.\n            </text>\n        </view>\n      </view>\n      <view className=\"ledger-list\">\n        <text className=\"ledger-list-title\">Recent Transactions</text>\n        <view className=\"ledger-list-content\">\n            {ledgers.length === 0 && <text className=\"no-transaction\">No transactions found.</text>}\n            {ledgers.map(ledger => (\n            <view\n                key={ledger.id}\n                className={`ledger-item${selectedLedger?.id === ledger.id ? \" selected\" : \"\"}`}\n                bindtap={() => handleSelectLedger(ledger)}\n            >\n                <text className=\"ledger-type\">{ledger.refType === \"gift\" ? \"Gift Sent\" : ledger.refType === \"fast-forward\" ? \"Payout\" : ledger.refType}</text>\n                <text className=\"ledger-amount\">${ledger.amount.toFixed(2)}</text>\n                <text className=\"ledger-date\">{formatDateTime(ledger.createdAt)}</text>\n                <text className=\"ledger-desc\">\n                {ledger.refType === \"gift\"\n                    ? \"A fan sent a gift during a live session.\"\n                    : ledger.refType === \"fast-forward\"\n                    ? \"Funds paid out after live session ended.\"\n                    : \"\"}\n                </text>\n                <view\n                className=\"verify-btn\"\n                bindtap={() => handleSelectLedger(ledger)}\n                >\n                <text>\n                    {selectedLedger?.id === ledger.id ? \"Viewing Proof\" : \"Verify\"}\n                </text>\n                </view>\n            </view>\n            ))}\n        </view>\n      </view>\n      {selectedLedger && proof && (\n        <view className=\"merkle-proof-section\">\n          <text className=\"proof-title\">Proof of Inclusion</text>\n          <text className=\"proof-desc\">\n            This transaction is cryptographically included in the official ledger. You can verify its inclusion below.\n          </text>\n          <view className=\"proof-visual\">\n            <text className=\"proof-success\">✅ Verified!</text>\n            <text className=\"proof-explain\">\n              The system checked this transaction against the ledger integrity code above.\n            </text>\n          </view>\n          <view\n            className=\"show-tech-btn\"\n            bindtap={() => setShowTech(!showTech)}\n          >\n            <text>\n              {showTech ? \"Hide Technical Details\" : \"Show Technical Details\"}\n            </text>\n          </view>\n          {showTech && (\n            <view className=\"proof-tech-details\">\n              <view className=\"proof-row\">\n                <text>Transaction Hash:</text>\n                <text style={{ fontFamily: \"monospace\" }}>\n                  {proof.ledgerEntry?.hashThis}\n                </text>\n              </view>\n              <view className=\"proof-row\">\n                <text>Merkle Root:</text>\n                <text style={{ fontFamily: \"monospace\" }}>\n                  {proof.merkleRoot}\n                </text>\n              </view>\n              <text>Proof Path:</text>\n              <view className=\"proof-list\">\n                {proof.proof.map((hash: string, idx: number) => (\n                  <text key={idx} style={{ fontFamily: \"monospace\" }}>{hash}</text>\n                ))}\n              </view>\n            </view>\n          )}\n        </view>\n      )}\n    </scroll-view>\n  );\n}","export default function capitalise(str: string) {\n    return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\n}","export function formatDateTime(dateStr: string) {\n    const d = new Date(dateStr);\n    const day = d.getDate();\n    const month = d.toLocaleString('en-US', { month: 'short' });\n    const year = d.getFullYear();\n    const time = d.toLocaleString('en-US', {\n        hour: '2-digit',\n        minute: '2-digit',\n        hour12: true,\n    });\n    return `${day} ${month} ${year}, ${time}`;\n}","export {}","export {}","export {}","export {}","export {}","// getDefaultExport function for compatibility with non-ESM modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};\n","__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n        if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n            Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n        }\n    }\n};","__webpack_require__.hu = (chunkId) => ('' + chunkId + '.' + __webpack_require__.h() + '.hot-update.js')","__webpack_require__.h = () => (\"d9fda6c63e8fc230\")","__webpack_require__.hmrF = function () {\n            return \"main__main-thread.\" + __webpack_require__.h() + \".hot-update.json\";\n         };\n        ","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var currentModuleData = {};\nvar installedModules = __webpack_require__.c;\n\n// module and require creation\nvar currentChildModule;\nvar currentParents = [];\n\n// status\nvar registeredStatusHandlers = [];\nvar currentStatus = \"idle\";\n\n// while downloading\nvar blockingPromises = 0;\nvar blockingPromisesWaiting = [];\n\n// The update info\nvar currentUpdateApplyHandlers;\nvar queuedInvalidatedModules;\n\n__webpack_require__.hmrD = currentModuleData;\n__webpack_require__.i.push(function (options) {\n\tvar module = options.module;\n\tvar require = createRequire(options.require, options.id);\n\tmodule.hot = createModuleHotObject(options.id, module);\n\tmodule.parents = currentParents;\n\tmodule.children = [];\n\tcurrentParents = [];\n\toptions.require = require;\n});\n\n__webpack_require__.hmrC = {};\n__webpack_require__.hmrI = {};\n\nfunction createRequire(require, moduleId) {\n\tvar me = installedModules[moduleId];\n\tif (!me) return require;\n\tvar fn = function (request) {\n\t\tif (me.hot.active) {\n\t\t\tif (installedModules[request]) {\n\t\t\t\tvar parents = installedModules[request].parents;\n\t\t\t\tif (parents.indexOf(moduleId) === -1) {\n\t\t\t\t\tparents.push(moduleId);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcurrentParents = [moduleId];\n\t\t\t\tcurrentChildModule = request;\n\t\t\t}\n\t\t\tif (me.children.indexOf(request) === -1) {\n\t\t\t\tme.children.push(request);\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.warn(\n\t\t\t\t\"[HMR] unexpected require(\" +\n\t\t\t\trequest +\n\t\t\t\t\") from disposed module \" +\n\t\t\t\tmoduleId\n\t\t\t);\n\t\t\tcurrentParents = [];\n\t\t}\n\t\treturn require(request);\n\t};\n\tvar createPropertyDescriptor = function (name) {\n\t\treturn {\n\t\t\tconfigurable: true,\n\t\t\tenumerable: true,\n\t\t\tget: function () {\n\t\t\t\treturn require[name];\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\trequire[name] = value;\n\t\t\t}\n\t\t};\n\t};\n\tfor (var name in require) {\n\t\tif (Object.prototype.hasOwnProperty.call(require, name) && name !== \"e\") {\n\t\t\tObject.defineProperty(fn, name, createPropertyDescriptor(name));\n\t\t}\n\t}\n\n\tfn.e = function (chunkId, fetchPriority) {\n\t\treturn trackBlockingPromise(require.e(chunkId, fetchPriority));\n\t};\n\n\treturn fn;\n}\n\nfunction createModuleHotObject(moduleId, me) {\n\tvar _main = currentChildModule !== moduleId;\n\tvar hot = {\n\t\t_acceptedDependencies: {},\n\t\t_acceptedErrorHandlers: {},\n\t\t_declinedDependencies: {},\n\t\t_selfAccepted: false,\n\t\t_selfDeclined: false,\n\t\t_selfInvalidated: false,\n\t\t_disposeHandlers: [],\n\t\t_main: _main,\n\t\t_requireSelf: function () {\n\t\t\tcurrentParents = me.parents.slice();\n\t\t\tcurrentChildModule = _main ? undefined : moduleId;\n\t\t\t__webpack_require__(moduleId);\n\t\t},\n\t\tactive: true,\n\t\taccept: function (dep, callback, errorHandler) {\n\t\t\tif (dep === undefined) hot._selfAccepted = true;\n\t\t\telse if (typeof dep === \"function\") hot._selfAccepted = dep;\n\t\t\telse if (typeof dep === \"object\" && dep !== null) {\n\t\t\t\tfor (var i = 0; i < dep.length; i++) {\n\t\t\t\t\thot._acceptedDependencies[dep[i]] = callback || function () { };\n\t\t\t\t\thot._acceptedErrorHandlers[dep[i]] = errorHandler;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\thot._acceptedDependencies[dep] = callback || function () { };\n\t\t\t\thot._acceptedErrorHandlers[dep] = errorHandler;\n\t\t\t}\n\t\t},\n\t\tdecline: function (dep) {\n\t\t\tif (dep === undefined) hot._selfDeclined = true;\n\t\t\telse if (typeof dep === \"object\" && dep !== null)\n\t\t\t\tfor (var i = 0; i < dep.length; i++)\n\t\t\t\t\thot._declinedDependencies[dep[i]] = true;\n\t\t\telse hot._declinedDependencies[dep] = true;\n\t\t},\n\t\tdispose: function (callback) {\n\t\t\thot._disposeHandlers.push(callback);\n\t\t},\n\t\taddDisposeHandler: function (callback) {\n\t\t\thot._disposeHandlers.push(callback);\n\t\t},\n\t\tremoveDisposeHandler: function (callback) {\n\t\t\tvar idx = hot._disposeHandlers.indexOf(callback);\n\t\t\tif (idx >= 0) hot._disposeHandlers.splice(idx, 1);\n\t\t},\n\t\tinvalidate: function () {\n\t\t\tthis._selfInvalidated = true;\n\t\t\tswitch (currentStatus) {\n\t\t\t\tcase \"idle\":\n\t\t\t\t\tcurrentUpdateApplyHandlers = [];\n\t\t\t\t\tObject.keys(__webpack_require__.hmrI).forEach(function (key) {\n\t\t\t\t\t\t__webpack_require__.hmrI[key](moduleId, currentUpdateApplyHandlers);\n\t\t\t\t\t});\n\t\t\t\t\tsetStatus(\"ready\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"ready\":\n\t\t\t\t\tObject.keys(__webpack_require__.hmrI).forEach(function (key) {\n\t\t\t\t\t\t__webpack_require__.hmrI[key](moduleId, currentUpdateApplyHandlers);\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"prepare\":\n\t\t\t\tcase \"check\":\n\t\t\t\tcase \"dispose\":\n\t\t\t\tcase \"apply\":\n\t\t\t\t\t(queuedInvalidatedModules = queuedInvalidatedModules || []).push(\n\t\t\t\t\t\tmoduleId\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t},\n\t\tcheck: hotCheck,\n\t\tapply: hotApply,\n\t\tstatus: function (l) {\n\t\t\tif (!l) return currentStatus;\n\t\t\tregisteredStatusHandlers.push(l);\n\t\t},\n\t\taddStatusHandler: function (l) {\n\t\t\tregisteredStatusHandlers.push(l);\n\t\t},\n\t\tremoveStatusHandler: function (l) {\n\t\t\tvar idx = registeredStatusHandlers.indexOf(l);\n\t\t\tif (idx >= 0) registeredStatusHandlers.splice(idx, 1);\n\t\t},\n\t\tdata: currentModuleData[moduleId]\n\t};\n\tcurrentChildModule = undefined;\n\treturn hot;\n}\n\nfunction setStatus(newStatus) {\n\tcurrentStatus = newStatus; \n\tvar results = [];\n\tfor (var i = 0; i < registeredStatusHandlers.length; i++)\n\t\tresults[i] = registeredStatusHandlers[i].call(null, newStatus);\n\n\treturn Promise.all(results).then(function () { });\n}\n\nfunction unblock() {\n\tif (--blockingPromises === 0) {\n\t\tsetStatus(\"ready\").then(function () {\n\t\t\tif (blockingPromises === 0) {\n\t\t\t\tvar list = blockingPromisesWaiting;\n\t\t\t\tblockingPromisesWaiting = [];\n\t\t\t\tfor (var i = 0; i < list.length; i++) {\n\t\t\t\t\tlist[i]();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction trackBlockingPromise(promise) {\n\tswitch (currentStatus) {\n\t\tcase \"ready\":\n\t\t\tsetStatus(\"prepare\");\n\t\tcase \"prepare\":\n\t\t\tblockingPromises++;\n\t\t\tpromise.then(unblock, unblock);\n\t\t\treturn promise;\n\t\tdefault:\n\t\t\treturn promise;\n\t}\n}\n\nfunction waitForBlockingPromises(fn) {\n\tif (blockingPromises === 0) return fn();\n\treturn new Promise(function (resolve) {\n\t\tblockingPromisesWaiting.push(function () {\n\t\t\tresolve(fn());\n\t\t});\n\t});\n}\n\nfunction hotCheck(applyOnUpdate) {\n\tif (currentStatus !== \"idle\") {\n\t\tthrow new Error(\"check() is only allowed in idle status\");\n\t} \n\treturn setStatus(\"check\")\n\t\t.then(__webpack_require__.hmrM)\n\t\t.then(function (update) {\n\t\t\tif (!update) {\n\t\t\t\treturn setStatus(applyInvalidatedModules() ? \"ready\" : \"idle\").then(\n\t\t\t\t\tfunction () {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn setStatus(\"prepare\").then(function () {\n\t\t\t\tvar updatedModules = [];\n\t\t\t\tcurrentUpdateApplyHandlers = [];\n\n\t\t\t\treturn Promise.all(\n\t\t\t\t\tObject.keys(__webpack_require__.hmrC).reduce(function (\n\t\t\t\t\t\tpromises,\n\t\t\t\t\t\tkey\n\t\t\t\t\t) {\n\t\t\t\t\t\t__webpack_require__.hmrC[key](\n\t\t\t\t\t\t\tupdate.c,\n\t\t\t\t\t\t\tupdate.r,\n\t\t\t\t\t\t\tupdate.m,\n\t\t\t\t\t\t\tpromises,\n\t\t\t\t\t\t\tcurrentUpdateApplyHandlers,\n\t\t\t\t\t\t\tupdatedModules\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn promises;\n\t\t\t\t\t},\n\t\t\t\t\t\t[])\n\t\t\t\t).then(function () {\n\t\t\t\t\treturn waitForBlockingPromises(function () {\n\t\t\t\t\t\tif (applyOnUpdate) {\n\t\t\t\t\t\t\treturn internalApply(applyOnUpdate);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn setStatus(\"ready\").then(function () {\n\t\t\t\t\t\t\treturn updatedModules;\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n}\n\nfunction hotApply(options) {\n\tif (currentStatus !== \"ready\") {\n\t\treturn Promise.resolve().then(function () {\n\t\t\tthrow new Error(\n\t\t\t\t\"apply() is only allowed in ready status (state: \" + currentStatus + \")\"\n\t\t\t);\n\t\t});\n\t}\n\treturn internalApply(options);\n}\n\nfunction internalApply(options) {\n\toptions = options || {};\n\tapplyInvalidatedModules();\n\tvar results = currentUpdateApplyHandlers.map(function (handler) {\n\t\treturn handler(options);\n\t});\n\tcurrentUpdateApplyHandlers = undefined;\n\tvar errors = results\n\t\t.map(function (r) {\n\t\t\treturn r.error;\n\t\t})\n\t\t.filter(Boolean);\n\n\tif (errors.length > 0) {\n\t\treturn setStatus(\"abort\").then(function () {\n\t\t\tthrow errors[0];\n\t\t});\n\t}\n\n\tvar disposePromise = setStatus(\"dispose\");\n\n\tresults.forEach(function (result) {\n\t\tif (result.dispose) result.dispose();\n\t});\n\n\tvar applyPromise = setStatus(\"apply\");\n\n\tvar error;\n\tvar reportError = function (err) {\n\t\tif (!error) error = err;\n\t};\n\n\tvar outdatedModules = [];\n\tresults.forEach(function (result) {\n\t\tif (result.apply) {\n\t\t\tvar modules = result.apply(reportError);\n\t\t\tif (modules) {\n\t\t\t\tfor (var i = 0; i < modules.length; i++) {\n\t\t\t\t\toutdatedModules.push(modules[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\treturn Promise.all([disposePromise, applyPromise]).then(function () {\n\t\tif (error) {\n\t\t\treturn setStatus(\"fail\").then(function () {\n\t\t\t\tthrow error;\n\t\t\t});\n\t\t}\n\n\t\tif (queuedInvalidatedModules) {\n\t\t\treturn internalApply(options).then(function (list) {\n\t\t\t\toutdatedModules.forEach(function (moduleId) {\n\t\t\t\t\tif (list.indexOf(moduleId) < 0) list.push(moduleId);\n\t\t\t\t});\n\t\t\t\treturn list;\n\t\t\t});\n\t\t}\n\n\t\treturn setStatus(\"idle\").then(function () {\n\t\t\treturn outdatedModules;\n\t\t});\n\t});\n}\n\nfunction applyInvalidatedModules() {\n\tif (queuedInvalidatedModules) {\n\t\tif (!currentUpdateApplyHandlers) currentUpdateApplyHandlers = [];\n\t\tObject.keys(__webpack_require__.hmrI).forEach(function (key) {\n\t\t\tqueuedInvalidatedModules.forEach(function (moduleId) {\n\t\t\t\t__webpack_require__.hmrI[key](moduleId, currentUpdateApplyHandlers);\n\t\t\t});\n\t\t});\n\t\tqueuedInvalidatedModules = undefined;\n\t\treturn true;\n\t}\n}\n// @ts-nocheck\n__webpack_require__.i.push(function(options) {\n  if (\n    // This means this is in main-thread\n    !globalThis.__PREFRESH__\n    // Loading a module of background layer in main-thread, we replace the layer with the main-thread.\n    && options.id.includes('(react:background)')\n  ) {\n    // We may serialize the snapshot from background to main-thread.\n    // The `(react:background)` layer in the module id cannot be found in the main-thread.\n    // Thus we replace it here to make HMR work.\n    //\n    // Maybe it is better to run chunk loading on main thread.\n    options.id = options.id.replace(\n      `(react:background)`, // This is replaced by ReactRefreshWebpackPlugin\n      '(react:main-thread)', // This is replaced by ReactRefreshWebpackPlugin\n    );\n    const factory = __webpack_modules__[options.id];\n    if (factory) {\n      options.factory = factory;\n    }\n    return;\n  }\n  var originalFactory = options.factory;\n  options.factory = function(moduleObject, moduleExports, webpackRequire) {\n    var prevRefreshReg = globalThis.$RefreshReg$;\n    var prevRefreshSig = globalThis.$RefreshSig$;\n    globalThis.$RefreshSig$ = function() {\n      var status = 'begin';\n      var savedType;\n\n      return function(type, key, forceReset, getCustomHooks) {\n        // `globalThis.__PREFRESH__` may not exist when requiring `react`:\n        //   - require('react-refresh')\n        //     - require('react').options\n        //       - require('useSyncExternalStore')\n        //         - __REFRESH__.sign // not a function\n        // TODO(wangqingyu): Replace globalThis.__PREFRESH__ with lynx.__PREFRESH__\n        if (!globalThis.__PREFRESH__) {\n          return type;\n        }\n        if (!savedType) savedType = type;\n\n        status = globalThis.__PREFRESH__.sign(\n          type || savedType,\n          key,\n          forceReset,\n          getCustomHooks,\n          status,\n        );\n        return type;\n      };\n    };\n    var reg = function(currentModuleId) {\n      globalThis.$RefreshReg$ = function(type, id) {\n        // `globalThis.__PREFRESH__` may not exist when requiring `react`:\n        //   - require('react-refresh')\n        //     - require('react').options\n        //       - require('useSyncExternalStore')\n        //         - __REFRESH__.sign // not a function\n        if (globalThis.__PREFRESH__) {\n          globalThis.__PREFRESH__.register(type, currentModuleId + ' ' + id);\n        }\n      };\n    };\n    reg();\n    try {\n      originalFactory.call(this, moduleObject, moduleExports, webpackRequire);\n    } finally {\n      globalThis.$RefreshReg$ = prevRefreshReg;\n      globalThis.$RefreshSig$ = prevRefreshSig;\n    }\n  };\n});\n\n// noop fns to prevent runtime errors during initialization\nif (typeof globalThis !== \"undefined\") {\n  globalThis.$RefreshReg$ = function () {};\n  globalThis.$RefreshSig$ = function () {\n    return function(type) {\n      return type;\n    };\n  };\n}","\n__webpack_require__.cssHotUpdateList = [[\"main__main-thread\",\".rspeedy/main__main-thread/main__main-thread.css.hot-update.json\"]];\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"http://192.168.50.74:3000/\";","// lynx async chunks ids\n__webpack_require__.lynx_aci = {}","// object to store loaded chunks\n// \"1\" means \"loaded\", otherwise not loaded yet\nvar installedChunks = __webpack_require__.hmrS_require = __webpack_require__.hmrS_require || {\n\t\"main__main-thread\": 1\n};\n// no on chunks loaded\n// no chunk install function needed\n// no chunk loading\n\n    function loadUpdateChunk(chunkId, updatedModulesList) {\n        return new Promise((resolve, reject) => {\n            lynx.requireModuleAsync(__webpack_require__.p\n                + __webpack_require__.hu(chunkId), (err, update) => {\n                if (err) {\n                    reject(err);\n                    return;\n                }\n                var updatedModules = update.modules;\n                var runtime = update.runtime;\n                for (var moduleId in updatedModules) {\n                    if (__webpack_require__.o(updatedModules, moduleId)) {\n                        currentUpdate[moduleId] = updatedModules[moduleId];\n                        if (updatedModulesList)\n                            updatedModulesList.push(moduleId);\n                    }\n                }\n                if (runtime)\n                    currentUpdateRuntime.push(runtime);\n                resolve();\n            });\n        });\n    }\n\n    var currentUpdateChunks;\n    var currentUpdate;\n    var currentUpdateRemovedChunks;\n    var currentUpdateRuntime;\n    function applyHandler(options) {\n        if (__webpack_require__.f) {\n            delete __webpack_require__.f.requireHmr;\n        }\n        currentUpdateChunks = undefined;\n        function getAffectedModuleEffects(updateModuleId) {\n            var outdatedModules = [updateModuleId];\n            var outdatedDependencies = {};\n            var queue = outdatedModules.map(function (id) {\n                return {\n                    chain: [id],\n                    id: id,\n                };\n            });\n            while (queue.length > 0) {\n                var queueItem = queue.pop();\n                var moduleId = queueItem.id;\n                var chain = queueItem.chain;\n                var module = __webpack_require__.c[moduleId];\n                if (!module\n                    || (module.hot._selfAccepted && !module.hot._selfInvalidated)) {\n                    continue;\n                }\n                if (module.hot._selfDeclined) {\n                    return {\n                        type: 'self-declined',\n                        chain: chain,\n                        moduleId: moduleId,\n                    };\n                }\n                if (module.hot._main) {\n                    return {\n                        type: 'unaccepted',\n                        chain: chain,\n                        moduleId: moduleId,\n                    };\n                }\n                for (var i = 0; i < module.parents.length; i++) {\n                    var parentId = module.parents[i];\n                    var parent = __webpack_require__.c[parentId];\n                    if (!parent)\n                        continue;\n                    if (parent.hot._declinedDependencies[moduleId]) {\n                        return {\n                            type: 'declined',\n                            chain: chain.concat([parentId]),\n                            moduleId: moduleId,\n                            parentId: parentId,\n                        };\n                    }\n                    if (outdatedModules.indexOf(parentId) !== -1)\n                        continue;\n                    if (parent.hot._acceptedDependencies[moduleId]) {\n                        if (!outdatedDependencies[parentId]) {\n                            outdatedDependencies[parentId] = [];\n                        }\n                        addAllToSet(outdatedDependencies[parentId], [moduleId]);\n                        continue;\n                    }\n                    delete outdatedDependencies[parentId];\n                    outdatedModules.push(parentId);\n                    queue.push({\n                        chain: chain.concat([parentId]),\n                        id: parentId,\n                    });\n                }\n            }\n            return {\n                type: 'accepted',\n                moduleId: updateModuleId,\n                outdatedModules: outdatedModules,\n                outdatedDependencies: outdatedDependencies,\n            };\n        }\n        function addAllToSet(a, b) {\n            for (var i = 0; i < b.length; i++) {\n                var item = b[i];\n                if (a.indexOf(item) === -1)\n                    a.push(item);\n            }\n        }\n        // at begin all updates modules are outdated\n        // the \"outdated\" status can propagate to parents if they don't accept the children\n        var outdatedDependencies = {};\n        var outdatedModules = [];\n        var appliedUpdate = {};\n        var warnUnexpectedRequire = function warnUnexpectedRequire(module) {\n            console.warn('[HMR] unexpected require(' + module.id + ') to disposed module');\n        };\n        for (var moduleId in currentUpdate) {\n            if (__webpack_require__.o(currentUpdate, moduleId)) {\n                var newModuleFactory = currentUpdate[moduleId];\n                /** @type {TODO} */\n                var result;\n                if (newModuleFactory) {\n                    result = getAffectedModuleEffects(moduleId);\n                }\n                else {\n                    result = {\n                        type: 'disposed',\n                        moduleId: moduleId,\n                    };\n                }\n                /** @type {Error|false} */\n                var abortError = false;\n                var doApply = false;\n                var doDispose = false;\n                var chainInfo = '';\n                if (result.chain) {\n                    chainInfo = '\\nUpdate propagation: ' + result.chain.join(' -> ');\n                }\n                switch (result.type) {\n                    case 'self-declined':\n                        if (options.onDeclined)\n                            options.onDeclined(result);\n                        if (!options.ignoreDeclined) {\n                            abortError = new Error('Aborted because of self decline: '\n                                + result.moduleId\n                                + chainInfo);\n                        }\n                        break;\n                    case 'declined':\n                        if (options.onDeclined)\n                            options.onDeclined(result);\n                        if (!options.ignoreDeclined) {\n                            abortError = new Error('Aborted because of declined dependency: '\n                                + result.moduleId\n                                + ' in '\n                                + result.parentId\n                                + chainInfo);\n                        }\n                        break;\n                    case 'unaccepted':\n                        if (options.onUnaccepted)\n                            options.onUnaccepted(result);\n                        if (!options.ignoreUnaccepted) {\n                            abortError = new Error('Aborted because ' + moduleId + ' is not accepted' + chainInfo);\n                        }\n                        break;\n                    case 'accepted':\n                        if (options.onAccepted)\n                            options.onAccepted(result);\n                        doApply = true;\n                        break;\n                    case 'disposed':\n                        if (options.onDisposed)\n                            options.onDisposed(result);\n                        doDispose = true;\n                        break;\n                    default:\n                        throw new Error('Un-exception type ' + result.type);\n                }\n                if (abortError) {\n                    return {\n                        error: abortError,\n                    };\n                }\n                if (doApply) {\n                    appliedUpdate[moduleId] = newModuleFactory;\n                    addAllToSet(outdatedModules, result.outdatedModules);\n                    for (moduleId in result.outdatedDependencies) {\n                        if (__webpack_require__.o(result.outdatedDependencies, moduleId)) {\n                            if (!outdatedDependencies[moduleId]) {\n                                outdatedDependencies[moduleId] = [];\n                            }\n                            addAllToSet(outdatedDependencies[moduleId], result.outdatedDependencies[moduleId]);\n                        }\n                    }\n                }\n                if (doDispose) {\n                    addAllToSet(outdatedModules, [result.moduleId]);\n                    appliedUpdate[moduleId] = warnUnexpectedRequire;\n                }\n            }\n        }\n        currentUpdate = undefined;\n        // Store self accepted outdated modules to require them later by the module system\n        var outdatedSelfAcceptedModules = [];\n        for (var j = 0; j < outdatedModules.length; j++) {\n            var outdatedModuleId = outdatedModules[j];\n            var module = __webpack_require__.c[outdatedModuleId];\n            if (module\n                && (module.hot._selfAccepted || module.hot._main)\n                // removed self-accepted modules should not be required\n                && appliedUpdate[outdatedModuleId] !== warnUnexpectedRequire\n                // when called invalidate self-accepting is not possible\n                && !module.hot._selfInvalidated) {\n                outdatedSelfAcceptedModules.push({\n                    module: outdatedModuleId,\n                    require: module.hot._requireSelf,\n                    errorHandler: module.hot._selfAccepted,\n                });\n            }\n        }\n        var moduleOutdatedDependencies;\n        return {\n            dispose: function () {\n                currentUpdateRemovedChunks.forEach(function (chunkId) {\n                    delete installedChunks[chunkId];\n                });\n                currentUpdateRemovedChunks = undefined;\n                var idx;\n                var queue = outdatedModules.slice();\n                while (queue.length > 0) {\n                    var moduleId = queue.pop();\n                    var module = __webpack_require__.c[moduleId];\n                    if (!module)\n                        continue;\n                    var data = {};\n                    // Call dispose handlers\n                    var disposeHandlers = module.hot._disposeHandlers;\n                    for (j = 0; j < disposeHandlers.length; j++) {\n                        disposeHandlers[j].call(null, data);\n                    }\n                    __webpack_require__.hmrD[moduleId] = data;\n                    // disable module (this disables requires from this module)\n                    module.hot.active = false;\n                    // remove module from cache\n                    delete __webpack_require__.c[moduleId];\n                    // when disposing there is no need to call dispose handler\n                    delete outdatedDependencies[moduleId];\n                    // remove \"parents\" references from all children\n                    for (j = 0; j < module.children.length; j++) {\n                        var child = __webpack_require__.c[module.children[j]];\n                        if (!child)\n                            continue;\n                        idx = child.parents.indexOf(moduleId);\n                        if (idx >= 0) {\n                            child.parents.splice(idx, 1);\n                        }\n                    }\n                }\n                // remove outdated dependency from module children\n                var dependency;\n                for (var outdatedModuleId in outdatedDependencies) {\n                    if (__webpack_require__.o(outdatedDependencies, outdatedModuleId)) {\n                        module = __webpack_require__.c[outdatedModuleId];\n                        if (module) {\n                            moduleOutdatedDependencies =\n                                outdatedDependencies[outdatedModuleId];\n                            for (j = 0; j < moduleOutdatedDependencies.length; j++) {\n                                dependency = moduleOutdatedDependencies[j];\n                                idx = module.children.indexOf(dependency);\n                                if (idx >= 0)\n                                    module.children.splice(idx, 1);\n                            }\n                        }\n                    }\n                }\n            },\n            apply: function (reportError) {\n                // insert new code\n                for (var updateModuleId in appliedUpdate) {\n                    if (__webpack_require__.o(appliedUpdate, updateModuleId)) {\n                        __webpack_require__.m[updateModuleId] =\n                            appliedUpdate[updateModuleId];\n                    }\n                }\n                // run new runtime modules\n                for (var i = 0; i < currentUpdateRuntime.length; i++) {\n                    currentUpdateRuntime[i](__webpack_require__);\n                }\n                // call accept handlers\n                for (var outdatedModuleId in outdatedDependencies) {\n                    if (__webpack_require__.o(outdatedDependencies, outdatedModuleId)) {\n                        var module = __webpack_require__.c[outdatedModuleId];\n                        if (module) {\n                            moduleOutdatedDependencies =\n                                outdatedDependencies[outdatedModuleId];\n                            var callbacks = [];\n                            var errorHandlers = [];\n                            var dependenciesForCallbacks = [];\n                            for (var j = 0; j < moduleOutdatedDependencies.length; j++) {\n                                var dependency = moduleOutdatedDependencies[j];\n                                var acceptCallback = module.hot._acceptedDependencies[dependency];\n                                var errorHandler = module.hot._acceptedErrorHandlers[dependency];\n                                if (acceptCallback) {\n                                    if (callbacks.indexOf(acceptCallback) !== -1)\n                                        continue;\n                                    callbacks.push(acceptCallback);\n                                    errorHandlers.push(errorHandler);\n                                    dependenciesForCallbacks.push(dependency);\n                                }\n                            }\n                            for (var k = 0; k < callbacks.length; k++) {\n                                try {\n                                    callbacks[k].call(null, moduleOutdatedDependencies);\n                                }\n                                catch (err) {\n                                    if (typeof errorHandlers[k] === 'function') {\n                                        try {\n                                            errorHandlers[k](err, {\n                                                moduleId: outdatedModuleId,\n                                                dependencyId: dependenciesForCallbacks[k],\n                                            });\n                                        }\n                                        catch (err2) {\n                                            if (options.onErrored) {\n                                                options.onErrored({\n                                                    type: 'accept-error-handler-errored',\n                                                    moduleId: outdatedModuleId,\n                                                    dependencyId: dependenciesForCallbacks[k],\n                                                    error: err2,\n                                                    originalError: err,\n                                                });\n                                            }\n                                            if (!options.ignoreErrored) {\n                                                reportError(err2);\n                                                reportError(err);\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (options.onErrored) {\n                                            options.onErrored({\n                                                type: 'accept-errored',\n                                                moduleId: outdatedModuleId,\n                                                dependencyId: dependenciesForCallbacks[k],\n                                                error: err,\n                                            });\n                                        }\n                                        if (!options.ignoreErrored) {\n                                            reportError(err);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                // Load self accepted modules\n                for (var o = 0; o < outdatedSelfAcceptedModules.length; o++) {\n                    var item = outdatedSelfAcceptedModules[o];\n                    var moduleId = item.module;\n                    try {\n                        item.require(moduleId);\n                    }\n                    catch (err) {\n                        if (typeof item.errorHandler === 'function') {\n                            try {\n                                item.errorHandler(err, {\n                                    moduleId: moduleId,\n                                    module: __webpack_require__.c[moduleId],\n                                });\n                            }\n                            catch (err2) {\n                                if (options.onErrored) {\n                                    options.onErrored({\n                                        type: 'self-accept-error-handler-errored',\n                                        moduleId: moduleId,\n                                        error: err2,\n                                        originalError: err,\n                                    });\n                                }\n                                if (!options.ignoreErrored) {\n                                    reportError(err2);\n                                    reportError(err);\n                                }\n                            }\n                        }\n                        else {\n                            if (options.onErrored) {\n                                options.onErrored({\n                                    type: 'self-accept-errored',\n                                    moduleId: moduleId,\n                                    error: err,\n                                });\n                            }\n                            if (!options.ignoreErrored) {\n                                reportError(err);\n                            }\n                        }\n                    }\n                }\n                return outdatedModules;\n            },\n        };\n    }\n    __webpack_require__.hmrI.require = function (moduleId, applyHandlers) {\n        if (!currentUpdate) {\n            currentUpdate = {};\n            currentUpdateRuntime = [];\n            currentUpdateRemovedChunks = [];\n            applyHandlers.push(applyHandler);\n        }\n        if (!__webpack_require__.o(currentUpdate, moduleId)) {\n            currentUpdate[moduleId] = __webpack_require__.m[moduleId];\n        }\n    };\n    __webpack_require__.hmrC.require = function (chunkIds, removedChunks, removedModules, promises, applyHandlers, updatedModulesList) {\n        applyHandlers.push(applyHandler);\n        currentUpdateChunks = {};\n        currentUpdateRemovedChunks = removedChunks;\n        currentUpdate = removedModules.reduce(function (obj, key) {\n            obj[key] = false;\n            return obj;\n        }, {});\n        currentUpdateRuntime = [];\n        chunkIds.forEach(function (chunkId) {\n            if (__webpack_require__.o(installedChunks, chunkId)\n                && installedChunks[chunkId] !== undefined) {\n                promises.push(loadUpdateChunk(chunkId, updatedModulesList));\n                currentUpdateChunks[chunkId] = true;\n            }\n            else {\n                currentUpdateChunks[chunkId] = false;\n            }\n        });\n        if (__webpack_require__.f) {\n            __webpack_require__.f.requireHmr = function (chunkId, promises) {\n                if (currentUpdateChunks\n                    && __webpack_require__.o(currentUpdateChunks, chunkId)\n                    && !currentUpdateChunks[chunkId]) {\n                    promises.push(loadUpdateChunk(chunkId));\n                    currentUpdateChunks[chunkId] = true;\n                }\n            };\n        }\n    };\n\n    __webpack_require__.hmrM = function () {\n        return new Promise((resolve, reject) => lynx.requireModuleAsync(__webpack_require__.p\n            + __webpack_require__.hmrF(), (err, ret) => {\n            if (err)\n                return reject(err);\n            resolve(ret);\n        }))['catch'](function (err) {\n            if (err.code !== 'MODULE_NOT_FOUND')\n                throw err;\n        });\n    };"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AAEA;AACA;AACA;AAEA;;;;;AAKA;AAEA;AACA;AACA;AACA;AAEA;;;;;AAKA;AAEA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AAEA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;AAIA;AAEA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;;;;AAIA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;;;;;;;;;;;;;;;;AAgBA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;AAGA;AAEA;AACA;AAEA;;;;AAIA;AAEA;AACA;AAEA;;;;AAIA;AAEA;AACA;AAEA;;;;AAIA;AAEA;AACA;AAEA;;;;;;AAMA;AAEA;AACA;AACA;AAEA;;;;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AAEA;AACA;AAEA;;;;;;AAMA;AAEA;AACA;AACA;AAEA;;;;;;;;AAQA;AAEA;AACA;AAEA;;;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;;;;AAIA;AAEA;AAEA;;;AAGA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;AC92BA;AACA;AAEA;AACA;AAEA;;AAEA;AAEA;AACA;AAEA;;;;;;;;;;;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;;AAKA;AAEA;AAEA;AAEA;AAGA;AACA;AAEA;;;AAGA;AAGA;;;;;;;;;;;;;;;;;AAiBA;AAGA;;;AAGA;AAEA;AACA;AAEA;;;;;AAKA;AAGA;;;AAGA;AAEA;AACA;AAEA;;;;AAIA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;;;;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;;;;;;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;AAGA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAEA;;;AAGA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAAA;AAIA;AAEA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AAEA;AAGA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAEA;;;;AAIA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;AC1jBA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;;;AAGA;AAEA;AAGA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzBA;AAEA;AAEA;AAEA;AAGA;AAEA;AACA;AACA;AAEA;AAEA;;;;;;AAMA;AAEA;AACA;AACA;AACA;AAEA;;;;;AAKA;AAEA;AACA;AACA;AAEA;;;;;;;;AAQA;AAEA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;;;;;AAQA;AAEA;AACA;AAEA;AAEA;;;;;;;;AAQA;AAEA;AAIA;AACA;AAAA;AAAA;AACA;AACA;AAIA;AACA;AACA;AACA;AAKA;AACA;AACA;AAEA;;;;;;;;;;;AAWA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AAEA;AACA;AAEA;;;;;;AAMA;AAEA;AACA;AACA;AAEA;;;;;;;;AAQA;AAEA;AACA;AACA;AAGA;AAEA;AAGA;AAEA;AAIA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;;;;;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;AASA;AAGA;;;AAGA;AAEA;AAIA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AAGA;;;;;;;AAOA;AAGA;AAEA;;;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;AAqBA;AAEA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AAEA;AAGA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAEA;;;;;AAKA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;;AAKA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;;;;;;AAMA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAKA;AACA;AACA;AAKA;AACA;AAGA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAGA;AAEA;AACA;AAEA;;;;AAIA;AAEA;;;;AAIA;AAEA;AACA;AACA;AAMA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;AAiBA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAGA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;;;;AAIA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;AAcA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAKA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AAEA;;;;;AAKA;AAEA;AACA;AACA;AACA;AAIA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AAEA;AACA;AACA;AACA;AAAA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AAIA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;;;;;;AAMA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AAGA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;;;;AAIA;AAEA;AACA;AAEA;;;;;;;;AAQA;AAEA;AAIA;AACA;AAGA;AACA;AAAA;AAAA;AAGA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACx6CA;AAEA;AAGA;AAGA;AAGA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;;;;AAIA;AAEA;AACA;AACA;AAEA;;;;;;;AAOA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AAEA;AAGA;AAEA;;;AAGA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;AASA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;;;;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AAEA;AACA;AACA;AACA;AAEA;;;;;AAKA;AAEA;AACA;AAEA;;;;;;;;;;;;;;ACngBA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AAGA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;ACnCA;AACA;AACA;AACA;AAGA;AACA;;;;;;;;;;;;;;;;;;ACNA;;;;;;;;;;;;;;ACDA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;AAQA;AAEA;AAIA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAKA;AAEA;AACA;AAEA;;;;;;;;AAQA;AAEA;AAKA;AAEA;AAIA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AAIA;AAOA;;;;;;;;;;;;;;;;;;;;;;;ACtFA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAKA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AAGA;AAMA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;AAEA;AACA;AAKA;AAgBA;;AACA;AAIA;AAnBA;AACA;AACA;AACA;AACA;AACA;AAQA;AAOA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACnGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACnEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;AAEA;AACA;;AAEA;AAKA;AAHA;AAGA;AAGA;AAGA;AACA;AACA;;;AAGA;AAEA;;;;;;;;;;;;;;;;;AAiBA;AAEA;;AAEA;AAEA;AACA;AACA;;AAEA;AAEA;AACA;AACA;;AAEA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;;;;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;AC/IA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAQA;AAEA;AACA;AACA;AAKA;AAwBA;AACA;AACA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAwBA;;;;;;;;;;;;;;;;;;;;ACpIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAkBA;AAjBA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAWA;AAEA;AACA;AACA;;;;;;;;AAQA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;AC/BA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;;;;;;;;;;;;;;;;;;;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAKA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3RA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;;AAEA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;;;;;;;;;;;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;;;;;;;;;;AAUA;;;AAIA;AAGA;AACA;AAGA;AAEA;AAEA;AAMA;AACA;AACA;AACA;AAMA;;AAEA;AAEA;AAIA;AACA;AACA;AAwDA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;;AAEA;AAEA;AACA;AACA;;AAEA;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;AC3JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;;;;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AC7DA;AACA;AACA;AACA;;;;;;;;;AASA;AAEA;AACA;AACA;;;;AAIA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AAIA;AACA;AAYA;AAEA;AACA;;;AAIA;AAEA;AAGA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;AClEA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AAAA;AACA;;;AAGA;AAEA;;;AAGA;AAEA;AAIA;AAEA;AACA;;AAEA;AAEA;AAGA;AACA;AACA;AACA;;;AAGA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AA3BA;AACA;AACA;AA0BA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7EA;AACA;AACA;AACA;;;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;;AC1EA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AASA;AAGA;AACA;AACA;AAGA;AAGA;AACA;;;;;;;;;;;;;;;;;;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAaA;AAZA;AACA;AACA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAAA;AACA;AACA;AACA;;;;;;;;;AASA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AASA;AARA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAKA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AAAA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACvQA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAGA;AACA;AAEA;AAIA;AAHA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AA9IA;AA2BA;AACA;AACA;AACA;AACA;AA9BA;AACA;AACA;AACA;AA2IA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtJA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;;;;;;;;AAQA;AAEA;AAGA;AA2BA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;AAEA;AACA;;;;;AAKA;AAEA;AACA;;;;;;;;;;;;;;;AAeA;AAEA;;;;;;;;;;;;AAYA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AAIA;AAGA;AACA;AAGA;AA0BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;;AAEA;;;;;;;;;;;;;;AChIA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAYA;AACA;AACA;AAAA;AACA;AAIA;AAEA;;;;;;;;;;;;;;;;;;AC7BA;AAOA;AAKA;AAFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAIA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAQA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;ACzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAGA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;AC/CA;AACA;AACA;AACA;;;;;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAsCA;AACA;AACA;AACA;AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnIA;AACA;AACA;AACA;AAEA;AACA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AA0BA;AAxBA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AAEA;AACA;AAGA;AACA;AAEA;;AAEA;AACA;AACA;AAAA;AACA;AAYA;AAXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAYA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAIA;AAEA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;ACxIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AChIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzBA;AACA;AACA;AACA;;;;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAGA;AAEA;AACA;AACA;;;;;;;;AAQA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAIA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACjQA;AACA;AACA;AAEA;AACA;;;AAGA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACviBA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;;;;;;AAMA;AAuBA;AACA;AACA;AACA;AACA;AACA;AAIA;AAAA;AAWA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAIA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAIA;AAEA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAOA;AACA;AACA;AACA;AACA;AAGA;AAIA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAIA;;AAGA;AAEA;AACA;AACA;AACA;AACA;;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAIA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAxUA;AAJA;AA2HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/HA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AA+TA;;;;;;;;;;;;;;;;;;AClhBA;AACA;AACA;AACA;;;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACfA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAIA;AAEA;AACA;AACA;AAGA;AACA;;;;;;;;;;;;;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAGA;AACA;AAGA;AAGA;;;;;;;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AC1CA;AACA;AACA;AACA;AACA;;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAEA;AAGA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AAGA;AACA;AAGA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1GA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AAKA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AAGA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AAKA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AAGA;AAGA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACpSA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAIA;AAAA;AAAA;;AAGA;AACA;AAIA;AAHA;AAGA;;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAOA;AAEA;;;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACvEA;AACA;AACA;AACA;;;;;;AAMA;AAEA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAZA;AACA;;AAYA;AACA;;;;;;;;;;;;;;;;;;;;;;;AClBA;AACA;AACA;AACA;AAGA;AACA;AAgBA;;AAEA;AAwBA;;AAEA;AAMA;;;;;;;;;;;;;;;;;AAiBA;AAEA;AAMA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC5GA;;;;;;;;;;;;;;;;;AAiBA;AAGA;AAmBA;;;;;;;;;;;;;;;;;;AC3CA;AACA;;;;AAIA;;AAEA;AACA;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA+BA;AAIA;AAIA;AACA;AACA;AAIA;AAGA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AAvCA;;AAEA;AAEA;AACA;AAMA;AAEA;AA2BA;AACA;;;;;;AAMA;AAEA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC9FA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;;;;AAIA;AAEA;AAAA;AACA;AACA;;;;;;AAMA;;AAEA;AACA;AACA;;;;AAIA;AAEA;AAAA;AAGA;AACA;;;;AAIA;AAEA;AACA;AACA;;;;AAIA;;AAEA;AACA;AACA;;;;AAIA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;;;;AAIA;AAEA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;;;;;;;AAOA;;AAEA;AACA;AAGA;AACA;AAGA;AACA;;AAEA;;;AAEA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AC7BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;;;;;;;;;AASA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AAEA;AACA;;;;;;AAMA;AAEA;;;;AAIA;AAEA;;;AAGA;AAEA;AACA;AACA;;;AAGA;AAEA;AAGA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AAEA;AAGA;AACA;AAKA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AAEA;AAGA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AAKA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;;;;AAIA;AAEA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAIA;AACA;AACA;AACA;;;;;;;;;;;;;AAaA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;;;;AAIA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;AAKA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;;;;AAIA;AAEA;AAGA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AAsBA;AAEA;AACA;AACA;;AAEA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;;AAEA;AAEA;;AAEA;AAEA;;AAEA;AAEA;;AAEA;AAEA;;;AAGA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AA0BA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAiGA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;;;AAGA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAKA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AAkBA;AAEA;AAKA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAIA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;;;;;;;;;;;;;;;;;;AAkBA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AAmt8HA;;;;;;;;;AASA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AAIA;;;;;;;;AAQA;AAGA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAIA;;;;;AAKA;AAEA;AAGA;AAGA;AAIA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AAEA;AACA;AAEA;;;;;;;;;AASA;AAEA;AAGA;AACA;AAEA;;;;;AAKA;AAEA;AACA;AAEA;;;;;;AAMA;AAEA;AAGA;AAGA;AAAA;AAAA;AAAA;AACA;AAEA;;AAEA;AAIA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAEA;;;;;AAKA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAIA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;;;;AAIA;AAEA;AACA;AAEA;;;;;AAKA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;;;;;AAKA;AAEA;AAGA;AACA;AACA;AAEA;;;;AAIA;AAEA;AAGA;AAGA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;;;;;;;AAOA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA4CA;AACA;AACA;AAKA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AAEA;;;AAGA;AAEA;AACA;AACA;AAEA;;;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;;;AAGA;AAEA;AAIA;AAAA;AAAA;AAAA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AAEA;;;;;AAKA;AAEA;AAIA;AACA;AACA;AACA;AAGA;AAIA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;;;AAGA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;AAoBA;AAEA;AAEA;;AAEA;AAEA;AAKA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;;;;AAIA;AAEA;AAOA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAQA;AAEA;AAMA;AAGA;AACA;AAGA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;AAIA;AAEA;AACA;AACA;;;;AAIA;AAEA;AACA;AACA;;;;;;;;AAQA;AAEA;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAOA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AAEA;AAIA;AACA;AACA;;;AAGA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAIA;AAGA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAGA;AACA;AACA;AApFA;AACA;AACA;AACA;AACA;AACA;AAgFA;AAEA;;;AAGA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;;;AAMA;AAEA;AAGA;AACA;AACA;AAGA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;ACh0CA;AACA;AAEA;AAGA;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;ACDA;;AACA;;;AAEA;;;AAOA;;;AAKA;;;;;;;;;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA3BA;AAEA;AACA;AAEA;AAEA;;AAKA;AACA;AACA;AACA;AAIA;AACA;AACA;;;;AAGA;;;AAAA;;;AAIA;;;;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;AChCA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AACA;AAAA;AAAA;;;;;;;;;;AACA;AAAA;AAAA;;;;;;;;;;AACA;AAAA;AAAA;;;;;;;;;;AACA;AAAA;AAAA;;;;;;;;;;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;;;;AAuGA;;;;;;;;;;;;;;;;;;;;;;;AAgBA;;;;;;;;AAIA;;;;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AAJA;;;;;;;;;;;;;;;;;;AAPA;AAAA;;;;;;;;AAtBA;;AACA;;;;;AACA;;;;;AAUA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAzGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAaA;AAZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAIA;;AAEA;;;AAGA;;;;;;;AASA;;;;AAEA;AACA;;;;;AAEA;;AACA;;;;;AAGA;;;;;AAMA;AAAA;;;;;;AACA;;;AACA;;AACA;;AAAA;;AACA;;;;;;;;;;;;;AARA;;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;ACpJA;AACA;AACA;AACA;AACA;AACA;;;;AA4EA;;;;;;;;;;;;;;;;;;;;;;AAYA;;;;;;;;AAQA;;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;AAnBA;;;;;;;;AAbA;;AACA;;;AACA;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CA;;;;;;;;AAPA;;AACA;;;;;AACA;;;AACA;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AARA;;;;;;;;;;;;;;;;AAJA;;AACA;;;;;AACA;;;;;;;;;;;;;;;;;AAiBA;;AACA;;;;;;;;;;;;;;;;;;;;;AAUA;;;;;;;;;;;AAKA;;;;;;;;AAEA;;;;;;;;AAHA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAnBA;;;AACA;;;;;;;;;;;;;;;;;;;;;AA4BA;;;;;;;;;;;AApHA;;;;;;;;AAyHA;;AAGA;;;;;;;;;;;;;;;;;AAIA;;AACA;;;AACA;;;;;AACA;;;;;;;;;;;;;;;;;;;;;AAyCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAjLA;;;AACA;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAvCA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAqBA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;;;;;AAMA;AACA;;;;AAEA;;AAEA;;;AAEA;;;AAEA;;AACA;;AAAA;;AACA;;;;;;AAGA;AACA;;;;;;AAGA;;AACA;AAEA;;;;;;;;;;AAcA;;;;;;;;;;;;;;;;;;;;;AAUA;;;AAKA;;AAEA;AACA;;;;;;;;;;;;AAOA;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;;;;;;;AAEA;;;AACA;;;AAAA;;;;;;;;;AATA;;;;;;;;;;AAeA;AAEA;AACA;AACA;AACA;;;;;;;;;;;AAGA;AAEA;;;;AAGA;;AACA;;;AACA;;AACA;AAAA;;;;;;;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AAGA;AAEA;;;;;;;AAdA;;;;;;;;;;;AAuBA;;;;;;;;;;;;AAGA;;;;AAKA;;;;;;AAGA;;AAMA;;AAaA;;AAaA;;;;;;;;;;;;;;;;;AAwBA;AAEA;AAGA;AAFA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AC7QA;AACA;AACA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;AA4CA;;;;;;;;AAIA;;;;;;;;AAOA;;;;;;;;AAYA;;;;;;;;AAIA;;;;;;;;AAaA;;;;;;;;AAKA;;;;;;;;;;;AA2BA;;;;;;;;;;;AA/EA;;AACA;;;AACA;;;;;AACA;;;AACA;;;AACA;;;AACA;;;;;;;AAGA;;;AACA;;;;;;;AAGA;;;AACA;;;AACA;;;;;AACA;;;;;;;;;AAQA;;;AACA;;;;;AACA;;;AACA;;;AACA;;;AACA;;;;;;;AAGA;;;AACA;;;;;;;AAGA;;;AACA;;;;;;;;;AACA;;;;;;;AAEA;;;AACA;;;;;AACA;;;;;;;AAEA;;;AACA;;;AACA;;;;;;;;;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA/DA;;AACA;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;AA/BA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAYA;AACA;AAGA;AA2BA;AAvBA;;;;AAIA;;;;AAGA;;AA0DA;AAAA;AAAA;AAAA;;;;AAnDA;AAAA;;;;;;AAIA;AAAA;;;;;;;;;AAOA;AACA;;;;;;AAWA;AAAA;;;;;;AAIA;AAAA;;;;;;;AAGA;;;AACA;;;AAIA;;AAKA;AAAA;;;;;;;AAIA;;;;;;;AAyBA;;;AAEA;;;;;;;;;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;AC5JA;AACA;AACA;AACA;;;;AA8CA;AAAA;;;;;;;;AAWA;;;;;;;;;;;AAOA;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;AACA;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAnBA;;;;;;;;;;;;;;;AAsDA;;;;;;;;AAMA;;;;;;;;AAOA;;;;;;;;AAFA;;;;;;;;AAdA;;AACA;;;;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA3BA;;AACA;;;;;AACA;;;;;AAGA;;;AACA;;;;;AACA;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA/DA;;;AACA;;;;;AACA;;;;;AACA;;;;;;;;;;;AAIA;;;AACA;;;;;AACA;;;;;AAIA;;;;;AAKA;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AArDA;AA6GA;AA5GA;AACA;AACA;AACA;AACA;AACA;AAEA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAWA;AACA;;;;;;AASA;;AACA;;;;;AACA;;AAGA;;;;AAGA;AAAA;;;;;;AACA;AAAA;;;;;;AACA;AAAA;;;;;;AACA;AACA;;;;;;AAMA;;;;AAKA;;;;;;;AAnBA;;;;;;;;;;;;AA0BA;;;;;AAgBA;AACA;;;;;;;AAGA;;AAIA;;;;;;;AAMA;AACA;;;;;;AAIA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;ACvIA;AACA;AACA;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AMXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACNA;;;;ACAA;;;;ACAA;AACA;AACA;AACA;;;;ACHA;;;;ACAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AC5bA;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACNA;;;;ACAA;AACA;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"}