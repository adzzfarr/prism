// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  tiktokId  String?   @unique
  name      String
  role      String // 'creator' | 'consumer'
  kycStatus String    @default("none")
  accounts  Account[]
  gifts     Gift[]    @relation("giftConsumer")
  createdAt DateTime  @default(now())
  Live      Live[]
}

model Live {
  id           String    @id @default(cuid())
  creatorId    String
  creator      User      @relation(fields: [creatorId], references: [id])
  startAt      DateTime
  endAt        DateTime?
  metricsJson  Json?
  qualityScore Float?
  status       String    @default("running")
  gifts        Gift[]
}

model Gift {
  id             String   @id @default(cuid())
  liveId         String
  live           Live     @relation(fields: [liveId], references: [id])
  consumerId     String
  consumer       User     @relation(name: "giftConsumer", fields: [consumerId], references: [id])
  coinAmount     Int
  timestamp      DateTime @default(now())
  riskFlag       Boolean  @default(false)
  idempotencyKey String   @unique
}

model Account {
  id         String @id @default(cuid())
  ownerId    String?
  owner      User?   @relation(fields: [ownerId], references: [id])
  type       String // 'holding' | 'creator' | 'platform' | 'reserve'
  balanceUSD Float   @default(0.0)
}

model Ledger {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  debitAccountId  String
  creditAccountId String
  amount          Int
  currency        String   @default("COIN")
  refType         String // 'gift' | 'settlement' | 'payout'
  refId           String
  hashPrev        String?
  hashThis        String
  status          String   @default("unsettled")
}

model Payout {
  id          String   @id @default(cuid())
  creatorId   String
  amount      Int
  status      String   @default("pending")
  externalRef String?
  timestamp   DateTime @default(now())
}

model MerkleSnapshot {
  id        String   @id @default(cuid())
  root      String
  signature String
  ledgerIds String[]
  createdAt DateTime @default(now())
}
